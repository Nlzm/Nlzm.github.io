<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python 日志logging</title>
    <link href="/2023/11/20/Python-log/"/>
    <url>/2023/11/20/Python-log/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-日志logging"><a href="#Python-日志logging" class="headerlink" title="Python 日志logging"></a>Python 日志logging</h1><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311201523221.png" alt="image-20231120152320128"></p><p>日志功能需要根据追踪事件的级别和严重性而定：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311201524357.png" alt="image-20231120152440314"></p><p>Python的logging库采用模块化方法，并且提供了一些组件：</p><ul><li>记录器（Logger）：提供应用程序代码直接使用的接口。</li><li>处理器（Handler）：将日志记录（由记录器创建）发送到适当的目的地。</li><li>筛选器（Filter）：提供了更细粒度的功能，用于确定要输出的日志记录。</li><li>格式器（Formatter）：程序在最终输出日志记录的内容格式。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>LOG_FORMAT = <span class="hljs-string">&quot;%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s&quot;</span><br>logging.basicConfig(filename=<span class="hljs-string">&#x27;log.log&#x27;</span>,<span class="hljs-built_in">format</span>=LOG_FORMAT,level=logging.DEBUG)<span class="hljs-comment">#设置日志级别并记录到日志文件</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_log</span>(<span class="hljs-params">name</span>):<br>    logging.debug(<span class="hljs-string">&#x27;this is print_hi debug&#x27;</span>)<br>    logging.info(<span class="hljs-string">&#x27;this is print_hi info&#x27;</span>)<br>    logging.warning(<span class="hljs-string">&#x27;this is print_hi warning&#x27;</span>)<br>    logging.error(<span class="hljs-string">&#x27;this is print_hi error&#x27;</span>)<br>    logging.critical(<span class="hljs-string">&#x27;this is print_hi critical&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Hi print_hi, <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    print_log(<span class="hljs-string">&#x27;zz&#x27;</span>)<br></code></pre></td></tr></table></figure><p>LogRecord属性如下：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311201533099.png" alt="image-20231120153329049"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码技能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPN ——特征金字塔</title>
    <link href="/2023/11/07/FPN/"/>
    <url>/2023/11/07/FPN/</url>
    
    <content type="html"><![CDATA[<h1 id="FPN-——特征金字塔"><a href="#FPN-——特征金字塔" class="headerlink" title="FPN ——特征金字塔"></a>FPN ——特征金字塔</h1><p>论文链接：<a href="https://openaccess.thecvf.com/content_cvpr_2017/papers/Lin_Feature_Pyramid_Networks_CVPR_2017_paper.pdf">Feature Pyramid Networks for Object Detection (thecvf.com)</a></p><h2 id="模型简介"><a href="#模型简介" class="headerlink" title="模型简介"></a>模型简介</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071847681.png" alt="image-20231107155943324"></p><ul><li>以特征金字塔为基础结构，对每一层级的特征图分别进行预测。</li><li>这种网络结构，能够在增加较少计算量的前提下融合低分辨率语义信息较强的特征图和高分辨率语义信息较弱但空间信息丰富的特征图。</li></ul><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071601619.png" alt="image-20231107160159580"></p><h4 id="1：Bottom-up-pathway"><a href="#1：Bottom-up-pathway" class="headerlink" title="1：Bottom-up pathway"></a>1：Bottom-up pathway</h4><p>前馈Backbone（主干网络）的一部分，每一级向上使用step&#x3D;2的降采样（降采样：每个类别被选择的概率是原始样本数量的倒数）。</p><p>输出size相同的网络部分称为一个stage，选择每一个stage的最后一层输出作为特征图的参考集。</p><p>以fasterRCNN的网络结构为例，左列ResNet用每级最后一个Residual Block的输出，记为{C1,C2,C3,C4,C5}。</p><p>FPN用2~5级参与预测(因为第一级的语义还是太低了)，{C2,C3,C4,C5}表示conv2，conv3，conv4和conv5的输出层(最后一个残差block层)作为FPN的特征，分别对应于输入图片的下采样倍数为{4，8，16，32}。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071839345.png" alt="image-20231107183949269"></p><h4 id="2：Top-down-pathway-and-lateral-connections"><a href="#2：Top-down-pathway-and-lateral-connections" class="headerlink" title="2：Top-down pathway and lateral connections"></a>2：Top-down pathway and lateral connections</h4><p>自顶向下的过程通过上采样(up-sampling)的方式将顶层的小特征图。放大到上一个stage的特征图一样的大小。</p><p>上采样的方法是最近邻插值法：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071845690.png" alt="image-20231107184543643"></p><p>通过自底向上路径，FPN得到了四组Feature Map。浅层的Feature Map，例如C2含有更多的底层信息（纹理，颜色等），而深层的Feature Map如C5含有更多的语义信息。为了将这四组倾向不同特征的Feature Map组合起来，FPN使用了自顶向下及横向连接的策略，最终得到P2，P3，P4，P5四个输出。</p><p>以P3为例，P3是由P4和C3共同得到，其中P4的通道数已经是 256 了，但是它的大小只是P3的 1&#x2F;2 ，因为我们使用上采样将它的尺寸增加到C3的大小，FPN中使用的上采样策略是最近邻居采样。继续，因为C3的通道数是128，而我们需要的P3的通道数是256，所以这里使用 1×1 卷积将C3的通道数扩充到 256 。最后P3是P4的上采样的Feature Map和C3的调整通道数的Feature Map的单位加。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071846070.png" alt="image-20231107184628008"></p>]]></content>
    
    
    <categories>
      
      <category>Multimodal Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从数量最多的堆取走礼物</title>
    <link href="/2023/10/30/min-gifts/"/>
    <url>/2023/10/30/min-gifts/</url>
    
    <content type="html"><![CDATA[<h1 id="从数量最多的堆取走礼物"><a href="#从数量最多的堆取走礼物" class="headerlink" title="从数量最多的堆取走礼物"></a>从数量最多的堆取走礼物</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310302316265.png" alt="image-20231030225117425"></p><h2 id="2、题解"><a href="#2、题解" class="headerlink" title="2、题解"></a>2、题解</h2><p>思路：每轮都寻找最大值，可以最大堆模拟。循环$k$次，每次循环弹出堆顶$top$，然后把$\lfloor\sqrt{top}\rfloor $入堆。</p><p>题解代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pickGifts</span>(<span class="hljs-params">self, gifts: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(gifts)):<br>            gifts[i] *= -<span class="hljs-number">1</span><br>        heapify(gifts)<br>        <span class="hljs-built_in">print</span>(gifts)<br>        <span class="hljs-keyword">while</span> k <span class="hljs-keyword">and</span> -gifts[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">1</span>:<br>            heapreplace(gifts,-isqrt(-gifts[<span class="hljs-number">0</span>]))<br>            k -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-built_in">sum</span>(gifts)<br></code></pre></td></tr></table></figure><p>我的方法（时间复杂度被爆杀）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pickGifts</span>(<span class="hljs-params">self, gifts: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">while</span>(k != <span class="hljs-number">0</span>):<br>            temp=<span class="hljs-number">0</span><br>            temp_num = gifts[<span class="hljs-number">0</span>]     <br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(gifts)):<br>                <span class="hljs-keyword">if</span> gifts[i]&gt;temp_num:<br>                    temp_num = gifts[i]<br>                    temp = i  <br>          <br>            gifts[temp] = <span class="hljs-built_in">int</span>(gifts[temp] **<span class="hljs-number">0.5</span>)<br>            k = k -<span class="hljs-number">1</span><br>        sum_gifts = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(gifts)):<br>            sum_gifts += gifts[j]<br>        <span class="hljs-keyword">return</span> sum_gifts<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Better Few-Shot Relation Extraction with Label Prompt Dropout</title>
    <link href="/2023/10/30/LPD/"/>
    <url>/2023/10/30/LPD/</url>
    
    <content type="html"><![CDATA[<h1 id="《Better-Few-Shot-Relation-Extraction-with-Label-Prompt-Dropout》"><a href="#《Better-Few-Shot-Relation-Extraction-with-Label-Prompt-Dropout》" class="headerlink" title="《Better Few-Shot Relation Extraction with Label Prompt Dropout》"></a>《Better Few-Shot Relation Extraction with Label Prompt Dropout》</h1><p>原文链接：<a href="https://arxiv.org/pdf/2210.13733.pdf">arxiv.org&#x2F;pdf&#x2F;2210.13733.pdf</a></p><p>源码链接：<a href="https://github.com/jzhang38/LPD">jzhang38&#x2F;LPD: code for EMNLP 2022 paper Better Few-Shot Relation Extraction with Label Prompt Dropout (github.com)</a></p><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>​本文提出了一种新方法——LPD（Label Prompt Dropout），该方法将文本标签与上下文句子连接后传入Transformer Encoder。用文本标签代替标签提示符，知道Encoder关注自身输出标签感知的关系表示。在训练期间，模型还会随机删除提示符号来使模型学会在使用（不使用）关系描述的情景下进行训练。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310281431443.png" alt="image-20231028143111344"></p><h2 id="2、模型构建"><a href="#2、模型构建" class="headerlink" title="2、模型构建"></a>2、模型构建</h2><h3 id="2-1-Training-with-Label-Prompt-Dropout"><a href="#2-1-Training-with-Label-Prompt-Dropout" class="headerlink" title="2.1 Training with Label Prompt Dropout"></a>2.1 Training with Label Prompt Dropout</h3><ul><li><p>每个输入实例都是由$:$将label prompt和上下文文本连接起来，来让Transformer Encoder学习到标签的关系表示。</p></li><li><p>以一定概率随机剔除label prompt来防止模型依赖prompt而忽略上下文文本。</p></li><li><p>使用特殊标记来标记上下文文本头尾以及分离token，例如：“[CLS] location of event: [E1] Beijing [&#x2F;E1] held the [E2] 2022 winter Olympics [&#x2F;E2] .”并将分离token起始位置的最后一层表示连接起来：$r&#x3D;[\mathrm{Encoder}(x)_h;\mathrm{Encoder}(x)_t]$, h表示[E1]的位置，t表示[E2]的位置，r为关系表示。</p></li><li><p>对于K-way- n -shot学习，对一个类中K个支持实例的关系表示进行平均，以获得类原型。然后计算查询实例与每个类原型之间的点积，作为交叉熵损失中的logit:<br>$$<br>\begin{gathered}<br>u^{n}&#x3D;{\frac{1}{K}}\sum_{k&#x3D;1}^{K}r_{k}^{n} \<br>{\mathcal L}<em>{train}&#x3D;-\sum</em>{n&#x3D;1}^{N}\log\frac{\exp(r_{q}^{\mathsf{T}}u^{n})}{\sum_{n^{\prime}&#x3D;1}^{N}\exp(r_{q}^{\mathsf{T}}u^{n^{\prime}})}<br>\end{gathered}<br>$$<br>$r_{k}^{n}$代表n类的k-th支持实例，$r_{q}$事 查询实例的关系表示。</p></li></ul><h3 id="2-2-Testing-with-Prompt-Guided-Prototypes"><a href="#2-2-Testing-with-Prompt-Guided-Prototypes" class="headerlink" title="2.2 Testing with Prompt Guided Prototypes"></a>2.2 Testing with Prompt Guided Prototypes</h3><p>LPD在测试中不会dropout任何支持实例的label prompt，而是将二者一起输入。通过找到与查询关系表示最接近的类原型来输出预测：$\hat{y}<em>{num}&#x3D;\arg\max</em>{n}r_{q}^{\top}u^{n}$</p><h3 id="2-3-Contrastive-Pre-training-with-Label-Prompt-Dropout"><a href="#2-3-Contrastive-Pre-training-with-Label-Prompt-Dropout" class="headerlink" title="2.3 Contrastive Pre-training with Label Prompt Dropout"></a>2.3 Contrastive Pre-training with Label Prompt Dropout</h3><p>本文遵循MT-BERT框架，对对比预训练中使用的正样本和负样本进行抽样。给定一个知识图$K$和两个具有实体对（h1,t1）和（h2,t2）的句子，如果K定义了一个关系R，使得（h1,t1）和（h2,t2）属于R，则两个句子标记为正样本，否则作为负样本。如图2所示：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310301501515.png" alt="image-20231030150103412"></p><p>预训练阶段的每个实例与训练阶段的支持实例进行相同的转换。在每个句子前加上一个标签提示，并在句子中插入特殊的标记。使用对比损失来训练模型:$\mathcal{L}<em>{CP}&#x3D;-\log\frac{\exp(r_Ar_B)}{\exp(r_Ar_B)+\sum</em>{i&#x3D;1}^N\exp(r_Ar_B^i)}$。式中$(r_A, r_B)$为正对，$(r_A, r_{B}^{i})， 1≤i≤N$为负对。</p><p>使用掩码语言建模目标(LMLM)来维持模型的语言理解能力。所以最终的预训练损失变成:${\mathcal L}<em>{pre-train}&#x3D;{\mathcal L}</em>{CP}+{\mathcal L}_{MLM}$</p><h2 id="3、实验结果"><a href="#3、实验结果" class="headerlink" title="3、实验结果"></a>3、实验结果</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310301542385.png" alt="image-20231030154246339"></p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310301542382.png" alt="image-20231030154252348"></p><p>LPD模型在不同类和样本数下的准确率都比以往的模型更高。</p><h2 id="4、代码复现"><a href="#4、代码复现" class="headerlink" title="4、代码复现"></a>4、代码复现</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311041438026.png" alt="image-20231104143744033"></p><p>解决方法：手动下载模型并保存在代码目录下</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311041439419.png" alt="image-20231104143920391"></p><p>解决方法：修改源代码中的apex-master&#x2F;apex&#x2F;amp&#x2F;utils.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">将 <span class="hljs-keyword">if</span> cached_x.grad_fn.next_functions[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].variable <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> x:<br>改为 <span class="hljs-keyword">if</span> cached_x.grad_fn.next_functions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].variable <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> x:<br></code></pre></td></tr></table></figure><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311051452680.png" alt="image-20231105145252512"></p><p>解决方法：首先检查pytorch和CUDA版本是否兼容，其次修改脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> seed <span class="hljs-keyword">in</span> 43<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">for</span> Nway <span class="hljs-keyword">in</span> 10<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">for</span> Kshot <span class="hljs-keyword">in</span> 1<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">for</span> prob <span class="hljs-keyword">in</span>  0.4 <br><span class="hljs-keyword">do</span><br>CUDA_VISIBLE_DEVICES=0 python train_demo.py \<br>--trainN <span class="hljs-variable">$&#123;Nway&#125;</span> --N <span class="hljs-variable">$&#123;Nway&#125;</span> --K <span class="hljs-variable">$&#123;Kshot&#125;</span> --Q 1 \<br>--val val_wiki --<span class="hljs-built_in">test</span> val_wiki \<br>--model proto --encoder bert --hidden_size 768 --val_step 1000 \<br>--mode CM \<br>  --batch_size 4 --fp16 \<br>--seed <span class="hljs-variable">$&#123;seed&#125;</span> \<br>--path  ./checkpoint/20231103 --save_ckpt ./checkpoint/20231103_finetune  --label_mask_prob <span class="hljs-variable">$&#123;prob&#125;</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Few Shot -Relation Exaction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无重复字符的最长子串</title>
    <link href="/2023/10/24/no-repeated-substr/"/>
    <url>/2023/10/24/no-repeated-substr/</url>
    
    <content type="html"><![CDATA[<h1 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310242157172.png" alt="image-20231024215656387"></p><h2 id="2、题解"><a href="#2、题解" class="headerlink" title="2、题解"></a>2、题解</h2><h4 id="1-滑动窗口-哈希表"><a href="#1-滑动窗口-哈希表" class="headerlink" title="1 滑动窗口+哈希表"></a>1 滑动窗口+哈希表</h4><p>思路：</p><p>哈希表$dic$统计字符串$s$中每个字符最后出现的位置。</p><p>设置两个指针$i、j$，$j$指针遍历字符串，当遍历到重复字符时，$i$指针根据上轮的$i$和$dic[s[j]]$更新，保证区间$[i+1,j]$中无重复字符且最大。</p><p>每轮的结果为上轮结果和本轮双指针区间长度中的最大值。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dic = &#123;&#125;<br>        res = <span class="hljs-number">0</span><br>        i = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> s[j] <span class="hljs-keyword">in</span> dic:<br>                i=<span class="hljs-built_in">max</span>(dic[s[j]], i)<br>            dic[s[j]] = j<br>            res = <span class="hljs-built_in">max</span>(res, j-i)<br>        <span class="hljs-keyword">return</span> res     <br></code></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li>时间复杂度$O(N)$ ： 其中 $N$ 为字符串长度，动态规划需遍历计算 $dp$列表。</li><li>空间复杂度 $O(1)$ ： 字符的 ASCII 码范围为$ 0 ~ 127$ ，哈希表 $dic$ 最多使用 $O(128)&#x3D;O(1)$ 大小的额外空间。</li></ul><h4 id="2-动态规划-哈希表"><a href="#2-动态规划-哈希表" class="headerlink" title="2 动态规划+哈希表"></a>2 动态规划+哈希表</h4><p>思路：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310242220731.png" alt="image-20231024222023682"></p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310242221862.png" alt="image-20231024222111824"></p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dic = &#123;&#125;<br>        res = tmp = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            i = dic.get(s[j], -<span class="hljs-number">1</span>) <span class="hljs-comment"># 获取索引 i</span><br>            dic[s[j]] = j <span class="hljs-comment"># 更新哈希表</span><br>            tmp = tmp + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> tmp &lt; j - i <span class="hljs-keyword">else</span> j - i <span class="hljs-comment"># dp[j - 1] -&gt; dp[j]</span><br>            res = <span class="hljs-built_in">max</span>(res, tmp) <span class="hljs-comment"># max(dp[j - 1], dp[j])</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树深度</title>
    <link href="/2023/10/20/Tree-depth/"/>
    <url>/2023/10/20/Tree-depth/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树深度"><a href="#二叉树深度" class="headerlink" title="二叉树深度"></a>二叉树深度</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310201609450.png" alt="image-20231020160911754"></p><h2 id="2、题解"><a href="#2、题解" class="headerlink" title="2、题解"></a>2、题解</h2><h4 id="方法1：递归"><a href="#方法1：递归" class="headerlink" title="方法1：递归"></a>方法1：递归</h4><p>思路：如果结点存在则返回结点左右子树深度的最大值加1（$root_{depth}&#x3D;max(left_{depth},right_{depth})+1$）,如果</p><p>左右子树为空则返回0。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">TreeDepth</span>(<span class="hljs-params">self , pRoot: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pRoot:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>([self.TreeDepth(pRoot.left),self.TreeDepth(pRoot.right)]) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="方法2：层遍历"><a href="#方法2：层遍历" class="headerlink" title="方法2：层遍历"></a>方法2：层遍历</h4><p>思路：遍历每层的结点，用队列对结点进行存储。每次存储下一层结点时，深度加1。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self , root: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 空节点没有深度</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 队列维护层次后续节点</span><br>        q= queue.Queue() <br>        <span class="hljs-comment"># 根入队</span><br>        q.put(root) <br>        <span class="hljs-comment"># 记录深度</span><br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 层次遍历</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty(): <br>            <span class="hljs-comment"># 记录当前层有多少节点</span><br>            n = q.qsize() <br>            <span class="hljs-comment"># 遍历完这一层，再进入下一层</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n): <br>                node = q.get()<br>                <span class="hljs-comment"># 添加下一层的左右节点</span><br>                <span class="hljs-keyword">if</span> node.left: <br>                    q.put(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    q.put(node.right)<br>            <span class="hljs-comment"># 深度加1</span><br>            res += <span class="hljs-number">1</span> <br>        <span class="hljs-keyword">return</span> res<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prompt-Based Learning</title>
    <link href="/2023/10/18/Prompt-Based-Learning/"/>
    <url>/2023/10/18/Prompt-Based-Learning/</url>
    
    <content type="html"><![CDATA[<h1 id="Prompt-Based-Learning"><a href="#Prompt-Based-Learning" class="headerlink" title="Prompt-Based Learning"></a>Prompt-Based Learning</h1><p>prompt-based learning可以理解成一种范式，分为三个过程：pre-train、prompt、predict。为了提升模型在下游任务中的表现，在prompt阶段对下游任务进行重构，从而适配pre-train的模型。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310171117714.png" alt="image-20231017111256672"></p><p>左边是微调方法的示意图，右边是prompt方法的示意图。</p><h4 id="如何进行重构？"><a href="#如何进行重构？" class="headerlink" title="如何进行重构？"></a>如何进行重构？</h4><p>假设输入文本为x，构造一个函数$f_{prompt}(x)$,将输入文本进行转化：${x}^{‘}&#x3D;f_{prompt}(x)$。函数主要实现两个目的：</p><ul><li><p>选用一个由文本组成的模板，模板有两个槽位，[X]槽位用于填充输入 $x$ ，[Z]槽位用于生成答案 $z$ （之后会被映射为标准的输出 $y$ ）</p></li><li><p>将输入 $x$填入[X]槽位</p></li></ul><p>例如：情感分类任务中，令 $x$ &#x3D;”I love this movie.”，选用模板”[X] Overall, it was a [Z] movie.”，则 ${x}^{‘}$&#x3D;”I love this movie. Overall, it was a [Z] movie.”。至此，情感分类任务被重构为cloze task。</p><h5 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h5><ul><li>[Z]可以出现在模板的中间位置，也可以出现在模板的末尾，这两种情况也分别被称为cloze prompt、prefix prompt</li><li>组成模板的token，可以是自然语言中真实的word，也可以是虚拟的word（在embedding层以向量形式存在）</li><li>[X]和[Z]slot的数量不受限，可依实际任务而定</li></ul><h4 id="如何对重构后的任务求解？"><a href="#如何对重构后的任务求解？" class="headerlink" title="如何对重构后的任务求解？"></a>如何对重构后的任务求解？</h4><p>首先是利用pre-train的模型对重构后的$x^{‘}$的slot进行预测，输出得分最高的token$z^{‘}$。生成任务中，$z$的取值集合可以无限制。</p><p>第二步是将中间输出$z^{‘}$映射为最终输出$y^{‘}$。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>删除链表的节点</title>
    <link href="/2023/10/16/del-node/"/>
    <url>/2023/10/16/del-node/</url>
    
    <content type="html"><![CDATA[<h1 id="删除链表的节点"><a href="#删除链表的节点" class="headerlink" title="删除链表的节点"></a><strong>删除链表的节点</strong></h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310162228787.png" alt="image-20231016222405387"></p><h2 id="2、解法"><a href="#2、解法" class="headerlink" title="2、解法"></a>2、解法</h2><ul><li>首先加入一个头部节点，方便于如果可能的话删除掉第一个元素。</li><li>准备两个指针遍历链表，一个指针指向当前要遍历的元素，另一个指针指向该元素的前序节点，便于获取它的指针。</li><li>遍历链表，找到目标节点，则断开连接，指向后一个。</li><li>返回时去掉加入的头节点。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteNode</span>(<span class="hljs-params">self , head: ListNode, val: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:<br>        <span class="hljs-comment">#加入一个头节点</span><br>        res = ListNode(<span class="hljs-number">0</span>)<br>        res.<span class="hljs-built_in">next</span> = head<br>        <span class="hljs-comment">#前序节点</span><br>        pre = res<br>        <span class="hljs-comment">#当前节点</span><br>        cur = head<br>        <span class="hljs-comment">#遍历链表</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment">#找到目标节点</span><br>            <span class="hljs-keyword">if</span> cur.val == val:<br>                <span class="hljs-comment">#断开连接</span><br>                pre.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">break</span><br>            pre = cur<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment">#返回去掉头节点</span><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>del_repeated_node</title>
    <link href="/2023/10/11/del-repeated-node/"/>
    <url>/2023/10/11/del-repeated-node/</url>
    
    <content type="html"><![CDATA[<h1 id="删除链表中重复的结点"><a href="#删除链表中重复的结点" class="headerlink" title="删除链表中重复的结点"></a>删除链表中重复的结点</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310112319059.png" alt="image-20231011231822155"></p><h2 id="2、解题"><a href="#2、解题" class="headerlink" title="2、解题"></a>2、解题</h2><h4 id="1：直接删除"><a href="#1：直接删除" class="headerlink" title="1：直接删除"></a>1：直接删除</h4><p>思路：</p><ol><li>给链表添加一个表头。</li><li>遍历链表，每次比较相邻两个节点，如果遇到了两个相邻节点相同，则新开内循环将这一段所有的相同都遍历过去。</li><li>在第二步中这一连串相同的节点前的节点直接连上后续第一个不相同值的节点。</li><li>返回时去掉添加的表头。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplication</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        <span class="hljs-comment">//空链表</span><br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span>) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//在链表前加一个表头</span><br>        res.next = pHead; <br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> res;<br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.next != <span class="hljs-literal">null</span>)&#123; <br>            <span class="hljs-comment">//遇到相邻两个节点值相同</span><br>            <span class="hljs-keyword">if</span>(cur.next.val == cur.next.next.val)&#123; <br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> cur.next.val;<br>                <span class="hljs-comment">//将所有相同的都跳过</span><br>                <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.val == temp) <br>                    cur.next = cur.next.next;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <br>                cur = cur.next;<br>        &#125;<br>        <span class="hljs-comment">//返回时去掉表头</span><br>        <span class="hljs-keyword">return</span> res.next; <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2：哈希表"><a href="#2：哈希表" class="headerlink" title="2：哈希表"></a>2：哈希表</h4><p>思路：该题是有序链表，可以直接与旁边的元素比较，删除重复的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplication</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        <span class="hljs-comment">//空链表</span><br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span>) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Map&lt;Integer,Integer&gt; mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pHead;<br>        <span class="hljs-comment">//遍历链表统计每个节点值出现的次数</span><br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123; <br>            <span class="hljs-keyword">if</span>(mp.containsKey(cur.val))<br>                mp.put(cur.val, (<span class="hljs-type">int</span>)mp.get(cur.val) + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                mp.put(cur.val,<span class="hljs-number">1</span>);<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//在链表前加一个表头</span><br>        res.next = pHead; <br>        cur = res;<br>        <span class="hljs-comment">//再次遍历链表</span><br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//如果节点值计数不为1 </span><br>            <span class="hljs-keyword">if</span>(mp.get(cur.next.val) != <span class="hljs-number">1</span>) <br>                <span class="hljs-comment">//删去该节点</span><br>                cur.next = cur.next.next; <br>            <span class="hljs-keyword">else</span><br>                cur = cur.next; <br>        &#125;<br>        <span class="hljs-comment">//去掉表头</span><br>        <span class="hljs-keyword">return</span> res.next; <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表中倒数最后k个结点</title>
    <link href="/2023/10/11/list-last-knode/"/>
    <url>/2023/10/11/list-last-knode/</url>
    
    <content type="html"><![CDATA[<h1 id="链表中倒数最后k个结点"><a href="#链表中倒数最后k个结点" class="headerlink" title="链表中倒数最后k个结点"></a>链表中倒数最后k个结点</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310111252662.png" alt="image-20231011125251579"></p><h2 id="2、解法"><a href="#2、解法" class="headerlink" title="2、解法"></a>2、解法</h2><h4 id="1：双指针"><a href="#1：双指针" class="headerlink" title="1：双指针"></a>1：双指针</h4><p>思路：第一个指针先移动k步，然后第二个指针再从头开始，这个时候这两个指针同时移动，当第一个指针到链表的末尾的时候，返回第二个指针即可。注意，如果第一个指针还没走k步的时候链表就为空了，直接返回<code>null</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">FindKthToTail</span><span class="hljs-params">(ListNode pHead, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pHead == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> pHead;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> pHead;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> pHead;<br>    <span class="hljs-comment">//第一个指针先走k步</span><br>    <span class="hljs-keyword">while</span> (k-- &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        first = first.next;<br>    &#125;<br>    <span class="hljs-comment">//然后两个指针在同时前进</span><br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span>) &#123;<br>        first = first.next;<br>        second = second.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> second;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2：栈"><a href="#2：栈" class="headerlink" title="2：栈"></a>2：栈</h4><p>思路：把原链表的结点全部压栈，然后再把栈中最上面的k个节点出栈，出栈的结点重新串成一个新的链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">FindKthToTail</span><span class="hljs-params">(ListNode pHead, <span class="hljs-type">int</span> k)</span> &#123;<br>    Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-comment">//链表节点压栈</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pHead != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(pHead);<br>        pHead = pHead.next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count &lt; k || k == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//在出栈串成新的链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">firstNode</span> <span class="hljs-operator">=</span> stack.pop();<br>    <span class="hljs-keyword">while</span> (--k &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> stack.pop();<br>        temp.next = firstNode;<br>        firstNode = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> firstNode;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表中环的入口结点</title>
    <link href="/2023/10/09/circle-entrance/"/>
    <url>/2023/10/09/circle-entrance/</url>
    
    <content type="html"><![CDATA[<h1 id="链表中环的入口结点"><a href="#链表中环的入口结点" class="headerlink" title="链表中环的入口结点"></a>链表中环的入口结点</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310092233113.png" alt="image-20231009223317010"></p><h2 id="2、解题思路"><a href="#2、解题思路" class="headerlink" title="2、解题思路"></a>2、解题思路</h2><h4 id="思路：双指针"><a href="#思路：双指针" class="headerlink" title="思路：双指针"></a>思路：双指针</h4><p>一快一慢指针。快指针每次跑两个element，慢指针每次跑一个。如果存在一个圈，经过一段时间后，快指针是能追上慢指针的。</p><p>如图所示，假设链表头到环入口结点X的距离为A，两指针相遇的结点为Y，X到Y的距离为B，Y到X的距离为C。设快指针进入环后经过n圈与慢指针相遇，根据假设可得到等式：$2(A+B)&#x3D;A+nB+(n-1)C$。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310092246110.png" alt="image-20231009224631071"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    ListNode(<span class="hljs-type">int</span> val) &#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">EntryNodeOfLoop</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        <br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span> || pHead.next == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        ListNode fast=pHead;<br>        ListNode slow=pHead;<br><br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>)&#123;<br>            fast = fast.next.next;<br>            slow = slow.next;<br><br>            <span class="hljs-keyword">if</span>(fast==slow)&#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow2</span> <span class="hljs-operator">=</span> pHead;<br>                <span class="hljs-keyword">while</span>(slow2 != slow)&#123;<br>                    slow = slow.next;<br>                    slow2 = slow2.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> slow2;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数相加</title>
    <link href="/2023/10/09/two-nums-plus/"/>
    <url>/2023/10/09/two-nums-plus/</url>
    
    <content type="html"><![CDATA[<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310090824747.png" alt="image-20231009082429629"></p><h2 id="2、解法"><a href="#2、解法" class="headerlink" title="2、解法"></a>2、解法</h2><p>两个链表存储方式相同，所以同一位置上的数字可以直接相加。设当前两个链表结点处相应位置的数字为$n_1,n_2$,进位值为$carry$,则和为$n_1+n_2+carry$; 其中答案链表对应结点位置的数为$(n_1+n_2+carry)mod10$,新的进位值为$⌊(n_1+n_2+carry)&#x2F;10⌋$。</p><p>如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 0。此外，如果链表遍历结束后，有 $carry&gt;0$，还需要在答案链表的后面附加一个节点，节点的值为$carry$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, tail = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(l1!= <span class="hljs-literal">null</span>||l2 != <span class="hljs-literal">null</span>)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> (l1 != <span class="hljs-literal">null</span>)? l1.val:<span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> (l2 != <span class="hljs-literal">null</span>)? l2.val:<span class="hljs-number">0</span>;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> num1 + num2 +carry;<br><br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>                head = tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum%<span class="hljs-number">10</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum%<span class="hljs-number">10</span>);<br>                tail = tail.next;<br>            &#125;<br>            carry = sum/<span class="hljs-number">10</span>;<br><br>            <span class="hljs-keyword">if</span>(l1!=<span class="hljs-literal">null</span>)&#123;<br>                l1 = l1.next;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(l2!=<span class="hljs-literal">null</span>)&#123;<br>                l2 = l2.next;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(carry&gt;<span class="hljs-number">0</span>)&#123;<br>            tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个链表的第一个公共结点</title>
    <link href="/2023/10/07/two-list-together-node/"/>
    <url>/2023/10/07/two-list-together-node/</url>
    
    <content type="html"><![CDATA[<h1 id="两个链表的第一个公共结点"><a href="#两个链表的第一个公共结点" class="headerlink" title="两个链表的第一个公共结点"></a>两个链表的第一个公共结点</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310072142049.png" alt="image-20231007214226007"></p><h2 id="2、解法"><a href="#2、解法" class="headerlink" title="2、解法"></a>2、解法</h2><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>使用两个指针N1,N2，一个从链表1的头节点开始遍历，我们记为N1，一个从链表2的头节点开始遍历，我们记为N2。</p><p>让N1和N2一起遍历，当N1先走完链表1的尽头（为null）的时候，则从链表2的头节点继续遍历，同样，如果N2先走完了链表2的尽头，则从链表1的头节点继续遍历，也就是说，N1和N2都会遍历链表1和链表2。</p><p>因为两个指针，同样的速度，走完同样长度（链表1+链表2），不管两条链表有无相同节点，都能够到达同时到达终点。（N1最后肯定能到达链表2的终点，N2肯定能到达链表1的终点）。</p><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">FindFirstCommonNode</span><span class="hljs-params">(ListNode pHead1, ListNode pHead2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> pHead1, l2 = pHead2;<br>        <span class="hljs-keyword">while</span>(l1 != l2)&#123;<br>            l1 = (l1==<span class="hljs-literal">null</span>)?pHead2:l1.next;<br>            l2 = (l2==<span class="hljs-literal">null</span>)?pHead1:l2.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数之和</title>
    <link href="/2023/10/07/two-nums-sums/"/>
    <url>/2023/10/07/two-nums-sums/</url>
    
    <content type="html"><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><h2 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310072038912.png"></p><h2 id="2、解法"><a href="#2、解法" class="headerlink" title="2、解法"></a>2、解法</h2><h3 id="1：暴力枚举"><a href="#1：暴力枚举" class="headerlink" title="1：暴力枚举"></a>1：暴力枚举</h3><p>枚举数组中的每一个数 <code>x</code>，寻找数组中是否存在 <code>target - x</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nums_length</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums_length; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; nums_length; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2：哈希表"><a href="#2：哈希表" class="headerlink" title="2：哈希表"></a>2：哈希表</h3><p>创建一个哈希表，对于每一个 <code>x</code>，首先查询哈希表中是否存在 <code>target - x</code>，然后将 <code>x</code> 插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; hashtable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;<br>            &#125;<br>            hashtable.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BERT</title>
    <link href="/2023/10/04/BERT/"/>
    <url>/2023/10/04/BERT/</url>
    
    <content type="html"><![CDATA[<h1 id="论文阅读——《BERT-Pre-training-of-Deep-Bidirectional-Transformers-for-Language-Understanding》"><a href="#论文阅读——《BERT-Pre-training-of-Deep-Bidirectional-Transformers-for-Language-Understanding》" class="headerlink" title="论文阅读——《BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding》"></a>论文阅读——《BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding》</h1><p>论文链接：[<a href="https://arxiv.org/abs/1810.04805">1810.04805] BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding (arxiv.org)</a></p><p>源码链接：<a href="https://github.com/google-research/bert">google-research&#x2F;bert: TensorFlow code and pre-trained models for BERT (github.com)</a></p><h2 id="1、模型的输入、输出"><a href="#1、模型的输入、输出" class="headerlink" title="1、模型的输入、输出"></a>1、模型的输入、输出</h2><p><strong>模型输入：</strong>文本中字词的词向量，文本向量，位置向量。</p><p><strong>模型输出：</strong>文本融合全文语义信息后的向量表示。</p><p><strong>PS：</strong>英文词汇可以划分成细粒度的语义单位，例如<strong>doing</strong>可以划分为<strong>do</strong>和<strong>ing</strong></p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041319454.png" alt="image-20231004131959418"></p><p>- </p><h2 id="2、预训练任务"><a href="#2、预训练任务" class="headerlink" title="2、预训练任务"></a>2、预训练任务</h2><p>预训练流程如下：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041500393.png" alt="image-20231004150000344"></p><ul><li>Bert Encoder：采用默认的12层transformer encoder layer对输入进行编码。编码后输出的张量形状：[Batch Size， Seq lens， Emb dim]。</li><li>MLM模块：掩蔽语言模型，可以理解为完形填空，mask句子中若干词，用周围词去预测遮盖的词。作者会随机mask每一个句子中15%的词，用其上下文来做预测。</li></ul><p>80%的时间是采用[mask]，my dog is cute → my dog is [MASK]</p><p>10%的时间是随机取一个词来代替mask的词，my dog is cute -&gt; my dog is apple</p><p>10%的时间保持不变，my dog is cute -&gt; my dog is cute</p><p>这样做的目的是因为Transformer要保持对每个输入token分布式的表征，否则Transformer很可能会记住这个[MASK]就是”cute”。</p><ul><li>NSP模块：下个句子预测，判断句子B在文章中是否属于句子A的下一句。选择句子对（A，B），B中50%的数据是A的下一条句子，剩余50%的数据是语料库中随机选择的，学习其中的相关性。</li></ul><h2 id="3、微调"><a href="#3、微调" class="headerlink" title="3、微调"></a>3、微调</h2><p>对于下游不同的NLP任务，模型的输入会进行微调，例如：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041515233.png" alt="image-20231004151545189"></p><ul><li>单文本分类任务</li></ul><p>对于文本分类任务，BERT模型在文本前插入一个[CLS]符号，并将该符号对应的输出向量作为整篇文本的语义表示，用于文本分类。</p><ul><li>语句对分类任务</li></ul><p>该任务的实际应用场景包括：问答（判断一个问题与一个答案是否匹配）、语句匹配（两句话是否表达同一个意思）等。对于该任务，BERT模型除了添加[CLS]符号并将对应的输出作为文本的语义表示，还对输入的两句话用一个[SEP]符号作分割，并分别对两句话附加两个不同的文本向量以作区分。</p><h2 id="4、模型效果"><a href="#4、模型效果" class="headerlink" title="4、模型效果"></a>4、模型效果</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041519047.png" alt="image-20231004151938011"></p><p>除了架构差异之外，BERT和OpenAI GPT都是调优方法，而ELMo是基于特性的方法。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041522054.png" alt="image-20231004152215018"></p><p>$BERT_{LARGE}$在各项评估指标上的效果要明显好于过往的模型。</p>]]></content>
    
    
    
    <tags>
      
      <tag>PLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合并链表</title>
    <link href="/2023/10/01/merge-list/"/>
    <url>/2023/10/01/merge-list/</url>
    
    <content type="html"><![CDATA[<h1 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a><strong>合并两个排序的链表</strong></h1><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310012125054.png" alt="image-20231001212551984"></p><h2 id="1、递归思路"><a href="#1、递归思路" class="headerlink" title="1、递归思路"></a>1、递归思路</h2><ul><li>终止条件：两链表其中一个为空时，返回另一个链表；</li><li>当前递归内容：若<code>list1.val &lt;= list2.val</code> 将较小的<code>list1.next</code>与merge后的表头连接，即<code>list1.next = Merge(list1.next,list2);</code> <code>list2.val</code>较大时同理；</li><li>每次的返回值：排序好的链表头；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class ListNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    ListNode next = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    ListNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">Merge</span><span class="hljs-params">(ListNode list1,ListNode list2)</span> &#123;<br>        <span class="hljs-keyword">if</span>(list1==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> list2;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list2==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> list1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(list2.val&gt;list1.val)&#123;<br>            list1.next = Merge(list1.next,list2);<br>            <span class="hljs-keyword">return</span> list1;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            list2.next = Merge(list1,list2.next);<br>            <span class="hljs-keyword">return</span> list2;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="复杂度：时间：O-m-n-空间：-O-m-n"><a href="#复杂度：时间：O-m-n-空间：-O-m-n" class="headerlink" title="复杂度：时间：O(m+n) 空间： O(m+n)"></a>复杂度：时间：O(m+n) 空间： O(m+n)</h4><h2 id="2、空间O-1-思路"><a href="#2、空间O-1-思路" class="headerlink" title="2、空间O(1)思路"></a>2、空间O(1)思路</h2><ul><li>创建一个虚拟结点和一个哨兵结点</li><li>当<code>list1</code>与<code>list2</code>都不为<code>null</code>时循环</li><li>哪个的<code>val</code>小哪个赋给虚拟结点的<code>next</code>，虚拟结点后移。</li><li>退出循环后，哪个<code>list</code>不为空，哪个结点（包括剩下的）给虚拟结点的<code>next</code></li><li>最后返回哨兵结点的<code>next</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">Merge</span><span class="hljs-params">(ListNode list1,ListNode list2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-comment">// 必须保证两个list都不为空</span><br>        <span class="hljs-keyword">while</span>(list1 != <span class="hljs-literal">null</span> &amp; list2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span>(list1.val &gt; list2.val) &#123;<br>                dummy.next = list2;<br>                list2 = list2.next;<br>                dummy = dummy.next;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list1.val &lt;= list2.val) &#123;<br>                dummy.next = list1;<br>                list1 = list1.next;<br>                dummy = dummy.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// list1后面还有，就把剩下的全部拿走</span><br>        <span class="hljs-keyword">if</span>(list1 != <span class="hljs-literal">null</span>) &#123;<br>            dummy.next = list1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(list2 != <span class="hljs-literal">null</span>) &#123;<br>            dummy.next = list2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.next;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2023/09/30/reverse-listnode/"/>
    <url>/2023/09/30/reverse-listnode/</url>
    
    <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><h2 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309302229385.png" alt="image-20230930222802631"></p><h2 id="2、解题方法"><a href="#2、解题方法" class="headerlink" title="2、解题方法"></a>2、解题方法</h2><h3 id="1：栈"><a href="#1：栈" class="headerlink" title="1：栈"></a>1：栈</h3><p>原理图：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309302229013.png" alt="image-20230930222926165"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Stack;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    Stack&lt;ListNode&gt; stack= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-comment">//把链表节点全部摘掉放到栈中</span><br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(head);<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (stack.isEmpty())<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> node;<br>    <span class="hljs-comment">//栈中的结点全部出栈，然后重新连成一个新的链表</span><br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> stack.pop();<br>        node.next = tempNode;<br>        node = node.next;<br>    &#125;<br>    <span class="hljs-comment">//最后一个结点就是反转前的头结点，一定要让他的next</span><br>    <span class="hljs-comment">//等于空，否则会构成环</span><br>    node.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> dummy;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2：双链表"><a href="#2：双链表" class="headerlink" title="2：双链表"></a>2：双链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">//新链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//先保存访问的节点的下一个节点，保存起来</span><br>        <span class="hljs-comment">//留着下一步访问的</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-comment">//每次访问的原链表节点都会成为新链表的头结点，</span><br>        <span class="hljs-comment">//其实就是把新链表挂到访问的原链表节点的</span><br>        <span class="hljs-comment">//后面就行了</span><br>        head.next = newHead;<br>        <span class="hljs-comment">//更新新链表</span><br>        newHead = head;<br>        <span class="hljs-comment">//重新赋值，继续访问</span><br>        head = temp;<br>    &#125;<br>    <span class="hljs-comment">//返回新链表</span><br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遗传算法</title>
    <link href="/2023/09/19/genetic_algorithm/"/>
    <url>/2023/09/19/genetic_algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="遗传算法（genetic-algorithm）"><a href="#遗传算法（genetic-algorithm）" class="headerlink" title="遗传算法（genetic algorithm）"></a>遗传算法（genetic algorithm）</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>​算法的主要思想就是模拟生物的遗传与变异，快速的求出最大值或最小值的随机全局搜索优化方法。</p><h2 id="2、前置知识"><a href="#2、前置知识" class="headerlink" title="2、前置知识"></a>2、前置知识</h2><p>染色体（Chromosome）：又称为基因型个体。</p><p>个体（individual）：每个生物</p><p>种群（population）：一个系统中所有个体的总称。</p><p>种群个体数（POPULATION）：一个系统中个体的数量。</p><p>基因（gene）：控制生物的性状。</p><p>适应度（fitness）：对某个生物是否适应环境的定量评分。</p><p>迭代次数（TIMES）：该生物种群繁衍的次数。</p><h2 id="3、算法基础"><a href="#3、算法基础" class="headerlink" title="3、算法基础"></a><strong>3、算法基础</strong></h2><p>​<img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191024541.png" alt="image-20230919102418240"></p><p>基本遗传算法是将群体中所有个体作为对象，只使用基本遗传算子：选择算子、交叉算子以及变异算子。可以用一个式子表示：<br>$$<br>SGA&#x3D;(C,E,P_0,M,\phi,\Gamma,\psi,T)<br>$$</p><table><thead><tr><th align="center"><strong>符号</strong></th><th align="center"><strong>含义</strong></th></tr></thead><tbody><tr><td align="center">$E$</td><td align="center">个体适应度评价函数</td></tr><tr><td align="center">$p_0$</td><td align="center">初始种群</td></tr><tr><td align="center">$C$</td><td align="center">个体编码方案</td></tr><tr><td align="center">$M$（预先设定）</td><td align="center">种群大小</td></tr><tr><td align="center">$\phi$</td><td align="center">选择算子</td></tr><tr><td align="center">$\Gamma$（预先设定交叉概率）</td><td align="center">交叉算子</td></tr><tr><td align="center">$\psi$（预先设定变异概率）</td><td align="center">变异算子</td></tr><tr><td align="center">$T$（预先设定）</td><td align="center">遗传算法终止条件</td></tr></tbody></table><h2 id="4、算法步骤"><a href="#4、算法步骤" class="headerlink" title="4、算法步骤"></a>4、算法步骤</h2><h3 id="4-1-染色编码"><a href="#4-1-染色编码" class="headerlink" title="4.1 染色编码"></a>4.1 染色编码</h3><h5 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h5><p>将问题解空间的解表示为遗传算法中的染色体结构数据。常见的方法有：二进制编码、格雷码编码、 浮点数编码、各参数级联编码、多参数交叉编码等。</p><h5 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h5><p>将遗传算法染色体转换为问题的解.</p><h3 id="4-2-初始群体的生成"><a href="#4-2-初始群体的生成" class="headerlink" title="4.2 初始群体的生成"></a><strong>4.2 初始群体的生成</strong></h3><p>设定最大进化迭代数T，群体大小M，交叉概率$P_c$,变异概率$P_m$，随机生成M个个体作为初始化群体$P_0$.</p><h3 id="4-3-适应度评估检测"><a href="#4-3-适应度评估检测" class="headerlink" title="4.3 适应度评估检测"></a>4.3 适应度评估检测</h3><p>适应度函数表明个体或解的优劣性。</p><p>适应度尺度变换：指算法迭代的不同阶段，通过适当调节个体适应度大小，避免群体间竞争减弱，导致种群收敛于局部最优解。</p><p>尺度变化的方法：</p><ul><li><p>线性尺度变换：$F^{\prime}&#x3D;aF+b$</p></li><li><p>乘幂尺度变换：$F^{\prime}&#x3D;F^{k}$</p></li><li><p>指数尺度变换：$F^{\prime}&#x3D;e^{-\beta F}$</p></li></ul><h3 id="4-4-遗传算子"><a href="#4-4-遗传算子" class="headerlink" title="4.4 遗传算子"></a><strong>4.4 遗传算子</strong></h3><ul><li><p>选择：从旧群体中按照一定概率选择优良个体组成新种群，繁殖得到下一代个体。个体的选择与适应度（$f$）正相关：<br>$$<br>P_i&#x3D;\frac{f_i}{\sum_{k&#x3D;1}^Mf_k}<br>$$</p></li><li><p>交叉：从种群中随机选择两个个体，随机选择点位，两个染色体交换组合，将父串的优秀特征遗传给子串，从而产生新的优秀个体。</p></li></ul><p>方法包括单点交叉、双（多）点交叉、均匀交叉、算数交叉。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191204307.png" alt="image-20230919120432251"></p><ul><li>变异：以二进制编码为例：一段基因序列中的某位由0变为1，则称该点发生了变异。该方法可以防止算法在优化过程中陷入局部最优解。</li></ul><p><strong><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191459227.png" alt="image-20230919145916185"></strong></p><h3 id="4-5-终止判断条件"><a href="#4-5-终止判断条件" class="headerlink" title="4.5 终止判断条件"></a>4.5 终止判断条件</h3><p>当$t&gt;T$时，算法停止，选用前$T$步中具有最大适应度的个体作为输出。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191516593.png" alt="image-20230919151617541"></p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>optimum solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读——CLIP算法</title>
    <link href="/2023/09/18/clip/"/>
    <url>/2023/09/18/clip/</url>
    
    <content type="html"><![CDATA[<h1 id="论文阅读——CLIP算法"><a href="#论文阅读——CLIP算法" class="headerlink" title="论文阅读——CLIP算法"></a>论文阅读——CLIP算法</h1><p><strong>原文链接：</strong>[<a href="https://arxiv.org/abs/2103.00020">2103.00020] Learning Transferable Visual Models From Natural Language Supervision (arxiv.org)</a></p><p><strong>代码链接：</strong><a href="https://github.com/OpenAI/CLIP">openai&#x2F;CLIP: CLIP (Contrastive Language-Image Pretraining), Predict the most relevant text snippet given an image (github.com)</a></p><h2 id="1、算法原理"><a href="#1、算法原理" class="headerlink" title="1、算法原理"></a>1、算法原理</h2><p>CLIP（Contrastive Language-Image Pre-training）具备很强的迁移学习能力。在无任意一张ImageNet图片训练情景下，直接进行Zero-shot推理，就能媲美监督训练下的ResNet-50模型的结果。</p><p>宏观来看CLIP分为三部分：</p><ul><li><p>Contrastive pre-training：预训练阶段，使用图片 - 文本对进行对比学习训练；</p></li><li><p>Create dataset classifier from label text：提取预测类别文本特征;</p></li><li><p>Use for zero-shot predictiion：进行 Zero-Shoot 推理预测;</p></li></ul><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309190948459.png" alt="image-20230917172037149"></p><p>第一阶段，图像和文本分别通过图像、文本编码器生成对应的$l_1、l_2…l_n$、$T_1、T_2…T_n$的特征向量，计算对应角标向量的余弦相似度，通过temperature参数缩放，并借助softmax归一化为概率分布。图像编码器选用两个架构，第一个采用的是ResNet-50的基础架构，使用ResNetD和Rect-2进行改进，将全局平均池化层替换为一个单层的注意力池化机制；第二个采用改进的ViT模型。文本编码器使用的是一个Transformer编码器，有8个注意力头，使用了隐藏的自注意。</p><p>第二阶段，使用提示模板，帮助指定文本是否是关于图像的内容。将输出的句子通过文本编码器进行特征提取，得到特征向量。</p><p>第三阶段，输入一张图片，经过图像编码器进行特征提取生成一个特征向量，与文本特征进行余弦相似度计算，最相似的即为预测结果。</p><h2 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h2><p>伪代码如下：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309181104648.png" alt="image-20230918110417534"></p><p>CLIP模型前向传播部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, image, text</span>):<br>  image_features = self.encode_image(image)    <span class="hljs-comment"># 图片编码提特征</span><br>  text_features = self.encode_text(text)       <span class="hljs-comment"># 文本编码提特征</span><br>​<br>  <span class="hljs-comment"># 特征归一化</span><br>  image_features = image_features / image_features.norm(dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>  text_features = text_features / text_features.norm(dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>​<br>  <span class="hljs-comment"># 计算余弦相似度</span><br>  logit_scale = self.logit_scale.exp()<br>  logits_per_image = logit_scale * image_features @ text_features.t()<br>  logits_per_text = logits_per_image.t()<br>​<br>  <span class="hljs-comment"># shape = [global_batch_size, global_batch_size]</span><br>  <span class="hljs-keyword">return</span> logits_per_image, logits_per_text<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Multimodal Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zero-shot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python数据处理——去除 NaN 值</title>
    <link href="/2023/09/18/python/"/>
    <url>/2023/09/18/python/</url>
    
    <content type="html"><![CDATA[<h1 id="Python数据处理——去除-NaN-值"><a href="#Python数据处理——去除-NaN-值" class="headerlink" title="Python数据处理——去除 NaN 值"></a>Python数据处理——去除 NaN 值</h1><h2 id="1、NaN-的定义"><a href="#1、NaN-的定义" class="headerlink" title="1、NaN 的定义"></a>1、NaN 的定义</h2><p>NaN 即 Not A Number 的缩写，表示不是一个数字。NaN 值是在进行数学计算时出现的一种特殊值，通常出现在计算过程中出现了错误或无法计算的情况下。</p><h2 id="2、处理方法"><a href="#2、处理方法" class="headerlink" title="2、处理方法"></a>2、处理方法</h2><ul><li>使用 dropna() 方法删除 NaN 值所在的行或列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 读取Excel文件</span><br>file_path = <span class="hljs-string">&#x27;singleCoal.xlsx&#x27;</span><br>df = pd.read_excel(file_path)<br><br>df.dropna()  <span class="hljs-comment"># 删除包含 NaN 值的行</span><br><br>df.dropna(axis=<span class="hljs-string">&#x27;columns&#x27;</span>)  <span class="hljs-comment"># 删除包含 NaN 值的列，需要加上 axis 参数</span><br></code></pre></td></tr></table></figure><ul><li>使用 fillna() 方法填充 NaN 值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">df.fillna(value=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 将 NaN 值填充为 0</span><br><br><span class="hljs-comment">#使用 method 参数指定使用哪种方法进行填充</span><br>df.fillna(method=<span class="hljs-string">&quot;ffill&quot;</span>)  <span class="hljs-comment"># 前向填充</span><br>df.fillna(method=<span class="hljs-string">&quot;bfill&quot;</span>)  <span class="hljs-comment"># 后向填充</span><br></code></pre></td></tr></table></figure><ul><li>使用 interpolate() 方法插值填充 NaN 值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">df.interpolate()  <span class="hljs-comment"># 使用默认方式进行插值填充</span><br><br>df.interpolate(method=<span class="hljs-string">&quot;linear&quot;</span>)  <span class="hljs-comment"># 线性插值</span><br>df.interpolate(method=<span class="hljs-string">&quot;polynomial&quot;</span>, order=<span class="hljs-number">2</span>)  <span class="hljs-comment"># 二次插值</span><br>df.interpolate(method=<span class="hljs-string">&quot;spline&quot;</span>, order=<span class="hljs-number">2</span>)  <span class="hljs-comment"># 样条插值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode服务器小问题</title>
    <link href="/2023/09/12/VScode%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2023/09/12/VScode%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="VScode服务器小问题"><a href="#VScode服务器小问题" class="headerlink" title="VScode服务器小问题"></a>VScode服务器小问题</h1><h2 id="1、服务器不断要求输入密码，连不上服务器"><a href="#1、服务器不断要求输入密码，连不上服务器" class="headerlink" title="1、服务器不断要求输入密码，连不上服务器"></a>1、服务器不断要求输入密码，连不上服务器</h2><p><strong>原因：</strong>没有恰当的退出远程链接导致的</p><p><strong>解决方法：</strong>打开VScode的 view→palette然后输入Kill VS Code Setver on Host，再重新连接就可以了。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309112035681.png" alt="image-20230911203505606"></p><p>后续使用完远程服务器关闭资源的时候要使用File→Close Remote Connection来关闭资源。</p>]]></content>
    
    
    <categories>
      
      <category>Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——XGBoost算法</title>
    <link href="/2023/09/11/XGBoost%E7%AE%97%E6%B3%95/"/>
    <url>/2023/09/11/XGBoost%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="学习笔记——XGBoost算法"><a href="#学习笔记——XGBoost算法" class="headerlink" title="学习笔记——XGBoost算法"></a>学习笔记——XGBoost算法</h1><p>XGBoost和GBDT两者都是boosting方法，除了工程实现、解决问题上的一些差异外，最大的不同就是目标函数的定义。</p><h2 id="1、基本原理"><a href="#1、基本原理" class="headerlink" title="1、基本原理"></a>1、基本原理</h2><h3 id="1-1-目标函数"><a href="#1-1-目标函数" class="headerlink" title="1.1 目标函数"></a>1.1 目标函数</h3><p>XGBoost算法<strong>是一个加法模型</strong>，在每一步迭代中，只调优当前的子模型：$F_m(x_i)&#x3D;F_{m-1}(x_i)+f_m(x_i)$。其中$f_m(x_i)$表示当前的子模型，$F_{m-1}(x_i)$表示前$m-1$个已固定模型。</p><p>目标函数&#x3D;经验风险+结构风险（正则项）：<br>$$<br>\begin{aligned}<br>obj&amp; &#x3D;\sum_{i&#x3D;1}^NL[F_m(x_i),y_i]+\sum_{j&#x3D;1}^m\Omega(f_j)  \<br>&amp;&#x3D;\sum_{i&#x3D;1}^NL[F_{m-1}(x_i)+f_m(x_i),y_i]+\sum_{j&#x3D;1}^m\Omega(f_j)<br>\end{aligned}<br>$$</p><p>其中正则项$\Omega(f_j)$表示模型$f$的复杂度。</p><p>XGBoost用2阶泰勒公式：$f(x_0+\Delta x)\approx f(x_0)+f^{‘}(x_0)\Delta x+\frac{f^{‘’}(x_0)}{2}(\Delta x)^2$​来逼近损  失函数，我们可以将$F_{m-1}(x_i)$看作$x_0$,将$f_m(x_i)$看作$\Delta x$,所以（1）式就可以转化为：<br>$$<br>\begin{aligned}Obj&#x3D;\sum_{i&#x3D;1}^N\left[L[F_{m-1}(x_i),y_i]+\frac{\partial L}{\partial F_{m-1}(x_i)}f_m(x_i)+\frac{1}{2}\frac{\partial^2L}{\partial^2F_{m-1}(x_i)}f_m^2(x_i)\right]+\\sum_{j&#x3D;1}^m\Omega(f_j)\end{aligned}<br>$$<br>由于前m-1个模型是确定的，所以$\sum_{j&#x3D;1}^m\Omega(f_j)$，前m-1项均为常数，对目标函数的求解无影响，所以（2）式又可以转化为：<br>$$<br>Obj&#x3D;\sum_{i&#x3D;1}^{N}\left[g_{i}f_{m}(x_{i})+\frac{1}{2}h_{i}f_{m}^{2}(x_{i})\right]+\Omega(f_{m})<br>$$</p><h3 id="1-2-基于树的正则化"><a href="#1-2-基于树的正则化" class="headerlink" title="1.2 基于树的正则化"></a>1.2 基于树的正则化</h3><p>XGBoost支持<strong>的基分类器包括决策树和线性模型</strong>，为<strong>防止过拟合</strong>，XGBoost将<strong>树的深度设置为正则项</strong>：$\Omega(f)&#x3D;\gamma T+\frac{1}{2}\lambda||w||^{2}$，其中$\gamma$和$\lambda$作为超参数。所以目标函数可以改写为：<br>$$<br>Obj&#x3D;\sum_{i&#x3D;1}^{N}\left[g_if_m(x_i)+\frac{1}{2}h_if_m^2(x_i)\right]+\gamma T+\frac{1}{2}\lambda\sum_{j&#x3D;1}^{T}w_j^2<br>$$<br>通过数学处理，可以将正则项和经验风险项合并：将经验风险项从样本层面上求和转换为叶节点层面上的求和。可以定义结点j上的样本集为$I(j)&#x3D;{x_{i}|q(x_{i})&#x3D;j}$,其中$q(x_i)$为将样本映射到叶节点上的索引函数，叶节点$j$上的回归值为$w_{j}&#x3D;f_{m}(x_{i}),i\in I(j)$.</p><p>所以式（4）进一步简化,令$\sum_{i\in I(j)}g_i&#x3D;G_j,\sum_{i\in I(j)}h_i&#x3D;H_j$：<br>$$<br>Obj&#x3D;\sum_{j&#x3D;1}^T\left[G_jw_j+\frac{1}{2}(H_j+\lambda)w_j^2\right]+\gamma T<br>$$<br>如果一棵树的结构是确定的，则各个节点内的样本（$x_i,y_i,g_i,h_i,G_j,H_j,T$）也是确定的，每个叶子结点输出回归值应该使得式（5）最小，所以该函数的二次函数极值点为：$w_j^*&#x3D;-\frac{G_j}{H_j+\lambda}$</p><p>树的评分也可以理解成所有叶节点的评分之和：$Obj^*&#x3D;\sum_{j&#x3D;1}^T\left(-\frac{1}{2}\frac{G_j^2}{H_j+\lambda}+\gamma\right)$.</p><h3 id="1-3-结点分裂准则"><a href="#1-3-结点分裂准则" class="headerlink" title="1.3 结点分裂准则"></a>1.3 结点分裂准则</h3><p>XGBoost的子模型树和决策树模型一样，要依赖<strong>节点递归分裂的贪心准则来实现树的生成</strong>：</p><p>从树的深度为0开始：</p><ol><li>对每个叶节点枚举所有的可用特征；</li><li>针对每个特征，把属于该节点的训练样本根据该特征值进行升序排列，通过线性扫描的方式来决定该特征的最佳分裂点，并记录该特征的分裂收益；</li><li>选择收益最大的特征作为分裂特征，用该特征的最佳分裂点作为分裂位置，在该节点上分裂出左右两个新的叶节点，并为每个新节点关联对应的样本集；</li><li>回到第1步，递归执行直到满足特定条件为止；</li></ol><p>过程如图所示：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309111523571.png" alt="image-20230911152316481"></p><p>显然分裂收益是树A的评分减去树B的评分，因此分裂收益表达式为：<br>$$<br>Gain&#x3D;\frac12\Big[\frac{G_L^2}{H_L+\lambda}+\frac{G_R^2}{H_R+\lambda}-\frac{(G_L+G_R)^2}{H_L+H_R+\lambda}\Big]-\gamma<br>$$<br><strong>XGBoost还支持近似算法</strong>：根据特征分布的分位数提出候选划分点，然后将连续型特征映射到由这些候选点划分的桶中，然后聚合统计信息找到所有区间的最佳分裂点。具体而言，特征分位数的选取有global和local两种可选策略：</p><ul><li>global在全体样本上的特征值中选取，在根节点分裂之前进行一次即可；</li><li>local则是在待分裂节点包含的样本特征值上选取，每个节点分裂前都要进行。</li></ul><p>通常，global由于只能划分一次，其划分粒度需要更细。通过这个方法可以解决数据量过大超过内存、或有并行计算需求的情况。</p><p>由（3）式可得：令其偏导为0可以得到$f_{m}^{*}(x_{i})&#x3D;-\frac{g_{i}}{h_{i}}$,此目标函数可理解为以$h_i$为权重，$-\frac{g_{i}}{h_{i}}$​为标签的二次损失函数：<br>$$<br>\begin{aligned}<br>obj&amp; &#x3D;\sum_{i&#x3D;1}^{N}\left[g_{i}f_{m}(x_{i})+\frac{1}{2}h_{i}f_{m}^{2}(x_{i})\right]+\Omega(f_{m})  \<br>&amp;&#x3D;\sum_{i&#x3D;1}^{N}\frac{1}{2}h_{i}\Big[f_{m}(x_{i})-(-\frac{g_{i}}{h_{i}})\Big]^{2}+\Omega(f_{m})+C<br>\end{aligned}<br>$$<br>因此，在近似算法取分位数时，实际上XGBoost会取以二阶导$h_i$为权重的分位数。</p><h3 id="1-4-列采样和学习率"><a href="#1-4-列采样和学习率" class="headerlink" title="1.4 列采样和学习率"></a>1.4 列采样和学习率</h3><p><strong>XGBoost还引入了两项特性：列采样和学习率</strong></p><ul><li>列采样：即随机森林中的做法，每次节点分裂的待选特征集合不是剩下的全部特征，而是剩下特征的一个子集。是为了更好地对抗过拟合，还能减少计算开销。</li><li>学习率：或者叫步长、shrinkage，是在每个子模型前（即在每个叶节点的回归值上）乘上该系数，削弱每颗树的影响，使得迭代更稳定。可以类比梯度下降中的学习率。XGBoost默认设定为0.3。</li></ul><h3 id="1-5-稀疏感知"><a href="#1-5-稀疏感知" class="headerlink" title="1.5 稀疏感知"></a>1.5 稀疏感知</h3><p>XGBoost将缺失值和稀疏0值等同视作缺失值，将这些缺失值“绑定”在一起，分裂结点的遍历则会跳过缺失值整体，提升了运算效率。</p><h2 id="2-工程优化"><a href="#2-工程优化" class="headerlink" title="2. 工程优化"></a>2. 工程优化</h2><h3 id="2-1-并行列块的设计"><a href="#2-1-并行列块的设计" class="headerlink" title="2.1 并行列块的设计"></a>2.1 并行列块的设计</h3><p>XGBoost将每一列特征提前进行排序，以块（Block）的形式储存在缓存中，并以索引将特征值和梯度统计量$g_i,h_i$对应起来，每次节点分裂时会重复调用排好序的块。而且不同特征会分布在独立的块中，因此可以进行分布式或多线程的计算。</p><h3 id="2-2-缓存访问"><a href="#2-2-缓存访问" class="headerlink" title="2.2 缓存访问"></a>2.2 缓存访问</h3><p>特征值排序后通过索引来取梯度 $g_i,h_i$ 会导致访问的内存空间不一致，进而降低缓存的命中率，影响算法效率。为解决这个问题，XGBoost为每个线程分配一个单独的连续缓存区，用来存放梯度信息。</p><h3 id="2-3-核外块计算"><a href="#2-3-核外块计算" class="headerlink" title="2.3 核外块计算"></a>2.3 核外块计算</h3><p>数据量过大时，不能同时全部载入内存。XGBoost将数据分为多个blocks并储存在硬盘中，使用一个独立的线程专门从磁盘中读取数据到内存中，实现计算和读取数据的同时进行。为了进一步提高磁盘读取数据性能，XGBoost还使用了两种方法：</p><ul><li><strong>块压缩：</strong>通过压缩block，用解压缩的开销换取磁盘读取的开销；</li><li><strong>块分区：</strong>将block分散储存在多个磁盘中，有助于提高磁盘吞吐量。</li></ul><h2 id="3-与GBDT比较"><a href="#3-与GBDT比较" class="headerlink" title="3. 与GBDT比较"></a>3. 与GBDT比较</h2><ul><li>性质：GBDT是机器学习算法，XGBoost除了算法内容还包括一些工程实现方面的优化。</li><li>基于二阶导：GBDT使用的是损失函数一阶导数，相当于函数空间中的梯度下降；而XGBoost还使用了损失函数二阶导数，相当于函数空间中的牛顿法。</li><li>正则化：XGBoost显式地加入了正则项来控制模型的复杂度，能有效防止过拟合。</li><li>列采样：XGBoost采用了随机森林中的做法，每次节点分裂前进行列随机采样。</li><li>缺失值处理：XGBoost运用稀疏感知策略处理缺失值，而GBDT没有设计缺失策略。</li><li>并行高效：XGBoost的列块设计能有效支持并行运算，提高效率。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>虽然利用预排序和近似算法可以降低寻找最佳分裂点的计算量，但在节点分裂过程中仍需要遍历数据集；</li><li>预排序过程的空间复杂度过高，不仅需要存储特征值，还需要存储特征对应样本的梯度统计值的索引，相当于消耗了两倍的内存。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/142413825?utm_id=0">机器学习 | XGBoost详解 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/83901304">深入理解XGBoost - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>boosting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——LORA微调</title>
    <link href="/2023/08/16/LORA%E5%BE%AE%E8%B0%83/"/>
    <url>/2023/08/16/LORA%E5%BE%AE%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<h1 id="学习笔记——LORA微调"><a href="#学习笔记——LORA微调" class="headerlink" title="学习笔记——LORA微调"></a>学习笔记——LORA微调</h1><p>​LORA是一种低资源微调LLM模型的方法，源自论文：[LoRA: Low-Rank Adaptation of Large Language Models。](<a href="https://arxiv.org/pdf/2106.09685.pdf">2106.09685.pdf (arxiv.org)</a>)</p><h2 id="一、高效微调"><a href="#一、高效微调" class="headerlink" title="一、高效微调"></a>一、高效微调</h2><p>​对于语言模型来说，在微调过程中，模型加载预训练参数$\Phi_{0}$进行初始化，并通过最大化条件语言模型概率实现参数调整$\Phi_{0}+\Delta\Phi $​，即：<br>$$<br>max_\Phi\sum_{(x,y)\in\mathcal{Z})}\sum_{t&#x3D;1}^{|y|}log(P_\Phi(y_t|x,y&lt;t))<br>$$<br>这种方式的主要缺点参数增量$\Delta\Phi$的维度和预训练参数$\Phi_{0}$是相同的，所需资源比较多，一般被称为full fine-tuing。</p><p>为了用更少的参数来表示学习增量$\Delta\Phi$,提出了一系列方法叫做高效微调。例如：Adapter、prefixtuning等。相比于其他方法LORA使用一个低秩矩阵来编码参数增量，这种方法不会增加推理耗时并且便于优化。</p><h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><p>​研究表明：预训练模型拥有极小的内在维度（<strong>instrisic dimension</strong>，表示数据变化的自由变量的个数），换而言之，存在一个极低维度的参数，微调它和在全参数空间中微调能起到相同的效果。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161517289.png" alt="img"></p><p>该论文认为参数矩阵更新的过程中也存在一个‘内在秩’。对于预训练的权重矩阵$W_0$，可以用一个低秩分解来表示参数更新$\Delta W$，即：<br>$$<br>W_0+\Delta W&#x3D;W_0+BA\quad B\in\mathbb{R}^{d\times r},A\in\mathbb{R}^{r\times k}\quad and\quad r\ll min(d,k)<br>$$<br>训练过程中可以冻结参数$W_0$，只训练A和B中的参数。如图所示，对于$h&#x3D;W_{0}x$​,前向传播过程就变为：<br>$$<br>h&#x3D;W_0x+\Delta Wx&#x3D;W_0x+BAx<br>$$</p><h2 id="三、-QLORA-2305-14314-pdf-arxiv-org"><a href="#三、-QLORA-2305-14314-pdf-arxiv-org" class="headerlink" title="三、[QLORA](2305.14314.pdf (arxiv.org))"></a>三、[QLORA](<a href="https://arxiv.org/pdf/2305.14314.pdf">2305.14314.pdf (arxiv.org)</a>)</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161959472.png" alt="image-20230816195941425"></p><p>QLORA训练过程和LORA基本一致，区别在于QLORA模型是按照NF4保存的，训练时需要将参数反量化到bf16后进行训练。<br>$$<br>Y^{BF16}&#x3D;X^{BF16}doubleDequant(c_{2}^{FP32},c_{2}^{k-bit},W^{NF8} )+X^{BF16}B^{BF16}A^{BF16}<br>$$</p><h3 id="分块量化（Block-wis-Quantization）"><a href="#分块量化（Block-wis-Quantization）" class="headerlink" title="分块量化（Block-wis Quantization）"></a>分块量化（Block-wis Quantization）</h3><p>量化是将输入从存储更多信息的表征映射为存储较少信息的表征的过程。</p><p>全局量化的方式存在一个问题：当输入中存在极大值或者离群值时，一些较小的参数无法被精确的表示，从而导致量化后的神经网络效果急剧下降。</p><p>分块量化是将输入划分为多个块，每个块分别量化，如图所示：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161954660.png" alt="image-20230816195439589"></p><p>明显看到分块量化能够减少过程中的误差。</p><h3 id="分位量化（Quantile-Quantization）"><a href="#分位量化（Quantile-Quantization）" class="headerlink" title="分位量化（Quantile Quantization）"></a>分位量化（Quantile Quantization）</h3><p>在将一个参数量化到4bit的情境中，最多可以使用$2^4$一共16个数字。按照传统的简易方法，一般是取最接近的数字或者直接round函数。分位量化则是将数字按顺序排列，再分为十六等分，最小的一块映射成量化后的第一个数，第二块映射成量化后的第二数，以此类推。这样就充分利用了已有的数位，原始数据在量化后的数字上分布也是均匀的。</p><h3 id="4-bit-NormalFloat（NF4）"><a href="#4-bit-NormalFloat（NF4）" class="headerlink" title="4-bit NormalFloat（NF4）"></a>4-bit NormalFloat（NF4）</h3><p>这个概念是在分位量化的基础上进行改进，并结合分块量化，降低计算复杂度和误差。上述的分位量化会增加计算消耗，预训练模型的参数基本上都服从均值为0的正态分布，可以将其缩放到[-1,1]的范围内。同时可以在[-1,1]的范围内，将正态分布函数划分为$2^k +1$份，直接将参数映射到对应的分位上，不用每次都进行排序。</p><h3 id="双重量化（double-Quantization）"><a href="#双重量化（double-Quantization）" class="headerlink" title="双重量化（double Quantization）"></a>双重量化（double Quantization）</h3><p>分块量化中每个块都会额外产生一个量化常数c，以块大小为64为例，每个块会产生32bit的量化常数，双重量化则是在第一次量化后，不会直接存储量化常数$C_1$,而是按照块大小256对量化常数再量化为8bit去存储，这个阶段会产生一个量化常数$C_2$。最终存储的参数为$8&#x2F;64 +32&#x2F;(64-256)&#x3D;0.127bits$.</p><h2 id="四、AdaLORA"><a href="#四、AdaLORA" class="headerlink" title="四、AdaLORA"></a>四、AdaLORA</h2><h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><p>LORA技术预先规定每个增量矩阵$\Delta$的秩必须相同，这就忽略了不同层、类型参数对下游任务的影响。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308162040469.png" alt="image-20230816203952264"></p><p>如图所示，将微调参数放在FFN的效果优于放在Attention矩阵中的效果；同时微调高层参数的效果优于微调底层参数。那么如何根据下游任务自动地找出重要的参数模块并给其分配更多地可微调参数呢？</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>AdaLORA主要包含两个模块：</p><ul><li><p><strong>SVD形式参数更新（SVD-based adaptation）</strong>：直接将增量矩阵$\Delta$参数化为SVD地形式，避免在训练过程中进行SVD计算带来的计算资源消耗；</p></li><li><p><strong>根据重要程度地参数分配（Importance-aware rank allocation）</strong>：去除一些冗余的奇异值。</p></li></ul><p>$$<br>W&#x3D;W^{(0)}+\Delta&#x3D;W^{(0)}+P\Lambda Q<br>$$</p><p>$$<br>R(P,Q)&#x3D;||P^TP-I||_F^2+||Q^TQ-I||_F^2<br>$$</p><p>如式(5)，AdaLORA增量矩阵$\Delta$替换为$P\Lambda Q$,这样既省去复杂的SVD计算又能去除奇异值。同时，为保证P和Q的正交性，在训练过程中增加了一个正则化，保证$P^{T}P&#x3D;Q^{T}Q&#x3D;I$.</p><p>该方法相较于LORA有两个优点：</p><ul><li>AdaLORA只去除奇异值矩阵，并不会去除奇异向量，更容易恢复误删的奇异值。</li><li>AdaLORA的P和Q为正交举证，LORA的A和B矩阵非正交。训练过程中裁剪操作不会影响其他奇异值对应的奇异向量，训练会更稳定，泛化性能更好。</li></ul><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://zhuanlan.zhihu.com/p/646791309">LORA微调系列(一)：LORA和它的基本原理 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/648239462">LORA微调系列(二)：QLORA和它的基本原理 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/649756885">LORA微调系列(三)：AdaLORA和它的基本原理 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微调</tag>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
