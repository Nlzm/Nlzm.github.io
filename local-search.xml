<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Better Few-Shot Relation Extraction with Label Prompt Dropout</title>
    <link href="/2023/10/30/LPD/"/>
    <url>/2023/10/30/LPD/</url>
    
    <content type="html"><![CDATA[<h1id="better-few-shot-relation-extraction-with-label-prompt-dropout">《BetterFew-Shot Relation Extraction with Label Prompt Dropout》</h1><p>原文链接：<ahref="https://arxiv.org/pdf/2210.13733.pdf">arxiv.org/pdf/2210.13733.pdf</a></p><p>源码链接：<a href="https://github.com/jzhang38/LPD">jzhang38/LPD:code for EMNLP 2022 paper Better Few-Shot Relation Extraction with LabelPrompt Dropout (github.com)</a></p><h2 id="概述">1、概述</h2><p>​ 本文提出了一种新方法——LPD（Label PromptDropout），该方法将文本标签与上下文句子连接后传入TransformerEncoder。用文本标签代替标签提示符，知道Encoder关注自身输出标签感知的关系表示。在训练期间，模型还会随机删除提示符号来使模型学会在使用（不使用）关系描述的情景下进行训练。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310281431443.png"alt="image-20231028143111344" /><figcaption aria-hidden="true">image-20231028143111344</figcaption></figure><h2 id="模型构建">2、模型构建</h2><h3 id="training-with-label-prompt-dropout">2.1 Training with LabelPrompt Dropout</h3><ul><li><p>每个输入实例都是由<span class="math inline">\(:\)</span>将labelprompt和上下文文本连接起来，来让TransformerEncoder学习到标签的关系表示。</p></li><li><p>以一定概率随机剔除labelprompt来防止模型依赖prompt而忽略上下文文本。</p></li><li><p>使用特殊标记来标记上下文文本头尾以及分离token，例如：“[CLS]location of event: [E1] Beijing [/E1] held the [E2] 2022 winter Olympics[/E2] .”并将分离token起始位置的最后一层表示连接起来：<spanclass="math inline">\(r=[\mathrm{Encoder}(x)_h;\mathrm{Encoder}(x)_t]\)</span>,h表示[E1]的位置，t表示[E2]的位置，r为关系表示。</p></li><li><p>对于K-way- n-shot学习，对一个类中K个支持实例的关系表示进行平均，以获得类原型。然后计算查询实例与每个类原型之间的点积，作为交叉熵损失中的logit:<span class="math display">\[\begin{gathered}u^{n}={\frac{1}{K}}\sum_{k=1}^{K}r_{k}^{n} \\{\mathcalL}_{train}=-\sum_{n=1}^{N}\log\frac{\exp(r_{q}^{\mathsf{T}}u^{n})}{\sum_{n^{\prime}=1}^{N}\exp(r_{q}^{\mathsf{T}}u^{n^{\prime}})}\end{gathered}\]</span> <spanclass="math inline">\(r_{k}^{n}\)</span>代表n类的k-th支持实例，<spanclass="math inline">\(r_{q}\)</span>事 查询实例的关系表示。</p></li></ul><h3 id="testing-with-prompt-guided-prototypes">2.2 Testing with PromptGuided Prototypes</h3><p>LPD在测试中不会dropout任何支持实例的labelprompt，而是将二者一起输入。通过找到与查询关系表示最接近的类原型来输出预测：<spanclass="math inline">\(\hat{y}_{num}=\arg\max_{n}r_{q}^{\top}u^{n}\)</span></p><h3 id="contrastive-pre-training-with-label-prompt-dropout">2.3Contrastive Pre-training with Label Prompt Dropout</h3><p>本文遵循MT-BERT框架，对对比预训练中使用的正样本和负样本进行抽样。给定一个知识图<spanclass="math inline">\(K\)</span>和两个具有实体对（h1,t1）和（h2,t2）的句子，如果K定义了一个关系R，使得（h1,t1）和（h2,t2）属于R，则两个句子标记为正样本，否则作为负样本。如图2所示：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310301501515.png"alt="image-20231030150103412" /><figcaption aria-hidden="true">image-20231030150103412</figcaption></figure><p>预训练阶段的每个实例与训练阶段的支持实例进行相同的转换。在每个句子前加上一个标签提示，并在句子中插入特殊的标记。使用对比损失来训练模型:<spanclass="math inline">\(\mathcal{L}_{CP}=-\log\frac{\exp(r_Ar_B)}{\exp(r_Ar_B)+\sum_{i=1}^N\exp(r_Ar_B^i)}\)</span>。式中<spanclass="math inline">\((r_A, r_B)\)</span>为正对，<spanclass="math inline">\((r_A, r_{B}^{i})， 1≤i≤N\)</span>为负对。</p><p>使用掩码语言建模目标(LMLM)来维持模型的语言理解能力。所以最终的预训练损失变成:<spanclass="math inline">\({\mathcal L}_{pre-train}={\mathcalL}_{CP}+{\mathcal L}_{MLM}\)</span></p><h2 id="实验结果">3、实验结果</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310301542385.png"alt="image-20231030154246339" /><figcaption aria-hidden="true">image-20231030154246339</figcaption></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310301542382.png"alt="image-20231030154252348" /><figcaption aria-hidden="true">image-20231030154252348</figcaption></figure><p>LPD模型在不同类和样本数下的准确率都比以往的模型更高。</p>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Few Shot -Relation Exaction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无重复字符的最长子串</title>
    <link href="/2023/10/24/no-repeated-substr/"/>
    <url>/2023/10/24/no-repeated-substr/</url>
    
    <content type="html"><![CDATA[<h1 id="无重复字符的最长子串">无重复字符的最长子串</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310242157172.png"alt="image-20231024215656387" /><figcaption aria-hidden="true">image-20231024215656387</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="滑动窗口哈希表">1 滑动窗口+哈希表</h4><p>思路：</p><p>哈希表<span class="math inline">\(dic\)</span>统计字符串<spanclass="math inline">\(s\)</span>中每个字符最后出现的位置。</p><p>设置两个指针<span class="math inline">\(i、j\)</span>，<spanclass="math inline">\(j\)</span>指针遍历字符串，当遍历到重复字符时，<spanclass="math inline">\(i\)</span>指针根据上轮的<spanclass="math inline">\(i\)</span>和<spanclass="math inline">\(dic[s[j]]\)</span>更新，保证区间<spanclass="math inline">\([i+1,j]\)</span>中无重复字符且最大。</p><p>每轮的结果为上轮结果和本轮双指针区间长度中的最大值。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dic = &#123;&#125;<br>        res = <span class="hljs-number">0</span><br>        i = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> s[j] <span class="hljs-keyword">in</span> dic:<br>                i=<span class="hljs-built_in">max</span>(dic[s[j]], i)<br>            dic[s[j]] = j<br>            res = <span class="hljs-built_in">max</span>(res, j-i)<br>        <span class="hljs-keyword">return</span> res     <br></code></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li>时间复杂度<span class="math inline">\(O(N)\)</span> ： 其中 <spanclass="math inline">\(N\)</span> 为字符串长度，动态规划需遍历计算 <spanclass="math inline">\(dp\)</span>列表。</li><li>空间复杂度 <span class="math inline">\(O(1)\)</span> ： 字符的 ASCII码范围为$ 0 ~ 127$ ，哈希表 <span class="math inline">\(dic\)</span>最多使用 <span class="math inline">\(O(128)=O(1)\)</span>大小的额外空间。</li></ul><h4 id="动态规划哈希表">2 动态规划+哈希表</h4><p>思路：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310242220731.png"alt="image-20231024222023682" /><figcaption aria-hidden="true">image-20231024222023682</figcaption></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310242221862.png"alt="image-20231024222111824" /><figcaption aria-hidden="true">image-20231024222111824</figcaption></figure><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dic = &#123;&#125;<br>        res = tmp = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            i = dic.get(s[j], -<span class="hljs-number">1</span>) <span class="hljs-comment"># 获取索引 i</span><br>            dic[s[j]] = j <span class="hljs-comment"># 更新哈希表</span><br>            tmp = tmp + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> tmp &lt; j - i <span class="hljs-keyword">else</span> j - i <span class="hljs-comment"># dp[j - 1] -&gt; dp[j]</span><br>            res = <span class="hljs-built_in">max</span>(res, tmp) <span class="hljs-comment"># max(dp[j - 1], dp[j])</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树深度</title>
    <link href="/2023/10/20/Tree-depth/"/>
    <url>/2023/10/20/Tree-depth/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树深度">二叉树深度</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310201609450.png"alt="image-20231020160911754" /><figcaption aria-hidden="true">image-20231020160911754</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="方法1递归">方法1：递归</h4><p>思路：如果结点存在则返回结点左右子树深度的最大值加1（<spanclass="math inline">\(root_{depth}=max(left_{depth},right_{depth})+1\)</span>）,如果</p><p>左右子树为空则返回0。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">TreeDepth</span>(<span class="hljs-params">self , pRoot: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pRoot:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>([self.TreeDepth(pRoot.left),self.TreeDepth(pRoot.right)]) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="方法2层遍历">方法2：层遍历</h4><p>思路：遍历每层的结点，用队列对结点进行存储。每次存储下一层结点时，深度加1。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self , root: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 空节点没有深度</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 队列维护层次后续节点</span><br>        q= queue.Queue() <br>        <span class="hljs-comment"># 根入队</span><br>        q.put(root) <br>        <span class="hljs-comment"># 记录深度</span><br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 层次遍历</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty(): <br>            <span class="hljs-comment"># 记录当前层有多少节点</span><br>            n = q.qsize() <br>            <span class="hljs-comment"># 遍历完这一层，再进入下一层</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n): <br>                node = q.get()<br>                <span class="hljs-comment"># 添加下一层的左右节点</span><br>                <span class="hljs-keyword">if</span> node.left: <br>                    q.put(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    q.put(node.right)<br>            <span class="hljs-comment"># 深度加1</span><br>            res += <span class="hljs-number">1</span> <br>        <span class="hljs-keyword">return</span> res<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prompt-Based Learning</title>
    <link href="/2023/10/18/Prompt-Based-Learning/"/>
    <url>/2023/10/18/Prompt-Based-Learning/</url>
    
    <content type="html"><![CDATA[<h1 id="prompt-based-learning">Prompt-Based Learning</h1><p>prompt-basedlearning可以理解成一种范式，分为三个过程：pre-train、prompt、predict。为了提升模型在下游任务中的表现，在prompt阶段对下游任务进行重构，从而适配pre-train的模型。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310171117714.png"alt="image-20231017111256672" /><figcaption aria-hidden="true">image-20231017111256672</figcaption></figure><p>左边是微调方法的示意图，右边是prompt方法的示意图。</p><h4 id="如何进行重构">如何进行重构？</h4><p>假设输入文本为x，构造一个函数<spanclass="math inline">\(f_{prompt}(x)\)</span>,将输入文本进行转化：<spanclass="math inline">\({x}^{&#39;}=f_{prompt}(x)\)</span>。函数主要实现两个目的：</p><ul><li><p>选用一个由文本组成的模板，模板有两个槽位，[X]槽位用于填充输入<span class="math inline">\(x\)</span> ，[Z]槽位用于生成答案 <spanclass="math inline">\(z\)</span> （之后会被映射为标准的输出 <spanclass="math inline">\(y\)</span> ）</p></li><li><p>将输入 <span class="math inline">\(x\)</span>填入[X]槽位</p></li></ul><p>例如：情感分类任务中，令 <span class="math inline">\(x\)</span> ="Ilove this movie."，选用模板"[X] Overall, it was a [Z] movie."，则 <spanclass="math inline">\({x}^{&#39;}\)</span>="I love this movie. Overall,it was a [Z] movie."。至此，情感分类任务被重构为cloze task。</p><h5 id="ps">PS：</h5><ul><li>[Z]可以出现在模板的中间位置，也可以出现在模板的末尾，这两种情况也分别被称为clozeprompt、prefix prompt</li><li>组成模板的token，可以是自然语言中真实的word，也可以是虚拟的word（在embedding层以向量形式存在）</li><li>[X]和[Z]slot的数量不受限，可依实际任务而定</li></ul><h4 id="如何对重构后的任务求解">如何对重构后的任务求解？</h4><p>首先是利用pre-train的模型对重构后的<spanclass="math inline">\(x^{&#39;}\)</span>的slot进行预测，输出得分最高的token<spanclass="math inline">\(z^{&#39;}\)</span>。生成任务中，<spanclass="math inline">\(z\)</span>的取值集合可以无限制。</p><p>第二步是将中间输出<spanclass="math inline">\(z^{&#39;}\)</span>映射为最终输出<spanclass="math inline">\(y^{&#39;}\)</span>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>删除链表的节点</title>
    <link href="/2023/10/16/del-node/"/>
    <url>/2023/10/16/del-node/</url>
    
    <content type="html"><![CDATA[<h1 id="删除链表的节点"><strong>删除链表的节点</strong></h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310162228787.png"alt="image-20231016222405387" /><figcaption aria-hidden="true">image-20231016222405387</figcaption></figure><h2 id="解法">2、解法</h2><ul><li>首先加入一个头部节点，方便于如果可能的话删除掉第一个元素。</li><li>准备两个指针遍历链表，一个指针指向当前要遍历的元素，另一个指针指向该元素的前序节点，便于获取它的指针。</li><li>遍历链表，找到目标节点，则断开连接，指向后一个。</li><li>返回时去掉加入的头节点。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteNode</span>(<span class="hljs-params">self , head: ListNode, val: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:<br>        <span class="hljs-comment">#加入一个头节点</span><br>        res = ListNode(<span class="hljs-number">0</span>)<br>        res.<span class="hljs-built_in">next</span> = head<br>        <span class="hljs-comment">#前序节点</span><br>        pre = res<br>        <span class="hljs-comment">#当前节点</span><br>        cur = head<br>        <span class="hljs-comment">#遍历链表</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment">#找到目标节点</span><br>            <span class="hljs-keyword">if</span> cur.val == val:<br>                <span class="hljs-comment">#断开连接</span><br>                pre.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">break</span><br>            pre = cur<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment">#返回去掉头节点</span><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>del_repeated_node</title>
    <link href="/2023/10/11/del-repeated-node/"/>
    <url>/2023/10/11/del-repeated-node/</url>
    
    <content type="html"><![CDATA[<h1 id="删除链表中重复的结点">删除链表中重复的结点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310112319059.png"alt="image-20231011231822155" /><figcaption aria-hidden="true">image-20231011231822155</figcaption></figure><h2 id="解题">2、解题</h2><h4 id="直接删除">1：直接删除</h4><p>思路：</p><ol type="1"><li>给链表添加一个表头。</li><li>遍历链表，每次比较相邻两个节点，如果遇到了两个相邻节点相同，则新开内循环将这一段所有的相同都遍历过去。</li><li>在第二步中这一连串相同的节点前的节点直接连上后续第一个不相同值的节点。</li><li>返回时去掉添加的表头。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplication</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        <span class="hljs-comment">//空链表</span><br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span>) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//在链表前加一个表头</span><br>        res.next = pHead; <br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> res;<br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.next != <span class="hljs-literal">null</span>)&#123; <br>            <span class="hljs-comment">//遇到相邻两个节点值相同</span><br>            <span class="hljs-keyword">if</span>(cur.next.val == cur.next.next.val)&#123; <br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> cur.next.val;<br>                <span class="hljs-comment">//将所有相同的都跳过</span><br>                <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.val == temp) <br>                    cur.next = cur.next.next;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <br>                cur = cur.next;<br>        &#125;<br>        <span class="hljs-comment">//返回时去掉表头</span><br>        <span class="hljs-keyword">return</span> res.next; <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="哈希表">2：哈希表</h4><p>思路：该题是有序链表，可以直接与旁边的元素比较，删除重复的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplication</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        <span class="hljs-comment">//空链表</span><br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span>) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Map&lt;Integer,Integer&gt; mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pHead;<br>        <span class="hljs-comment">//遍历链表统计每个节点值出现的次数</span><br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123; <br>            <span class="hljs-keyword">if</span>(mp.containsKey(cur.val))<br>                mp.put(cur.val, (<span class="hljs-type">int</span>)mp.get(cur.val) + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                mp.put(cur.val,<span class="hljs-number">1</span>);<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//在链表前加一个表头</span><br>        res.next = pHead; <br>        cur = res;<br>        <span class="hljs-comment">//再次遍历链表</span><br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//如果节点值计数不为1 </span><br>            <span class="hljs-keyword">if</span>(mp.get(cur.next.val) != <span class="hljs-number">1</span>) <br>                <span class="hljs-comment">//删去该节点</span><br>                cur.next = cur.next.next; <br>            <span class="hljs-keyword">else</span><br>                cur = cur.next; <br>        &#125;<br>        <span class="hljs-comment">//去掉表头</span><br>        <span class="hljs-keyword">return</span> res.next; <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表中倒数最后k个结点</title>
    <link href="/2023/10/11/list-last-knode/"/>
    <url>/2023/10/11/list-last-knode/</url>
    
    <content type="html"><![CDATA[<h1 id="链表中倒数最后k个结点">链表中倒数最后k个结点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310111252662.png"alt="image-20231011125251579" /><figcaption aria-hidden="true">image-20231011125251579</figcaption></figure><h2 id="解法">2、解法</h2><h4 id="双指针">1：双指针</h4><p>思路：第一个指针先移动k步，然后第二个指针再从头开始，这个时候这两个指针同时移动，当第一个指针到链表的末尾的时候，返回第二个指针即可。注意，如果第一个指针还没走k步的时候链表就为空了，直接返回<code>null</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">FindKthToTail</span><span class="hljs-params">(ListNode pHead, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pHead == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> pHead;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> pHead;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> pHead;<br>    <span class="hljs-comment">//第一个指针先走k步</span><br>    <span class="hljs-keyword">while</span> (k-- &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        first = first.next;<br>    &#125;<br>    <span class="hljs-comment">//然后两个指针在同时前进</span><br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span>) &#123;<br>        first = first.next;<br>        second = second.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> second;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="栈">2：栈</h4><p>思路：把原链表的结点全部压栈，然后再把栈中最上面的k个节点出栈，出栈的结点重新串成一个新的链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">FindKthToTail</span><span class="hljs-params">(ListNode pHead, <span class="hljs-type">int</span> k)</span> &#123;<br>    Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-comment">//链表节点压栈</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pHead != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(pHead);<br>        pHead = pHead.next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count &lt; k || k == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//在出栈串成新的链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">firstNode</span> <span class="hljs-operator">=</span> stack.pop();<br>    <span class="hljs-keyword">while</span> (--k &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> stack.pop();<br>        temp.next = firstNode;<br>        firstNode = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> firstNode;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表中环的入口结点</title>
    <link href="/2023/10/09/circle-entrance/"/>
    <url>/2023/10/09/circle-entrance/</url>
    
    <content type="html"><![CDATA[<h1 id="链表中环的入口结点">链表中环的入口结点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310092233113.png"alt="image-20231009223317010" /><figcaption aria-hidden="true">image-20231009223317010</figcaption></figure><h2 id="解题思路">2、解题思路</h2><h4 id="思路双指针">思路：双指针</h4><p>一快一慢指针。快指针每次跑两个element，慢指针每次跑一个。如果存在一个圈，经过一段时间后，快指针是能追上慢指针的。</p><p>如图所示，假设链表头到环入口结点X的距离为A，两指针相遇的结点为Y，X到Y的距离为B，Y到X的距离为C。设快指针进入环后经过n圈与慢指针相遇，根据假设可得到等式：<spanclass="math inline">\(2(A+B)=A+nB+(n-1)C\)</span>。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310092246110.png"alt="image-20231009224631071" /><figcaption aria-hidden="true">image-20231009224631071</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    ListNode(<span class="hljs-type">int</span> val) &#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">EntryNodeOfLoop</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        <br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span> || pHead.next == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        ListNode fast=pHead;<br>        ListNode slow=pHead;<br><br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>)&#123;<br>            fast = fast.next.next;<br>            slow = slow.next;<br><br>            <span class="hljs-keyword">if</span>(fast==slow)&#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow2</span> <span class="hljs-operator">=</span> pHead;<br>                <span class="hljs-keyword">while</span>(slow2 != slow)&#123;<br>                    slow = slow.next;<br>                    slow2 = slow2.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> slow2;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数相加</title>
    <link href="/2023/10/09/two-nums-plus/"/>
    <url>/2023/10/09/two-nums-plus/</url>
    
    <content type="html"><![CDATA[<h1 id="两数相加">两数相加</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310090824747.png"alt="image-20231009082429629" /><figcaption aria-hidden="true">image-20231009082429629</figcaption></figure><h2 id="解法">2、解法</h2><p>两个链表存储方式相同，所以同一位置上的数字可以直接相加。设当前两个链表结点处相应位置的数字为<spanclass="math inline">\(n_1,n_2\)</span>,进位值为<spanclass="math inline">\(carry\)</span>,则和为<spanclass="math inline">\(n_1+n_2+carry\)</span>;其中答案链表对应结点位置的数为<spanclass="math inline">\((n_1+n_2+carry)mod10\)</span>,新的进位值为<spanclass="math inline">\(⌊(n_1+n_2+carry)/10⌋\)</span>。</p><p>如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个0。此外，如果链表遍历结束后，有 <spanclass="math inline">\(carry&gt;0\)</span>，还需要在答案链表的后面附加一个节点，节点的值为<spanclass="math inline">\(carry\)</span>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, tail = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(l1!= <span class="hljs-literal">null</span>||l2 != <span class="hljs-literal">null</span>)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> (l1 != <span class="hljs-literal">null</span>)? l1.val:<span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> (l2 != <span class="hljs-literal">null</span>)? l2.val:<span class="hljs-number">0</span>;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> num1 + num2 +carry;<br><br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>                head = tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum%<span class="hljs-number">10</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum%<span class="hljs-number">10</span>);<br>                tail = tail.next;<br>            &#125;<br>            carry = sum/<span class="hljs-number">10</span>;<br><br>            <span class="hljs-keyword">if</span>(l1!=<span class="hljs-literal">null</span>)&#123;<br>                l1 = l1.next;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(l2!=<span class="hljs-literal">null</span>)&#123;<br>                l2 = l2.next;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(carry&gt;<span class="hljs-number">0</span>)&#123;<br>            tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个链表的第一个公共结点</title>
    <link href="/2023/10/07/two-list-together-node/"/>
    <url>/2023/10/07/two-list-together-node/</url>
    
    <content type="html"><![CDATA[<h1 id="两个链表的第一个公共结点">两个链表的第一个公共结点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310072142049.png"alt="image-20231007214226007" /><figcaption aria-hidden="true">image-20231007214226007</figcaption></figure><h2 id="解法">2、解法</h2><h4 id="思路">思路：</h4><p>使用两个指针N1,N2，一个从链表1的头节点开始遍历，我们记为N1，一个从链表2的头节点开始遍历，我们记为N2。</p><p>让N1和N2一起遍历，当N1先走完链表1的尽头（为null）的时候，则从链表2的头节点继续遍历，同样，如果N2先走完了链表2的尽头，则从链表1的头节点继续遍历，也就是说，N1和N2都会遍历链表1和链表2。</p><p>因为两个指针，同样的速度，走完同样长度（链表1+链表2），不管两条链表有无相同节点，都能够到达同时到达终点。（N1最后肯定能到达链表2的终点，N2肯定能到达链表1的终点）。</p><h4 id="代码实现">代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">FindFirstCommonNode</span><span class="hljs-params">(ListNode pHead1, ListNode pHead2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> pHead1, l2 = pHead2;<br>        <span class="hljs-keyword">while</span>(l1 != l2)&#123;<br>            l1 = (l1==<span class="hljs-literal">null</span>)?pHead2:l1.next;<br>            l2 = (l2==<span class="hljs-literal">null</span>)?pHead1:l2.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数之和</title>
    <link href="/2023/10/07/two-nums-sums/"/>
    <url>/2023/10/07/two-nums-sums/</url>
    
    <content type="html"><![CDATA[<h1 id="两数之和">两数之和</h1><h2 id="题目描述">1、题目描述</h2><p><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310072038912.png" /></p><h2 id="解法">2、解法</h2><h3 id="暴力枚举">1：暴力枚举</h3><p>枚举数组中的每一个数 <code>x</code>，寻找数组中是否存在<code>target - x</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nums_length</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums_length; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; nums_length; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="哈希表">2：哈希表</h3><p>创建一个哈希表，对于每一个 <code>x</code>，首先查询哈希表中是否存在<code>target - x</code>，然后将 <code>x</code>插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; hashtable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;<br>            &#125;<br>            hashtable.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BERT</title>
    <link href="/2023/10/04/BERT/"/>
    <url>/2023/10/04/BERT/</url>
    
    <content type="html"><![CDATA[<h1id="论文阅读bert-pre-training-of-deep-bidirectional-transformers-for-language-understanding">论文阅读——《BERT:Pre-training of Deep Bidirectional Transformers for LanguageUnderstanding》</h1><p>论文链接：[<a href="https://arxiv.org/abs/1810.04805">1810.04805]BERT: Pre-training of Deep Bidirectional Transformers for LanguageUnderstanding (arxiv.org)</a></p><p>源码链接：<ahref="https://github.com/google-research/bert">google-research/bert:TensorFlow code and pre-trained models for BERT (github.com)</a></p><h2 id="模型的输入输出">1、模型的输入、输出</h2><p><strong>模型输入：</strong>文本中字词的词向量，文本向量，位置向量。</p><p><strong>模型输出：</strong>文本融合全文语义信息后的向量表示。</p><p><strong>PS：</strong>英文词汇可以划分成细粒度的语义单位，例如<strong>doing</strong>可以划分为<strong>do</strong>和<strong>ing</strong></p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041319454.png"alt="image-20231004131959418" /><figcaption aria-hidden="true">image-20231004131959418</figcaption></figure><ul><li></li></ul><h2 id="预训练任务">2、预训练任务</h2><p>预训练流程如下：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041500393.png"alt="image-20231004150000344" /><figcaption aria-hidden="true">image-20231004150000344</figcaption></figure><ul><li>Bert Encoder：采用默认的12层transformer encoderlayer对输入进行编码。编码后输出的张量形状：[Batch Size， Seq lens， Embdim]。</li><li>MLM模块：掩蔽语言模型，可以理解为完形填空，mask句子中若干词，用周围词去预测遮盖的词。作者会随机mask每一个句子中15%的词，用其上下文来做预测。</li></ul><p>80%的时间是采用[mask]，my dog is cute → my dog is [MASK]</p><p>10%的时间是随机取一个词来代替mask的词，my dog is cute -&gt; my dog isapple</p><p>10%的时间保持不变，my dog is cute -&gt; my dog is cute</p><p>这样做的目的是因为Transformer要保持对每个输入token分布式的表征，否则Transformer很可能会记住这个[MASK]就是"cute"。</p><ul><li>NSP模块：下个句子预测，判断句子B在文章中是否属于句子A的下一句。选择句子对（A，B），B中50%的数据是A的下一条句子，剩余50%的数据是语料库中随机选择的，学习其中的相关性。</li></ul><h2 id="微调">3、微调</h2><p>对于下游不同的NLP任务，模型的输入会进行微调，例如：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041515233.png"alt="image-20231004151545189" /><figcaption aria-hidden="true">image-20231004151545189</figcaption></figure><ul><li>单文本分类任务</li></ul><p>对于文本分类任务，BERT模型在文本前插入一个[CLS]符号，并将该符号对应的输出向量作为整篇文本的语义表示，用于文本分类。</p><ul><li>语句对分类任务</li></ul><p>该任务的实际应用场景包括：问答（判断一个问题与一个答案是否匹配）、语句匹配（两句话是否表达同一个意思）等。对于该任务，BERT模型除了添加[CLS]符号并将对应的输出作为文本的语义表示，还对输入的两句话用一个[SEP]符号作分割，并分别对两句话附加两个不同的文本向量以作区分。</p><h2 id="模型效果">4、模型效果</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041519047.png"alt="image-20231004151938011" /><figcaption aria-hidden="true">image-20231004151938011</figcaption></figure><p>除了架构差异之外，BERT和OpenAIGPT都是调优方法，而ELMo是基于特性的方法。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041522054.png"alt="image-20231004152215018" /><figcaption aria-hidden="true">image-20231004152215018</figcaption></figure><p><spanclass="math inline">\(BERT_{LARGE}\)</span>在各项评估指标上的效果要明显好于过往的模型。</p>]]></content>
    
    
    
    <tags>
      
      <tag>PLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合并链表</title>
    <link href="/2023/10/01/merge-list/"/>
    <url>/2023/10/01/merge-list/</url>
    
    <content type="html"><![CDATA[<h1 id="合并两个排序的链表"><strong>合并两个排序的链表</strong></h1><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310012125054.png"alt="image-20231001212551984" /><figcaption aria-hidden="true">image-20231001212551984</figcaption></figure><h2 id="递归思路">1、递归思路</h2><ul><li>终止条件：两链表其中一个为空时，返回另一个链表；</li><li>当前递归内容：若<code>list1.val &lt;= list2.val</code>将较小的<code>list1.next</code>与merge后的表头连接，即<code>list1.next = Merge(list1.next,list2);</code><code>list2.val</code>较大时同理；</li><li>每次的返回值：排序好的链表头；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class ListNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    ListNode next = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    ListNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">Merge</span><span class="hljs-params">(ListNode list1,ListNode list2)</span> &#123;<br>        <span class="hljs-keyword">if</span>(list1==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> list2;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list2==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> list1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(list2.val&gt;list1.val)&#123;<br>            list1.next = Merge(list1.next,list2);<br>            <span class="hljs-keyword">return</span> list1;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            list2.next = Merge(list1,list2.next);<br>            <span class="hljs-keyword">return</span> list2;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="复杂度时间omn-空间-omn">复杂度：时间：O(m+n) 空间： O(m+n)</h4><h2 id="空间o1思路">2、空间O(1)思路</h2><ul><li>创建一个虚拟结点和一个哨兵结点</li><li>当<code>list1</code>与<code>list2</code>都不为<code>null</code>时循环</li><li>哪个的<code>val</code>小哪个赋给虚拟结点的<code>next</code>，虚拟结点后移。</li><li>退出循环后，哪个<code>list</code>不为空，哪个结点（包括剩下的）给虚拟结点的<code>next</code></li><li>最后返回哨兵结点的<code>next</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">Merge</span><span class="hljs-params">(ListNode list1,ListNode list2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-comment">// 必须保证两个list都不为空</span><br>        <span class="hljs-keyword">while</span>(list1 != <span class="hljs-literal">null</span> &amp; list2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span>(list1.val &gt; list2.val) &#123;<br>                dummy.next = list2;<br>                list2 = list2.next;<br>                dummy = dummy.next;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list1.val &lt;= list2.val) &#123;<br>                dummy.next = list1;<br>                list1 = list1.next;<br>                dummy = dummy.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// list1后面还有，就把剩下的全部拿走</span><br>        <span class="hljs-keyword">if</span>(list1 != <span class="hljs-literal">null</span>) &#123;<br>            dummy.next = list1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(list2 != <span class="hljs-literal">null</span>) &#123;<br>            dummy.next = list2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.next;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2023/09/30/reverse-listnode/"/>
    <url>/2023/09/30/reverse-listnode/</url>
    
    <content type="html"><![CDATA[<h1 id="反转链表">反转链表</h1><h2 id="题目描述">1、题目描述</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309302229385.png"alt="image-20230930222802631" /><figcaption aria-hidden="true">image-20230930222802631</figcaption></figure><h2 id="解题方法">2、解题方法</h2><h3 id="栈">1：栈</h3><p>原理图：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309302229013.png"alt="image-20230930222926165" /><figcaption aria-hidden="true">image-20230930222926165</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Stack;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    Stack&lt;ListNode&gt; stack= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-comment">//把链表节点全部摘掉放到栈中</span><br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(head);<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (stack.isEmpty())<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> node;<br>    <span class="hljs-comment">//栈中的结点全部出栈，然后重新连成一个新的链表</span><br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> stack.pop();<br>        node.next = tempNode;<br>        node = node.next;<br>    &#125;<br>    <span class="hljs-comment">//最后一个结点就是反转前的头结点，一定要让他的next</span><br>    <span class="hljs-comment">//等于空，否则会构成环</span><br>    node.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> dummy;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双链表">2：双链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">//新链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//先保存访问的节点的下一个节点，保存起来</span><br>        <span class="hljs-comment">//留着下一步访问的</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-comment">//每次访问的原链表节点都会成为新链表的头结点，</span><br>        <span class="hljs-comment">//其实就是把新链表挂到访问的原链表节点的</span><br>        <span class="hljs-comment">//后面就行了</span><br>        head.next = newHead;<br>        <span class="hljs-comment">//更新新链表</span><br>        newHead = head;<br>        <span class="hljs-comment">//重新赋值，继续访问</span><br>        head = temp;<br>    &#125;<br>    <span class="hljs-comment">//返回新链表</span><br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遗传算法</title>
    <link href="/2023/09/19/genetic_algorithm/"/>
    <url>/2023/09/19/genetic_algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="遗传算法genetic-algorithm">遗传算法（genetic algorithm）</h1><h2 id="概述">1、概述</h2><p>​算法的主要思想就是模拟生物的遗传与变异，快速的求出最大值或最小值的随机全局搜索优化方法。</p><h2 id="前置知识">2、前置知识</h2><p>染色体（Chromosome）：又称为基因型个体。</p><p>个体（individual）：每个生物</p><p>种群（population）：一个系统中所有个体的总称。</p><p>种群个体数（POPULATION）：一个系统中个体的数量。</p><p>基因（gene）：控制生物的性状。</p><p>适应度（fitness）：对某个生物是否适应环境的定量评分。</p><p>迭代次数（TIMES）：该生物种群繁衍的次数。</p><h2 id="算法基础"><strong>3、算法基础</strong></h2><p>​ <imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191024541.png"alt="image-20230919102418240" /></p><p>基本遗传算法是将群体中所有个体作为对象，只使用基本遗传算子：选择算子、交叉算子以及变异算子。可以用一个式子表示：<span class="math display">\[SGA=(C,E,P_0,M,\phi,\Gamma,\psi,T)\]</span></p><table><thead><tr class="header"><th style="text-align: center;"><strong>符号</strong></th><th style="text-align: center;"><strong>含义</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(E\)</span></td><td style="text-align: center;">个体适应度评价函数</td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(p_0\)</span></td><td style="text-align: center;">初始种群</td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(C\)</span></td><td style="text-align: center;">个体编码方案</td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(M\)</span>（预先设定）</td><td style="text-align: center;">种群大小</td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(\phi\)</span></td><td style="text-align: center;">选择算子</td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(\Gamma\)</span>（预先设定交叉概率）</td><td style="text-align: center;">交叉算子</td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(\psi\)</span>（预先设定变异概率）</td><td style="text-align: center;">变异算子</td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(T\)</span>（预先设定）</td><td style="text-align: center;">遗传算法终止条件</td></tr></tbody></table><h2 id="算法步骤">4、算法步骤</h2><h3 id="染色编码">4.1 染色编码</h3><h5 id="编码">编码</h5><p>将问题解空间的解表示为遗传算法中的染色体结构数据。常见的方法有：二进制编码、格雷码编码、浮点数编码、各参数级联编码、多参数交叉编码等。</p><h5 id="解码">解码</h5><p>将遗传算法染色体转换为问题的解.</p><h3 id="初始群体的生成"><strong>4.2 初始群体的生成</strong></h3><p>设定最大进化迭代数T，群体大小M，交叉概率<spanclass="math inline">\(P_c\)</span>,变异概率<spanclass="math inline">\(P_m\)</span>，随机生成M个个体作为初始化群体<spanclass="math inline">\(P_0\)</span>.</p><h3 id="适应度评估检测">4.3 适应度评估检测</h3><p>适应度函数表明个体或解的优劣性。</p><p>适应度尺度变换：指算法迭代的不同阶段，通过适当调节个体适应度大小，避免群体间竞争减弱，导致种群收敛于局部最优解。</p><p>尺度变化的方法：</p><ul><li><p>线性尺度变换：<spanclass="math inline">\(F^{\prime}=aF+b\)</span></p></li><li><p>乘幂尺度变换：<spanclass="math inline">\(F^{\prime}=F^{k}\)</span></p></li><li><p>指数尺度变换：<span class="math inline">\(F^{\prime}=e^{-\betaF}\)</span></p></li></ul><h3 id="遗传算子"><strong>4.4 遗传算子</strong></h3><ul><li><p>选择：从旧群体中按照一定概率选择优良个体组成新种群，繁殖得到下一代个体。个体的选择与适应度（<spanclass="math inline">\(f\)</span>）正相关： <span class="math display">\[P_i=\frac{f_i}{\sum_{k=1}^Mf_k}\]</span></p></li><li><p>交叉：从种群中随机选择两个个体，随机选择点位，两个染色体交换组合，将父串的优秀特征遗传给子串，从而产生新的优秀个体。</p></li></ul><p>方法包括单点交叉、双（多）点交叉、均匀交叉、算数交叉。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191204307.png"alt="image-20230919120432251" /><figcaption aria-hidden="true">image-20230919120432251</figcaption></figure><ul><li>变异：以二进制编码为例：一段基因序列中的某位由0变为1，则称该点发生了变异。该方法可以防止算法在优化过程中陷入局部最优解。</li></ul><p><strong><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191459227.png"alt="image-20230919145916185" /></strong></p><h3 id="终止判断条件">4.5 终止判断条件</h3><p>当<spanclass="math inline">\(t&gt;T\)</span>时，算法停止，选用前<spanclass="math inline">\(T\)</span>步中具有最大适应度的个体作为输出。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191516593.png"alt="image-20230919151617541" /><figcaption aria-hidden="true">image-20230919151617541</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>optimum solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读——CLIP算法</title>
    <link href="/2023/09/18/clip/"/>
    <url>/2023/09/18/clip/</url>
    
    <content type="html"><![CDATA[<h1 id="论文阅读clip算法">论文阅读——CLIP算法</h1><p><strong>原文链接：</strong>[<ahref="https://arxiv.org/abs/2103.00020">2103.00020] LearningTransferable Visual Models From Natural Language Supervision(arxiv.org)</a></p><p><strong>代码链接：</strong><ahref="https://github.com/OpenAI/CLIP">openai/CLIP: CLIP (ContrastiveLanguage-Image Pretraining), Predict the most relevant text snippetgiven an image (github.com)</a></p><h2 id="算法原理">1、算法原理</h2><p>CLIP（Contrastive Language-ImagePre-training）具备很强的迁移学习能力。在无任意一张ImageNet图片训练情景下，直接进行Zero-shot推理，就能媲美监督训练下的ResNet-50模型的结果。</p><p>宏观来看CLIP分为三部分：</p><ul><li><p>Contrastive pre-training：预训练阶段，使用图片 -文本对进行对比学习训练；</p></li><li><p>Create dataset classifier from labeltext：提取预测类别文本特征;</p></li><li><p>Use for zero-shot predictiion：进行 Zero-Shoot 推理预测;</p></li></ul><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309190948459.png"alt="image-20230917172037149" /><figcaption aria-hidden="true">image-20230917172037149</figcaption></figure><p>第一阶段，图像和文本分别通过图像、文本编码器生成对应的<spanclass="math inline">\(l_1、l_2…l_n\)</span>、<spanclass="math inline">\(T_1、T_2…T_n\)</span>的特征向量，计算对应角标向量的余弦相似度，通过temperature参数缩放，并借助softmax归一化为概率分布。图像编码器选用两个架构，第一个采用的是ResNet-50的基础架构，使用ResNetD和Rect-2进行改进，将全局平均池化层替换为一个单层的注意力池化机制；第二个采用改进的ViT模型。文本编码器使用的是一个Transformer编码器，有8个注意力头，使用了隐藏的自注意。</p><p>第二阶段，使用提示模板，帮助指定文本是否是关于图像的内容。将输出的句子通过文本编码器进行特征提取，得到特征向量。</p><p>第三阶段，输入一张图片，经过图像编码器进行特征提取生成一个特征向量，与文本特征进行余弦相似度计算，最相似的即为预测结果。</p><h2 id="代码实现">2、代码实现</h2><p>伪代码如下：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309181104648.png"alt="image-20230918110417534" /><figcaption aria-hidden="true">image-20230918110417534</figcaption></figure><p>CLIP模型前向传播部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, image, text</span>):<br>  image_features = self.encode_image(image)    <span class="hljs-comment"># 图片编码提特征</span><br>  text_features = self.encode_text(text)       <span class="hljs-comment"># 文本编码提特征</span><br>​<br>  <span class="hljs-comment"># 特征归一化</span><br>  image_features = image_features / image_features.norm(dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>  text_features = text_features / text_features.norm(dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>​<br>  <span class="hljs-comment"># 计算余弦相似度</span><br>  logit_scale = self.logit_scale.exp()<br>  logits_per_image = logit_scale * image_features @ text_features.t()<br>  logits_per_text = logits_per_image.t()<br>​<br>  <span class="hljs-comment"># shape = [global_batch_size, global_batch_size]</span><br>  <span class="hljs-keyword">return</span> logits_per_image, logits_per_text<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Multimodal Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zero-shot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python数据处理——去除 NaN 值</title>
    <link href="/2023/09/18/python/"/>
    <url>/2023/09/18/python/</url>
    
    <content type="html"><![CDATA[<h1 id="python数据处理去除-nan-值">Python数据处理——去除 NaN 值</h1><h2 id="nan-的定义">1、NaN 的定义</h2><p>NaN 即 Not A Number 的缩写，表示不是一个数字。NaN值是在进行数学计算时出现的一种特殊值，通常出现在计算过程中出现了错误或无法计算的情况下。</p><h2 id="处理方法">2、处理方法</h2><ul><li>使用 dropna() 方法删除 NaN 值所在的行或列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 读取Excel文件</span><br>file_path = <span class="hljs-string">&#x27;singleCoal.xlsx&#x27;</span><br>df = pd.read_excel(file_path)<br><br>df.dropna()  <span class="hljs-comment"># 删除包含 NaN 值的行</span><br><br>df.dropna(axis=<span class="hljs-string">&#x27;columns&#x27;</span>)  <span class="hljs-comment"># 删除包含 NaN 值的列，需要加上 axis 参数</span><br></code></pre></td></tr></table></figure><ul><li>使用 fillna() 方法填充 NaN 值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">df.fillna(value=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 将 NaN 值填充为 0</span><br><br><span class="hljs-comment">#使用 method 参数指定使用哪种方法进行填充</span><br>df.fillna(method=<span class="hljs-string">&quot;ffill&quot;</span>)  <span class="hljs-comment"># 前向填充</span><br>df.fillna(method=<span class="hljs-string">&quot;bfill&quot;</span>)  <span class="hljs-comment"># 后向填充</span><br></code></pre></td></tr></table></figure><ul><li>使用 interpolate() 方法插值填充 NaN 值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">df.interpolate()  <span class="hljs-comment"># 使用默认方式进行插值填充</span><br><br>df.interpolate(method=<span class="hljs-string">&quot;linear&quot;</span>)  <span class="hljs-comment"># 线性插值</span><br>df.interpolate(method=<span class="hljs-string">&quot;polynomial&quot;</span>, order=<span class="hljs-number">2</span>)  <span class="hljs-comment"># 二次插值</span><br>df.interpolate(method=<span class="hljs-string">&quot;spline&quot;</span>, order=<span class="hljs-number">2</span>)  <span class="hljs-comment"># 样条插值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode服务器小问题</title>
    <link href="/2023/09/12/VScode%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2023/09/12/VScode%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="vscode服务器小问题">VScode服务器小问题</h1><h2id="服务器不断要求输入密码连不上服务器">1、服务器不断要求输入密码，连不上服务器</h2><p><strong>原因：</strong>没有恰当的退出远程链接导致的</p><p><strong>解决方法：</strong>打开VScode的 view→palette然后输入Kill VSCode Setver on Host，再重新连接就可以了。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309112035681.png"alt="image-20230911203505606" /><figcaption aria-hidden="true">image-20230911203505606</figcaption></figure><p>后续使用完远程服务器关闭资源的时候要使用File→Close RemoteConnection来关闭资源。</p>]]></content>
    
    
    <categories>
      
      <category>Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——XGBoost算法</title>
    <link href="/2023/09/11/XGBoost%E7%AE%97%E6%B3%95/"/>
    <url>/2023/09/11/XGBoost%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="学习笔记xgboost算法">学习笔记——XGBoost算法</h1><p>XGBoost和GBDT两者都是boosting方法，除了工程实现、解决问题上的一些差异外，最大的不同就是目标函数的定义。</p><h2 id="基本原理">1、基本原理</h2><h3 id="目标函数">1.1 目标函数</h3><p>XGBoost算法<strong>是一个加法模型</strong>，在每一步迭代中，只调优当前的子模型：<spanclass="math inline">\(F_m(x_i)=F_{m-1}(x_i)+f_m(x_i)\)</span>。其中<spanclass="math inline">\(f_m(x_i)\)</span>表示当前的子模型，<spanclass="math inline">\(F_{m-1}(x_i)\)</span>表示前<spanclass="math inline">\(m-1\)</span>个已固定模型。</p><p>目标函数=经验风险+结构风险（正则项）： <span class="math display">\[\begin{aligned}obj&amp; =\sum_{i=1}^NL[F_m(x_i),y_i]+\sum_{j=1}^m\Omega(f_j)  \\&amp;=\sum_{i=1}^NL[F_{m-1}(x_i)+f_m(x_i),y_i]+\sum_{j=1}^m\Omega(f_j)\end{aligned}\]</span></p><p>其中正则项<spanclass="math inline">\(\Omega(f_j)\)</span>表示模型<spanclass="math inline">\(f\)</span>的复杂度。</p><p>XGBoost用2阶泰勒公式：<span class="math inline">\(f(x_0+\Deltax)\approx f(x_0)+f^{&#39;}(x_0)\Deltax+\frac{f^{&#39;&#39;}(x_0)}{2}(\Delta x)^2\)</span>​来逼近损失函数，我们可以将<spanclass="math inline">\(F_{m-1}(x_i)\)</span>看作<spanclass="math inline">\(x_0\)</span>,将<spanclass="math inline">\(f_m(x_i)\)</span>看作<spanclass="math inline">\(\Delta x\)</span>,所以（1）式就可以转化为： <spanclass="math display">\[\begin{aligned}Obj=\sum_{i=1}^N\left[L[F_{m-1}(x_i),y_i]+\frac{\partialL}{\partialF_{m-1}(x_i)}f_m(x_i)+\frac{1}{2}\frac{\partial^2L}{\partial^2F_{m-1}(x_i)}f_m^2(x_i)\right]+\\\sum_{j=1}^m\Omega(f_j)\end{aligned}\]</span> 由于前m-1个模型是确定的，所以<spanclass="math inline">\(\sum_{j=1}^m\Omega(f_j)\)</span>，前m-1项均为常数，对目标函数的求解无影响，所以（2）式又可以转化为：<span class="math display">\[Obj=\sum_{i=1}^{N}\left[g_{i}f_{m}(x_{i})+\frac{1}{2}h_{i}f_{m}^{2}(x_{i})\right]+\Omega(f_{m})\]</span></p><h3 id="基于树的正则化">1.2 基于树的正则化</h3><p>XGBoost支持<strong>的基分类器包括决策树和线性模型</strong>，为<strong>防止过拟合</strong>，XGBoost将<strong>树的深度设置为正则项</strong>：<spanclass="math inline">\(\Omega(f)=\gammaT+\frac{1}{2}\lambda||w||^{2}\)</span>，其中<spanclass="math inline">\(\gamma\)</span>和<spanclass="math inline">\(\lambda\)</span>作为超参数。所以目标函数可以改写为：<span class="math display">\[Obj=\sum_{i=1}^{N}\left[g_if_m(x_i)+\frac{1}{2}h_if_m^2(x_i)\right]+\gammaT+\frac{1}{2}\lambda\sum_{j=1}^{T}w_j^2\]</span>通过数学处理，可以将正则项和经验风险项合并：将经验风险项从样本层面上求和转换为叶节点层面上的求和。可以定义结点j上的样本集为<spanclass="math inline">\(I(j)=\{x_{i}|q(x_{i})=j\}\)</span>,其中<spanclass="math inline">\(q(x_i)\)</span>为将样本映射到叶节点上的索引函数，叶节点<spanclass="math inline">\(j\)</span>上的回归值为<spanclass="math inline">\(w_{j}=f_{m}(x_{i}),i\in I(j)\)</span>.</p><p>所以式（4）进一步简化,令<span class="math inline">\(\sum_{i\inI(j)}g_i=G_j,\sum_{i\in I(j)}h_i=H_j\)</span>： <spanclass="math display">\[Obj=\sum_{j=1}^T\left[G_jw_j+\frac{1}{2}(H_j+\lambda)w_j^2\right]+\gammaT\]</span> 如果一棵树的结构是确定的，则各个节点内的样本（<spanclass="math inline">\(x_i,y_i,g_i,h_i,G_j,H_j,T\)</span>）也是确定的，每个叶子结点输出回归值应该使得式（5）最小，所以该函数的二次函数极值点为：<spanclass="math inline">\(w_j^*=-\frac{G_j}{H_j+\lambda}\)</span></p><p>树的评分也可以理解成所有叶节点的评分之和：<spanclass="math inline">\(Obj^*=\sum_{j=1}^T\left(-\frac{1}{2}\frac{G_j^2}{H_j+\lambda}+\gamma\right)\)</span>.</p><h3 id="结点分裂准则">1.3 结点分裂准则</h3><p>XGBoost的子模型树和决策树模型一样，要依赖<strong>节点递归分裂的贪心准则来实现树的生成</strong>：</p><p>从树的深度为0开始：</p><ol type="1"><li>对每个叶节点枚举所有的可用特征；</li><li>针对每个特征，把属于该节点的训练样本根据该特征值进行升序排列，通过线性扫描的方式来决定该特征的最佳分裂点，并记录该特征的分裂收益；</li><li>选择收益最大的特征作为分裂特征，用该特征的最佳分裂点作为分裂位置，在该节点上分裂出左右两个新的叶节点，并为每个新节点关联对应的样本集；</li><li>回到第1步，递归执行直到满足特定条件为止；</li></ol><p>过程如图所示：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309111523571.png"alt="image-20230911152316481" /><figcaption aria-hidden="true">image-20230911152316481</figcaption></figure><p>显然分裂收益是树A的评分减去树B的评分，因此分裂收益表达式为： <spanclass="math display">\[Gain=\frac12\Big[\frac{G_L^2}{H_L+\lambda}+\frac{G_R^2}{H_R+\lambda}-\frac{(G_L+G_R)^2}{H_L+H_R+\lambda}\Big]-\gamma\]</span><strong>XGBoost还支持近似算法</strong>：根据特征分布的分位数提出候选划分点，然后将连续型特征映射到由这些候选点划分的桶中，然后聚合统计信息找到所有区间的最佳分裂点。具体而言，特征分位数的选取有global和local两种可选策略：</p><ul><li>global在全体样本上的特征值中选取，在根节点分裂之前进行一次即可；</li><li>local则是在待分裂节点包含的样本特征值上选取，每个节点分裂前都要进行。</li></ul><p>通常，global由于只能划分一次，其划分粒度需要更细。通过这个方法可以解决数据量过大超过内存、或有并行计算需求的情况。</p><p>由（3）式可得：令其偏导为0可以得到<spanclass="math inline">\(f_{m}^{*}(x_{i})=-\frac{g_{i}}{h_{i}}\)</span>,此目标函数可理解为以<spanclass="math inline">\(h_i\)</span>为权重，<spanclass="math inline">\(-\frac{g_{i}}{h_{i}}\)</span>​为标签的二次损失函数：<span class="math display">\[\begin{aligned}obj&amp;=\sum_{i=1}^{N}\left[g_{i}f_{m}(x_{i})+\frac{1}{2}h_{i}f_{m}^{2}(x_{i})\right]+\Omega(f_{m})  \\&amp;=\sum_{i=1}^{N}\frac{1}{2}h_{i}\Big[f_{m}(x_{i})-(-\frac{g_{i}}{h_{i}})\Big]^{2}+\Omega(f_{m})+C\end{aligned}\]</span> 因此，在近似算法取分位数时，实际上XGBoost会取以二阶导<spanclass="math inline">\(h_i\)</span>为权重的分位数。</p><h3 id="列采样和学习率">1.4 列采样和学习率</h3><p><strong>XGBoost还引入了两项特性：列采样和学习率</strong></p><ul><li>列采样：即随机森林中的做法，每次节点分裂的待选特征集合不是剩下的全部特征，而是剩下特征的一个子集。是为了更好地对抗过拟合，还能减少计算开销。</li><li>学习率：或者叫步长、shrinkage，是在每个子模型前（即在每个叶节点的回归值上）乘上该系数，削弱每颗树的影响，使得迭代更稳定。可以类比梯度下降中的学习率。XGBoost默认设定为0.3。</li></ul><h3 id="稀疏感知">1.5 稀疏感知</h3><p>XGBoost将缺失值和稀疏0值等同视作缺失值，将这些缺失值“绑定”在一起，分裂结点的遍历则会跳过缺失值整体，提升了运算效率。</p><h2 id="工程优化">2. 工程优化</h2><h3 id="并行列块的设计">2.1 并行列块的设计</h3><p>XGBoost将每一列特征提前进行排序，以块（Block）的形式储存在缓存中，并以索引将特征值和梯度统计量<spanclass="math inline">\(g_i,h_i\)</span>对应起来，每次节点分裂时会重复调用排好序的块。而且不同特征会分布在独立的块中，因此可以进行分布式或多线程的计算。</p><h3 id="缓存访问">2.2 缓存访问</h3><p>特征值排序后通过索引来取梯度 <spanclass="math inline">\(g_i,h_i\)</span>会导致访问的内存空间不一致，进而降低缓存的命中率，影响算法效率。为解决这个问题，XGBoost为每个线程分配一个单独的连续缓存区，用来存放梯度信息。</p><h3 id="核外块计算">2.3 核外块计算</h3><p>数据量过大时，不能同时全部载入内存。XGBoost将数据分为多个blocks并储存在硬盘中，使用一个独立的线程专门从磁盘中读取数据到内存中，实现计算和读取数据的同时进行。为了进一步提高磁盘读取数据性能，XGBoost还使用了两种方法：</p><ul><li><strong>块压缩：</strong>通过压缩block，用解压缩的开销换取磁盘读取的开销；</li><li><strong>块分区：</strong>将block分散储存在多个磁盘中，有助于提高磁盘吞吐量。</li></ul><h2 id="与gbdt比较">3. 与GBDT比较</h2><ul><li>性质：GBDT是机器学习算法，XGBoost除了算法内容还包括一些工程实现方面的优化。</li><li>基于二阶导：GBDT使用的是损失函数一阶导数，相当于函数空间中的梯度下降；而XGBoost还使用了损失函数二阶导数，相当于函数空间中的牛顿法。</li><li>正则化：XGBoost显式地加入了正则项来控制模型的复杂度，能有效防止过拟合。</li><li>列采样：XGBoost采用了随机森林中的做法，每次节点分裂前进行列随机采样。</li><li>缺失值处理：XGBoost运用稀疏感知策略处理缺失值，而GBDT没有设计缺失策略。</li><li>并行高效：XGBoost的列块设计能有效支持并行运算，提高效率。</li></ul><h4 id="缺点">缺点</h4><ul><li>虽然利用预排序和近似算法可以降低寻找最佳分裂点的计算量，但在节点分裂过程中仍需要遍历数据集；</li><li>预排序过程的空间复杂度过高，不仅需要存储特征值，还需要存储特征对应样本的梯度统计值的索引，相当于消耗了两倍的内存。</li></ul><h2 id="参考资料">参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/142413825?utm_id=0">机器学习 |XGBoost详解 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/83901304">深入理解XGBoost -知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>boosting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——LORA微调</title>
    <link href="/2023/08/16/LORA%E5%BE%AE%E8%B0%83/"/>
    <url>/2023/08/16/LORA%E5%BE%AE%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<h1 id="学习笔记lora微调">学习笔记——LORA微调</h1><p>​ LORA是一种低资源微调LLM模型的方法，源自论文：<ahref="%5B2106.09685.pdf%20(arxiv.org)%5D(https://arxiv.org/pdf/2106.09685.pdf)">LoRA:Low-Rank Adaptation of Large Language Models。</a></p><h2 id="一高效微调">一、高效微调</h2><p>​ 对于语言模型来说，在微调过程中，模型加载预训练参数<spanclass="math inline">\(\Phi_{0}\)</span>进行初始化，并通过最大化条件语言模型概率实现参数调整$_{0}+$​，即：<span class="math display">\[max_\Phi\sum_{(x,y)\in\mathcal{Z})}\sum_{t=1}^{|y|}log(P_\Phi(y_t|x,y&lt;t))\]</span> 这种方式的主要缺点参数增量<spanclass="math inline">\(\Delta\Phi\)</span>的维度和预训练参数<spanclass="math inline">\(\Phi_{0}\)</span>是相同的，所需资源比较多，一般被称为fullfine-tuing。</p><p>为了用更少的参数来表示学习增量<spanclass="math inline">\(\Delta\Phi\)</span>,提出了一系列方法叫做高效微调。例如：Adapter、prefixtuning等。相比于其他方法LORA使用一个低秩矩阵来编码参数增量，这种方法不会增加推理耗时并且便于优化。</p><h2 id="二实现方式">二、实现方式</h2><p>​ 研究表明：预训练模型拥有极小的内在维度（<strong>instrisicdimension</strong>，表示数据变化的自由变量的个数），换而言之，存在一个极低维度的参数，微调它和在全参数空间中微调能起到相同的效果。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161517289.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>该论文认为参数矩阵更新的过程中也存在一个‘内在秩’。对于预训练的权重矩阵<spanclass="math inline">\(W_0\)</span>，可以用一个低秩分解来表示参数更新<spanclass="math inline">\(\Delta W\)</span>，即： <spanclass="math display">\[W_0+\Delta W=W_0+BA\quad B\in\mathbb{R}^{d\timesr},A\in\mathbb{R}^{r\times k}\quad and\quad r\ll min(d,k)\]</span> 训练过程中可以冻结参数<spanclass="math inline">\(W_0\)</span>，只训练A和B中的参数。如图所示，对于<spanclass="math inline">\(h=W_{0}x\)</span>​,前向传播过程就变为： <spanclass="math display">\[h=W_0x+\Delta Wx=W_0x+BAx\]</span></p><h2 id="三qlora">三、<ahref="%5B2305.14314.pdf%20(arxiv.org)%5D(https://arxiv.org/pdf/2305.14314.pdf)">QLORA</a></h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161959472.png"alt="image-20230816195941425" /><figcaption aria-hidden="true">image-20230816195941425</figcaption></figure><p>QLORA训练过程和LORA基本一致，区别在于QLORA模型是按照NF4保存的，训练时需要将参数反量化到bf16后进行训练。<span class="math display">\[Y^{BF16}=X^{BF16}doubleDequant(c_{2}^{FP32},c_{2}^{k-bit},W^{NF8})+X^{BF16}B^{BF16}A^{BF16}\]</span></p><h3 id="分块量化block-wis-quantization">分块量化（Block-wisQuantization）</h3><p>量化是将输入从存储更多信息的表征映射为存储较少信息的表征的过程。</p><p>全局量化的方式存在一个问题：当输入中存在极大值或者离群值时，一些较小的参数无法被精确的表示，从而导致量化后的神经网络效果急剧下降。</p><p>分块量化是将输入划分为多个块，每个块分别量化，如图所示：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161954660.png"alt="image-20230816195439589" /><figcaption aria-hidden="true">image-20230816195439589</figcaption></figure><p>明显看到分块量化能够减少过程中的误差。</p><h3 id="分位量化quantile-quantization">分位量化（QuantileQuantization）</h3><p>在将一个参数量化到4bit的情境中，最多可以使用<spanclass="math inline">\(2^4\)</span>一共16个数字。按照传统的简易方法，一般是取最接近的数字或者直接round函数。分位量化则是将数字按顺序排列，再分为十六等分，最小的一块映射成量化后的第一个数，第二块映射成量化后的第二数，以此类推。这样就充分利用了已有的数位，原始数据在量化后的数字上分布也是均匀的。</p><h3 id="bit-normalfloatnf4">4-bit NormalFloat（NF4）</h3><p>这个概念是在分位量化的基础上进行改进，并结合分块量化，降低计算复杂度和误差。上述的分位量化会增加计算消耗，预训练模型的参数基本上都服从均值为0的正态分布，可以将其缩放到[-1,1]的范围内。同时可以在[-1,1]的范围内，将正态分布函数划分为<spanclass="math inline">\(2^k+1\)</span>份，直接将参数映射到对应的分位上，不用每次都进行排序。</p><h3 id="双重量化double-quantization">双重量化（doubleQuantization）</h3><p>分块量化中每个块都会额外产生一个量化常数c，以块大小为64为例，每个块会产生32bit的量化常数，双重量化则是在第一次量化后，不会直接存储量化常数<spanclass="math inline">\(C_1\)</span>,而是按照块大小256对量化常数再量化为8bit去存储，这个阶段会产生一个量化常数<spanclass="math inline">\(C_2\)</span>。最终存储的参数为<spanclass="math inline">\(8/64 +32/(64-256)=0.127bits\)</span>.</p><h2 id="四adalora">四、AdaLORA</h2><h3 id="技术背景">技术背景</h3><p>LORA技术预先规定每个增量矩阵<spanclass="math inline">\(\Delta\)</span>的秩必须相同，这就忽略了不同层、类型参数对下游任务的影响。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308162040469.png"alt="image-20230816203952264" /><figcaption aria-hidden="true">image-20230816203952264</figcaption></figure><p>如图所示，将微调参数放在FFN的效果优于放在Attention矩阵中的效果；同时微调高层参数的效果优于微调底层参数。那么如何根据下游任务自动地找出重要的参数模块并给其分配更多地可微调参数呢？</p><h3 id="解决方案">解决方案</h3><p>AdaLORA主要包含两个模块：</p><ul><li><p><strong>SVD形式参数更新（SVD-basedadaptation）</strong>：直接将增量矩阵<spanclass="math inline">\(\Delta\)</span>参数化为SVD地形式，避免在训练过程中进行SVD计算带来的计算资源消耗；</p></li><li><p><strong>根据重要程度地参数分配（Importance-aware rankallocation）</strong>：去除一些冗余的奇异值。</p></li></ul><p><span class="math display">\[W=W^{(0)}+\Delta=W^{(0)}+P\Lambda Q\]</span></p><p><span class="math display">\[R(P,Q)=||P^TP-I||_F^2+||Q^TQ-I||_F^2\]</span></p><p>如式(5)，AdaLORA增量矩阵<spanclass="math inline">\(\Delta\)</span>替换为<spanclass="math inline">\(P\LambdaQ\)</span>,这样既省去复杂的SVD计算又能去除奇异值。同时，为保证P和Q的正交性，在训练过程中增加了一个正则化，保证<spanclass="math inline">\(P^{T}P=Q^{T}Q=I\)</span>.</p><p>该方法相较于LORA有两个优点：</p><ul><li>AdaLORA只去除奇异值矩阵，并不会去除奇异向量，更容易恢复误删的奇异值。</li><li>AdaLORA的P和Q为正交举证，LORA的A和B矩阵非正交。训练过程中裁剪操作不会影响其他奇异值对应的奇异向量，训练会更稳定，泛化性能更好。</li></ul><h2 id="参考文章">参考文章：</h2><p><ahref="https://zhuanlan.zhihu.com/p/646791309">LORA微调系列(一)：LORA和它的基本原理- 知乎 (zhihu.com)</a></p><p><ahref="https://zhuanlan.zhihu.com/p/648239462">LORA微调系列(二)：QLORA和它的基本原理- 知乎 (zhihu.com)</a></p><p><ahref="https://zhuanlan.zhihu.com/p/649756885">LORA微调系列(三)：AdaLORA和它的基本原理- 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微调</tag>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
