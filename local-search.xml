<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>KVCache</title>
    <link href="/2024/05/11/KVCache/"/>
    <url>/2024/05/11/KVCache/</url>
    
    <content type="html"><![CDATA[<h1 id="kvcache">KVCache</h1><h2 id="为什么需要这个技术">1、为什么需要这个技术</h2><p>对于LLM类模型的一次推理(生成一个token)过程，可以将该过程分解为下列过程：</p><ul><li>输入n个token<spanclass="math inline">\(\{T_{1},\cdots,T_{i},\cdots,T_{n}\}\)</span>,</li><li>token预处理阶段，将token处理成token embedding<spanclass="math inline">\(\{x_{1}^{0},\cdots,x_{i}^{0},\cdots,x_{n}^{0}\}\)</span>(上标表示模型第几层的输入),每个tokenembedding为一个向量，维度记为<spanclass="math inline">\(D\)</span>。</li><li>token embedding变换阶段，模型内部包含<spanclass="math inline">\(L\)</span>层，每层的输入是tokenembedding，输出也是token embedding。最后一层输出的token embedding是<spanclass="math inline">\(\{x_{1}^{L},\cdots,x_{i}^{L},\cdots,x_{n}^{L}\}\)</span></li><li>next token generation阶段，由最后一层的最后一个token embedding<spanclass="math inline">\(x^L_n\)</span>，结合vocabularyembedding(lm_head)<spanclass="math inline">\(\{e_{1},\cdots,e_{i},\cdots,e_{V}\}\)</span>，生成每个token的概率<spanclass="math inline">\(\{p_1,\cdots,p_i,\cdots,p_V\}\)</span>，再根据概率分布采样得到一个具体的token<spanclass="math inline">\(T_{n+1}\)</span>。</li></ul><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405111426667.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><p>我们可以通过上面的流程接着生成下一个token，但是我们可以发现两次生成的计算之间存在可以复用的部分：在生成tokenembedding时，前T个token的embedding和上一轮的相同，可以通过复用上一轮的计算结果：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405111426389.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><h2 id="kvcache的原理及设计细节">2、KVCache的原理及设计细节</h2><p>当我们复用了中间结果时，每一层的计算输入为上次保存下来的<spanclass="math inline">\(\{x_{i}^{l}|1\leq i\leqn\}\)</span>以及本次新来的<spanclass="math inline">\(x_{n+1}^l\)</span>，需要计算得到的输出为<spanclass="math inline">\(x_{n+1}^{l+1}\)</span>​。所以这是一个single-queryattention计算，只关注最后一个token的输出，就可以得到： <spanclass="math display">\[\begin{aligned}s_{i}&amp; =(W_Q x_{n+1}^l)^T(W_K x_i^l) ,1\leq i\leq n+1 \\y_{h}&amp;=\sum_{i=1}^{n+1}\frac{e^{s_{i}}}{\sum_{j=1}^{n+1}e^{s_{j}}}W_{V}x_{i}^{l} ,1\leq i\leq n+1 \\x_{n+1}^{l+1}&amp; =\mathrm{Concat}_{h=1}^H y_h\end{aligned}\]</span> 根据这一公式，我们可以进一步看出，如果我们只保存<spanclass="math inline">\(\{x_{i}^{l}|1\leq i\leqn\}\)</span>，那么每次我们都需要重新计算<span class="math inline">\(W_Kx_i^l和W_{V}x_{i}^{l}\)</span>。所以，KVCache的想法也很简单，我们就不要保存<spanclass="math inline">\(x^l_i\)</span>，直接保存<spanclass="math inline">\(W_K x_i^l和W_{V}x_{i}^{l}\)</span>就可以，它们分别就是K cache 和 Vcache。当然，其实还有别的cache选择，比如保存<spanclass="math inline">\(x^l_i\)</span>。又或者根据矩阵乘法的性质：<spanclass="math inline">\(s_{i}=(W_{Q} x_{n+1}^{l})^{T}(W_{K}x_{i}^{l})=(x_{n+1}^{l})^{T}W_{Q}^{T}W_{K}x_{i}^{l}\)</span>，也可以选择保存<spanclass="math inline">\(W_{Q}^{T}W_{K} x_{i}^{l}\)</span>。</p><h2 id="kvcache的存储及实现细节">3、KVCache的存储及实现细节</h2><p>KVCache的总大小为<spanclass="math inline">\(2ndLH=2nDL\)</span>，正比于当前token数量、向量维度、层数。这里面最难处理的是token数量n，这是一个在推理过程中不断变大的量。具体处理方法有三种：</p><ul><li>分配一个最大容量的缓冲区。要求提前预知最大的token数量，但是大部分的用户请求都很短。因此，按照最大容量来分配是非常浪费的。</li><li>动态分配缓冲区大小。超过容量了就扩增一倍，但是频繁申请、释放内存的开销很大，效率不高。</li><li>把数据拆散，按最小单元存储，用一份元数据记录每一块数据的位置。</li></ul><p>最后一种方案，就是目前采用最多的方案，也叫PageAttention。程序在初始化时申请一整块显存，按照KVCache的大小划分成一个一个的小块，并记录每个token在推理时要用到第几个小块。小块显存的申请、释放、管理，类似操作系统对物理内存的虚拟化过程，这就是大名鼎鼎的vLLM的思路。</p><h2 id="kvcache成立条件">4、KVCache成立条件</h2><p>KVCache是一种用更大的显存空间换取更快的推理速度的手段。那么，它是否能够无条件适用于所有的LLM呢？其实并不是的。分析了它的原理后，可以得出它适用的条件：如果把一层transformer层的计算效果记为<spanclass="math inline">\(f\)</span>，那么它是一个接受变长输入的函数，输出也是变长的：<spanclass="math inline">\((x_1^{l+1},\cdots,x_i^{l+1},\cdots,x_n^{l+1})=f(x_1^l,\cdots,x_i^l,\cdots,x_n^l)\)</span>​。举个例子，当增加m个token进行推理时：<span class="math display">\[(\hat{x}_{1}^{l+1},\cdots,\hat{x}_{i}^{l+1},\cdots,\hat{x}_{n}^{l+1},\hat{x}_{n+1}^{l+1},\cdots,\hat{x}_{n+j}^{l+1},\cdots,\hat{x}_{n+m}^{l+1})\\=f(x_1^l,\cdots,x_i^l,\cdots,x_n^l,x_{n+1}^l,\cdots,x_{n+j}^l,\cdots,x_{n+m}^l)\]</span> 要适用KVCache，新的推理结果必须满足<spanclass="math inline">\(\hat{x}_{i}^{l+1}=x_{i}^{l+1},1\leq i\leqn\)</span>。通俗来说，这一个性质可以称为“因果性”，每一个token的输出只依赖于它自己以及之前的输入，与之后的输入无关。在transformer类模型中，BERT类encoder模型不满足这一性质，而GPT类的decoder模型因为使用了causalmask，所以满足这一性质。但是这一方法并不是适用于全部的decoder-only模型，像一些ReRope之类的技术，在增加新的token时会把整个序列的positionalembedding进行调整，同一个token，上一次的token embedding和这一次的tokenembedding不相同，所以KVCache的条件不再成立。而<strong>一旦输入预处理层不满足KVCache的条件，后续transformer层的输入（即预处理层的输出）就发生了改变，也将不再适用于KVCache。</strong></p>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM量化</title>
    <link href="/2024/05/11/LLM%E9%87%8F%E5%8C%96/"/>
    <url>/2024/05/11/LLM%E9%87%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="llm量化未完待续">LLM量化（未完待续）</h1><h2 id="int8">INT8</h2><h3 id="动机和原理">1、动机和原理</h3><p>模型的大小由参数量和数据精度决定，一些常见的精度有：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405101618156.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><ul><li><strong>Float32(FP32)</strong>：标准的IEEE32 位浮点表示，指数 8位，尾数 23 位，符号 1 位，可以表示大范围的浮点数。大部分硬件都支持 FP32运算指令。</li><li><strong>Float16(FP16)</strong>：指数 5 位，尾数 10 位，符号 1位。FP16 数字的数值范围远低于 FP32，存在上溢 (当用于表示非常大的数时)和下溢 (当用于表示非常小的数时) 的风险，通过缩放损失 (loss scaling)来缓解这个问题。</li><li><strong>Bfloat32(BF16)</strong>：指数 8 位 (与 FP32 相同)，尾数 7位，符号 1 位。这意味着 BF16 可以保留与 FP32 相同的动态范围。但是相对于FP16，损失了 3 位精度。因此，在使用 BF16精度时，大数值绝对没有问题，但是精度会比 FP16 差。</li><li><strong>TensorFloat-32(TF32)</strong>：使用19位表示，结合了 BF16的范围和 FP16的精度，是<strong>计算数据类型而不是存储数据类型</strong>。目前使用范围较小。</li></ul><p>在训练时，为保证精度，主权重始终为 FP32。而在推理时，FP16权重通常能提供与 FP32 相似的精度，这意味着在推理时使用 FP16权重，仅需一半 GPU 显存就能获得相同的结果。</p><p>在上述基础上，我们可以通过量化技术进一步的减少模型训练时所需的显存消耗。最常见的就是INT8量化。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405101642458.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><p>简单来说， INT8 量化即将浮点数<spanclass="math inline">\(x_f\)</span>通过缩放因子<spanclass="math inline">\(scale\)</span>映射到范围在[-128，127]内的8bit表示<spanclass="math inline">\(x_q\)</span>​，即： <span class="math display">\[x_q=\text{Clip}(\text{Round}(x_f*\text{scale }))\]</span> 其中 Round 表示四舍五入的整数，Clip 表示将离群值(Outlier)截断到 [-128, 127] 范围内。对于 scale 值，通常按如下方式计算得到： <spanclass="math display">\[\begin{aligned}&amp;amax=\max\left(abs\left(x_{f}\right)\right)\\&amp;\text{scale}=127/amax\end{aligned}\]</span> 下面是通过该方式实现的量化-反量化的例子：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405101641988.png"alt="图3" /><figcaption aria-hidden="true">图3</figcaption></figure><p>当进行矩阵乘法时，可以通过组合各种技巧，例如逐行或逐向量量化，来获取更精确的结果。</p><h3 id="int8-量化的精度和性能">2、int8 量化的精度和性能</h3><p>在单个向量量化的过程中也存在一定问题，对于一个向量A：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span>=[-<span class="hljs-number">0</span>.<span class="hljs-number">10</span>, -<span class="hljs-number">0</span>.<span class="hljs-number">23</span>, <span class="hljs-number">0</span>.<span class="hljs-number">08</span>, -<span class="hljs-number">0</span>.<span class="hljs-number">38</span>, -<span class="hljs-number">0</span>.<span class="hljs-number">28</span>, -<span class="hljs-number">0</span>.<span class="hljs-number">29</span>, -<span class="hljs-number">2</span>.<span class="hljs-number">11</span>, <span class="hljs-number">0</span>.<span class="hljs-number">34</span>, -<span class="hljs-number">0</span>.<span class="hljs-number">53</span>, -<span class="hljs-number">67</span>.<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>注意到向量A中有离群值(EmergentFeatures)-67.0，如果去掉该值对向量A做量化和反量化，处理后的结果是：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[<span class="hljs-string">-0</span>.10, <span class="hljs-string">-0</span>.23, 0.08, <span class="hljs-string">-0</span>.38, <span class="hljs-string">-0</span>.28, <span class="hljs-string">-0</span>.28, <span class="hljs-string">-2</span>.11, 0.33, <span class="hljs-string">-0</span>.53]<br></code></pre></td></tr></table></figure><p>出现的误差只有-0.29 -&gt;-0.28。但是如果我们在保留-67.0的情况下对该向量做量化和反量化，处理后的结果是：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[ <span class="hljs-string">-0</span>.00, <span class="hljs-string">-0</span>.00, 0.00, <span class="hljs-string">-0</span>.53, <span class="hljs-string">-0</span>.53, <span class="hljs-string">-0</span>.53, <span class="hljs-string">-2</span>.11, 0.53, <span class="hljs-string">-0</span>.53, <span class="hljs-string">-67</span>.00]<br></code></pre></td></tr></table></figure><p>可见大部分信息在处理后都丢失了。EmergentFeatures的分布是有规律的。对于一个参数量为6.7亿的transformer模型来说，每个句子的表示中会有150000个EmergentFeatures，但这些EmergentFeatures只分布在6个维度中(为什么有这样的规律本人还没了解过)。基于此，可以采用混合精度分解的量化方法：将包含了EmergentFeatures的几个维度从矩阵中分离出来，对其做高精度的矩阵乘法；其余部分进行量化。如下图所示：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405101650746.png"alt="图3" /><figcaption aria-hidden="true">图3</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电话号码的字母组合</title>
    <link href="/2024/05/09/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <url>/2024/05/09/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="电话号码的字母组合">电话号码的字母组合</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405092214862.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="回溯">回溯</h4><p>首先使用哈希表存储每个数字对应的所有可能的字母，回溯过程中维护一个字符串，表示已有的字母排列（如果未遍历完电话号码的所有数字，则已有的字母排列是不完整的）。该字符串初始为空。每次取电话号码的一位数字，从哈希表中获得该数字对应的所有可能的字母，并将其中的一个字母插入到已有的字母排列后面，然后继续处理电话号码的后一位数字，直到处理完电话号码中的所有数字，即得到一个完整的字母排列。然后进行回退操作，遍历其余的字母排列。</p><p>回溯算法用于寻找所有的可行解，如果发现一个解不可行，则会舍弃不可行的解。在这道题中，由于每个数字对应的每个字母都可能进入字母组合，因此不存在不可行的解，直接穷举所有的解即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> digits:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>()<br>        <br>        phone_map = &#123;<br>            <span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>,<br>            <span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;def&quot;</span>,<br>            <span class="hljs-string">&quot;4&quot;</span>:<span class="hljs-string">&quot;ghi&quot;</span>,<br>            <span class="hljs-string">&quot;5&quot;</span>:<span class="hljs-string">&quot;jkl&quot;</span>,<br>            <span class="hljs-string">&quot;6&quot;</span>:<span class="hljs-string">&quot;mno&quot;</span>,<br>            <span class="hljs-string">&quot;7&quot;</span>:<span class="hljs-string">&quot;pqrs&quot;</span>,<br>            <span class="hljs-string">&quot;8&quot;</span>:<span class="hljs-string">&quot;tuv&quot;</span>,<br>            <span class="hljs-string">&quot;9&quot;</span>:<span class="hljs-string">&quot;wxyz&quot;</span><br>        &#125;<br>        res = <span class="hljs-built_in">list</span>()<br>        tmps = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">idx,tmp,ans</span>):<br>            <span class="hljs-keyword">if</span> idx==<span class="hljs-built_in">len</span>(digits):<br>                ans.append(<span class="hljs-string">&quot;&quot;</span>.join(tmp))<br>            <span class="hljs-keyword">else</span>:<br>                s = digits[idx]<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> phone_map[s]:<br>                    tmp.append(i)<br>                    dfs(idx+<span class="hljs-number">1</span>,tmp,ans)<br>                    tmp.pop()<br><br>        dfs(<span class="hljs-number">0</span>,tmps,res)<br>        <span class="hljs-keyword">return</span> res    <br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPT系列模型</title>
    <link href="/2024/05/09/GPT%E7%B3%BB%E5%88%97%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/05/09/GPT%E7%B3%BB%E5%88%97%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="gpt系列模型">GPT系列模型</h1><h2 id="gpt1">1、GPT1</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091403495.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h3 id="训练过程">训练过程</h3><ul><li>pre-train：利用大量无标注的语料进行预训练</li><li>SFT(Supervised Fine-Tuning)：利用NLP任务的数据进行微调</li></ul><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091405058.png" alt="图2" style="zoom: 80%;" /></p><p>GPT1是一个decoder—only模型，模型的目标是让下一个词预测的概率最大</p><h2 id="gpt23">2、GPT2/3</h2><p>与GPT1结构没有变化，但是训练数据集和模型的参数量更大(模型的层数更多，模型更复杂1)</p><h2 id="gpt3.5">3、GPT3.5</h2><h3 id="训练过程-1">训练过程</h3><ul><li><p>pre-train：利用大量无标注的语料进行预训练</p></li><li><p>SFT(Supervised Fine-Tuning)：利用NLP任务的数据进行微调</p></li><li><p>RLHF(Reinforcement Learning from HumanFeedback，人类反馈强化学习)</p><ul><li>得到一个SFT后语言模型(LM)</li></ul><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091446994.png" alt="图3" style="zoom:33%;" /></p><ul><li>训练一个奖励模型(Reward Model,RM)</li></ul><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091447377.png" alt="图4" style="zoom: 25%;" /></p><p>奖励模型训练过程是接受一系列文本并返回一个标量奖励，数值上对应人的偏好。关于模型选择方面，RM可以是另一个经过微调的LM，也可以是根据偏好数据从头开始训练的LM。RM通常比LM的规模小一些。</p><p>RM的输入是<spanclass="math inline">\(prompt+answer\)</span>的形式，让模型学会对<spanclass="math inline">\(prompt+answer\)</span>进行打分。RM最后一层hidden层输出维度为<spanclass="math inline">\((B,L,D)\)</span>,通过一个<spanclass="math inline">\(Dx1\)</span>的MLP将维度变为<spanclass="math inline">\((B,L)\)</span>。<spanclass="math inline">\(L\)</span>维度中第<spanclass="math inline">\(i\)</span>个位置表示：从第<spanclass="math inline">\(i\)</span>位置到最后一个位置输出能获得的奖励分值的累加。</p><p>对于RM来说，模型目标是对一个句子进行打分，通常来说每个句子对应一个分值，但是RM对长度为<spanclass="math inline">\(L\)</span>的句子输出了<spanclass="math inline">\(L\)</span>个值。训练过程将<spanclass="math inline">\(L\)</span>维度上的最后一个位置的值作为句子的奖励得分。RM训练优化采用<strong>pairwissloss(同时输入同一个问题的两个回答，让模型学会两个句子哪个分高，哪个分低)。</strong>这样做的原因是<strong>在对训练数据进行标柱时，给同一问题的不同回答量化的打具体分值比较难，但是进行排序相对容易</strong>。</p><ul><li>用强化学习方式微调(LM)</li></ul></li></ul><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091520636.png" alt="图5" style="zoom: 33%;" /></p><p>此处LM模型是进行推理。LM的训练模型和推理模式的区别：<strong>训练模式</strong>是用teacherforce的方式(在每一轮预测时，不使用上一轮预测的输出，而强制使用正确的单词，过这样的方法可以有效的避免因中间预测错误而对后续序列的预测，从而加快训练速度)，将整句话输入到模型中，并通过mask机制，在保证不泄漏未来的单词情况下预测下一个单词。<strong>推理模式</strong>是真正的自回归，预测出下一个单词之后，当作下一步输入再预测下下个单词。</p><p>可以将微调任务表述为RL问题，目前可行的方案是使用策略梯度强化学习(Policy Gradient RL) 算法、近端策略优化 (Proximal PolicyOptimization，PPO) 、直接偏好优化算法（Direct PreferenceOptimization，DPO）微调初始 LM 的部分或全部参数。</p><p>首先，该 <strong>策略</strong> (policy)是一个接受提示并返回一系列文本 (或文本的概率分布) 的 LM。这个策略的<strong>行动空间</strong> (action space) 是 LM 的词表对应的所有词元(一般在 50k 数量级) ，<strong>观察空间</strong> (observation space)是可能的输入词元序列，也比较大 (词汇量 ^ 输入标记的数量)。<strong>奖励函数</strong> 是偏好模型和策略转变约束 (Policy shiftconstraint) 的结合。</p><h4 id="ppo算法">PPO算法</h4><p>PPO 算法确定的奖励函数具体计算如下：</p><p>首先将提示 <em>x</em> +预训练的输出answer输入当前微调的推理模式下的LM，将得到的输出传递给 RM 得到一个标量的奖励<spanclass="math inline">\(r_\theta\)</span>。再将提示 <em>x</em>输入训练模式下的initial LM 和当前微调的 LM，分别得到了输出文本<em>y1</em>,<em>y2</em>，将两个模型的生成文本进行比较计算差异的惩罚项，多篇论文中设计为输出词分布序列之间的Kullback–Leibler (KL) 散度的缩放，即<spanclass="math inline">\(r=r_{\theta}-\lambdar_{\mathrm{KL}}\)</span>。这一项被用于惩罚 RL策略在每个训练批次中生成大幅偏离初始模型，以确保模型输出合理连贯的文本。如果去掉这一惩罚项可能导致模型在优化中生成乱码文本来愚弄奖励模型提供高奖励值。</p><p>PPO训练时候的奖励值综合考虑KL散度和reward模型的输出，只考虑answer部分的KL散度，将rewardmodel的输出加到KL散度L维度的最后一个位置上，得到最终的奖励值。</p><p>训练过程中的目标函数是更新PPO更新公式里边的advantage。Advantage函数计算<strong>在状态下执行该操作与状态的平均值相比有多好</strong>。它从状态操作对中减去状态的平均值：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091514107.png" alt="图6" style="zoom: 25%;" /></p><p>换句话说，此函数计算<strong>如果我们在该状态下执行此操作时获得的额外奖励，与我们在该状态下获得的平均奖励相比</strong>：</p><ul><li>如果<span class="math inline">\(A（s，a） &gt;0\)</span>​：我们的梯度<strong>被推到那个方向</strong>。</li><li>如果<span class="math inline">\(A（s，a） &lt;0\)</span>​（我们的动作比该状态的平均值差），<strong>则我们的梯度被推向相反的方向</strong>。</li></ul><p>求解Advantage函数可以转换为求两个值函数，对于求接值函数我们又可以转换为求解TDError：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091517189.png" alt="图7" style="zoom: 25%;" /></p><h4 id="dpo算法">DPO算法</h4><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091622176.png"alt="图8" /><figcaption aria-hidden="true">图8</figcaption></figure><p>相比于PPO算法的强化学习过程，DPO跳过了训练RM的步骤，直接用偏好数据优化语言模型。算法的核心观点是利用从奖励函数到最优策略的解析映射，将对奖励函数的损失转化为对策略的损失。</p><p>RL问题中的目标是最大化奖励函数： <span class="math display">\[\max_{\pi_{\theta}}\mathbb{E}_{x\sim\mathcal{D},y\sim\pi_{\theta}(y\midx)}\begin{bmatrix}r_{\phi}(x,y)\end{bmatrix}-\beta\mathbb{D}_{\mathrm{KL}}\begin{bmatrix}\pi_{\theta}(y\midx)\parallel\pi_{\mathrm{ref}}(y\mid x)\end{bmatrix}\]</span> 经过公式推导可以得到公式中 KL 约束的奖励最大化目标的最优解为：<span class="math display">\[\pi_r(y\mid x)=\frac{1}{Z(x)}\pi_\text{ref}(y\midx)\exp\left(\frac{1}{\beta}r(x,y)\right)\]</span> 其中，<spanclass="math inline">\(Z(x)=\sum_y\pi_{ref}(y|x)exp(\frac{1}{\beta}r(x,y))\)</span>是一个配分函数。估计配分函数的值是十分困难的，可以对(2)式进行一些处理:<span class="math display">\[r(x,y)=\beta\log\frac{\pi_r(y\mid x)}{\pi_\text{ref}(y\mid x)}+\beta\logZ(x)\]</span> 同理可得<spanclass="math inline">\((x,y)\)</span>在最优奖励函数<spanclass="math inline">\(r^*\)</span>下获得的奖励可以由最优策略<spanclass="math inline">\(\pi^*\)</span>​表示： <span class="math display">\[r^*(x,y)=\beta\log\frac{\pi^*(y|x)}{\pi_\text{ref}(y|x)}+\beta\log Z(x)\]</span> 但是最优策略是不知道的，因此可以先用参数化的策略<spanclass="math inline">\(\pi_\theta\)</span>来表达，构造与RM模型训练类似的训练目标，最大化偏好答案与非偏好答案奖励的差值(<spanclass="math inline">\(Z(x)被抵消\)</span>​)： <spanclass="math display">\[\begin{aligned}\mathcal{L}_{\mathrm{DPO}}(\theta)&amp;=-\mathbb{E}_{(x,y_{w},y_{t})\sim\mathcal{D}}\left[\log\sigma\left(r_{\theta}(x,y_{w})-r_{\theta}(x,y_{l})\right)\right]\\&amp;=-\mathbb{E}_{(x,y_{w},y_{l})\sim\mathcal{D}}\left[\log\sigma\left(\beta\log\frac{\pi_{\theta}(y_{w}|x)}{\pi_{\mathrm{ref}}(y_{w}|x)}-\beta\log\frac{\pi_{\theta}(y_{l}|x)}{\pi_{\mathrm{ref}}(y_{l}|x)}\right)\right]\end{aligned}\]</span></p><h2 id="gpt4">GPT4</h2><h3 id="核心技术">核心技术</h3><h4 id="涌现能力emergent-abilities">涌现能力（Emergent Abilities）</h4><p>该能力是指模型具有从原始训练数据中自动学习并发现新的、更高层次的特征和模式的能力。当模型的参数量到达一定量级时，模型的性能有明显的提升。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091725428.png" alt="图9" style="zoom:150%;" /></p><h4 id="缩放定律scaling-laws">缩放定律(Scaling Laws)</h4><p>该定律是指模型性能（如测试集上的预测精度）随着模型参数的数量以及训练过程中使用的数据量和计算量的对数线性增长。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091728447.png"alt="图10" /><figcaption aria-hidden="true">图10</figcaption></figure><h5 id="优点">优点：</h5><ul><li>提前预测最终模型效果，知道每次训练的大概能到什么程度，要是不及预期可以根据预算再进行调整</li><li>在小尺寸模型上做置信的实验，进行数据、算法策略验证，降低实验的时间、资源成本</li><li>在真正的大规模预训练中，随时监测模型效果是否符合预期</li></ul><h4 id="思维链chain-of-thought">思维链(Chain of Thought)</h4><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405091740961.png"alt="图11" /><figcaption aria-hidden="true">图11</figcaption></figure><p>思维链的方法将一个多步骤的问题（例如图表推理）<strong>分解为可以单独解决的中间步骤</strong>。在解决多步骤推理问题时，模型生成的思维链会模仿人类思维过程。这意味着<strong>额外的计算资源被分配</strong>给需要更多推理步骤的问题，可以进一步增强GPT-4的表达和推理能力。</p><p>一般认为模型的思维推理能力与模型参数大小有正相关趋势，当参数量突破一个临界规模，模型才能通过思维链提示的训练获得相应的能力。</p><h4 id="提示工程">提示工程</h4><p>GPT3/4的提示范式可以归纳为：<strong>“预训练+提示+预测”</strong>（Pre-train+Prompt+Predict）。在这一范式中，各种下游任务被调整为类似预训练任务的形式。通过选取合适的提示，使用者可以控制模型预测输出，从而一个完全预训练模型可以被用来解决多样的下游任务。</p><h3 id="幻觉检测">幻觉检测</h3><p>大模型的幻觉(Hallucination)是指：模型生成的输出包含一些与输入不符合的信息，这些信息可能是错误的、无关的或者荒谬的。</p><p>大模型的幻觉大体上包含以下几类：</p><ul><li>含义相关性的幻觉(SemanticRelatedness)：模型生成的输出可能包含与输入语境无关或不相关的单词或短语，这些单词或短语通常是通过模型之前接触过的文本来学习的。</li><li>语义扩张(SemanticExpansion)的幻觉：模型生成的输出可能包含与输入语境相关但是过于具体或者过于抽象的内容，这些内容也可能是通过模型之前接触过的文本来学习的。</li><li>结构错误的幻觉(StructuralErrors)：模型生成的输出可能不符合正确的语言表达或句子结构，这些错误可能是由于模型在生成时遗漏了某些信息，或者将不相关的信息结合在一起导致的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位置编码</title>
    <link href="/2024/05/05/%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81/"/>
    <url>/2024/05/05/%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="位置编码">位置编码</h1><h2 id="绝对位置编码">绝对位置编码</h2><h3 id="训练式">训练式</h3><p>该类方法将位置编码作为可训练的参数，例如最大长度为512，编码维度为768，那么就初始化一个<spanclass="math inline">\(512*768\)</span>的矩阵作为位置向量，随着训练过程更新。目前的BERT、GPT1等模型使用的就是该类编码。</p><p>对于这类方法的缺点，普遍的想法都是缺乏外推性，只能处理最大长度以内的句子，或者将超过最大长度的位置向量随机初始化，进行微调。最近有研究发现，可以通过层次分解的方法，让绝对位置编码外推到一定长度的范围。</p><h3 id="三角式sinusoidal位置编码">三角式（Sinusoidal位置编码）</h3><p><span class="math display">\[\begin{cases}\boldsymbol{p}_{k,2\boldsymbol{i}}=\sin\left(k/10000^{2\boldsymbol{i}/\boldsymbol{d}}\right)\\\boldsymbol{p}_{k,2\boldsymbol{i}+1}=\cos\left(k/10000^{2\boldsymbol{i}/\boldsymbol{d}}\right)\end{cases}\]</span></p><p>其中<spanclass="math inline">\(\boldsymbol{p}_{k,2\boldsymbol{i}}、\boldsymbol{p}_{k,2\boldsymbol{i}+1}\)</span>分别是位置<spanclass="math inline">\(k\)</span>的位置编码向量的第<spanclass="math inline">\(2i、2i+1\)</span>个分量，<spanclass="math inline">\(d\)</span>是位置向量的维度。</p><h3 id="递归式">递归式</h3><p>如果在输入后先接入一层RNN，然后再输入Transformer，理论上就不需要再加入位置编码。因此，可以用RNN模型来学习一种绝对位置编码。这种基于递归模型的方法具有比较好的外推性，但是牺牲了一定的并行性，在速度方面存在一定瓶颈。代表方法有FLOATER，他提出用微分方程的方式来建模位置编码。</p><h2 id="相对位置编码">相对位置编码</h2><h3 id="经典式">经典式</h3><p>通常认为相对位置编码是通过绝对位置编码启发得到的，对于一般的绝对位置编码的Attention：<span class="math display">\[\begin{aligned}&amp;\boldsymbol{q}_i=(\boldsymbol{x}_i+\boldsymbol{p}_i)\boldsymbol{W}_Q\\&amp;\boldsymbol{k}_j=(\boldsymbol{x}_j+\boldsymbol{p}_j)\boldsymbol{W}_K\\&amp;\boldsymbol{v}_j=(\boldsymbol{x}_j+\boldsymbol{p}_j)\boldsymbol{W}_V\\&amp;a_{i,j}=softmax\left(\boldsymbol{q}_i\boldsymbol{k}_j^\top\right)\\&amp;\boldsymbol{o}_i=\sum_ja_{i,j}\boldsymbol{v}_j\end{aligned}\]</span> 展开<span class="math inline">\(q_ik^T_j:\)</span> <spanclass="math display">\[q_ik_j^\top=(\boldsymbol{x}_i+\boldsymbol{p}_i)\boldsymbol{W}_Q\boldsymbol{W}_K^\top(\boldsymbol{x}_j+\boldsymbol{p}_j)^\top=(\boldsymbol{x}_i\boldsymbol{W}_Q+\boldsymbol{p}_i\boldsymbol{W}_Q)\left(\boldsymbol{W}_K^\top\boldsymbol{x}_j^\top+\boldsymbol{W}_K^\top\boldsymbol{p}_j^\top\right)\]</span> 为了引入相对位置信息，将(3)中的第一项位置部分去掉，第二项<spanclass="math inline">\(p_jW_k\)</span>改为二元位置向量<spanclass="math inline">\(R^K_{i,j}\)</span>​，变成： <spanclass="math display">\[a_{i,j}=softmax\left(\boldsymbol{x}_i\boldsymbol{W}_Q\left(\boldsymbol{x}_j\boldsymbol{W}_K+\boldsymbol{R}_{i,j}^K\right)^\top\right)\]</span> 同时将<span class="math inline">\(v_j\)</span>中的<spanclass="math inline">\(p_jW_v\)</span>换成<spanclass="math inline">\(R^V_{i,j}\)</span>。</p><p>相对位置表示的是将依赖二元坐标<spanclass="math inline">\((i,j)\)</span>的向量<spanclass="math inline">\(R^K_{i,j},R^V_{i,j}\)</span>，改为只依赖于相对距离<spanclass="math inline">\(i-j\)</span>​，并且通常来说会进行截断，来适应不同的距离：<span class="math display">\[\boldsymbol{R}_{i,j}^{K}=\boldsymbol{p}_K\left[\mathrm{clip}(i-j,p_{\min},p_{\max})\right]\\\boldsymbol{R}_{i,j}^{V}=\boldsymbol{p}_V\left[\mathrm{clip}(i-j,p_{\min},p_{\max})\right]\]</span></p><h3 id="xlnet式">XLNET式</h3><p>将经典式中的<span class="math inline">\(q_ik^T_j\)</span>​完全展开：<span class="math display">\[q_ik_j^\top=x_iW_QW_K^\top x_j^\top+x_iW_QW_K^\topp_j^\top+p_iW_QW_K^\top x_j^\top+p_iW_QW_K^\top p_j^\top\]</span> 该方法直接将<spanclass="math inline">\(p_j\)</span>替换成相对位置向量<spanclass="math inline">\(R_{i-j}\)</span>，对于两个<spanclass="math inline">\(p_i\)</span>，直接替换为两个可训练的向量<spanclass="math inline">\(u、v\)</span>: <span class="math display">\[\boldsymbol{x}_i\boldsymbol{W}_Q\boldsymbol{W}_K^\top\boldsymbol{x}_j^\top+\boldsymbol{x}_i\boldsymbol{W}_Q\boldsymbol{W}_K^\topR_{i-j}^\top+\boldsymbol{u}\boldsymbol{W}_Q\boldsymbol{W}_K^\top\boldsymbol{x}_j^\top+\boldsymbol{v}\boldsymbol{W}_Q\boldsymbol{W}_K^\topR_{i-j}^\top\]</span> 该编码方式中的<spanclass="math inline">\(R_{i-j}\)</span>直接使用了三角式的生成方案，由于<spanclass="math inline">\(R_{i-j}\)</span>的编码空间与<spanclass="math inline">\(x_j\)</span>不一定相同，所以<spanclass="math inline">\(R_{i-j}\)</span>前的<spanclass="math inline">\(W^T_K\)</span>换成了一个独立矩阵<spanclass="math inline">\(W^T_{K,R}\)</span>，将<spanclass="math inline">\(uW_Q和vW_Q\)</span>直接合并成单个<spanclass="math inline">\(u、v\)</span>​： <span class="math display">\[\boldsymbol{x}_i\boldsymbol{W}_Q\boldsymbol{W}_K^\top\boldsymbol{x}_j^\top+\boldsymbol{x}_i\boldsymbol{W}_Q\boldsymbol{W}_{K,R}^\topR_{i-j}^\top+\boldsymbol{u}\boldsymbol{W}_K^\top\boldsymbol{x}_j^\top+\boldsymbol{v}\boldsymbol{W}_{K,R}^\topR_{i-j}^\top\]</span> 另外，<spanclass="math inline">\(v_j\)</span>上的位置偏置直接去掉。</p><h3 id="t5式">T5式</h3><p>该方式思路源自(6)，其中每一项的含义可以分别理解为“输入-输入”、“输入-位置”、“位置-输入”、“位置-位置”四项注意力的组合。如果我们认为输入信息与位置信息应该是独立（解耦）的，那么它们就不应该有过多的交互，所以“输入-位置”、“位置-输入”两项Attention可以删掉，<spanclass="math inline">\(p_iW_QW_K^\topp_j^\top\)</span>实际上只是依赖于<spanclass="math inline">\((i,j)\)</span>​的标量，可以将其作为参数进行训练,将(6)简化成：<span class="math display">\[x_iW_QW_K^\top\boldsymbol{x}_j^\top+\beta_{i,j}\]</span>简而言之，在Attention矩阵上加入了一个可训练的偏置项。而跟XLNET式一样，在<spanclass="math inline">\(v_j\)</span>上的位置偏置则直接被去掉了。</p><h3 id="deberta式">DeBERTa式</h3><p>DeBERTa的主要改进也是在位置编码上，同样还是从展开式(6)出发，DeBERTa刚好相反，去掉了第四项，保留了二、三项，并且替换为相对位置编码：<span class="math display">\[q_ik_j^\top=x_iW_QW_K^\top x_j^\top+x_iW_QW_K^\topR_{i,j}^\top+R_{j,i}W_QW_K^\top x_j^\top\]</span> 对于<spanclass="math inline">\(R_{i,j}\)</span>的设计与经典式相同。</p><p>DeBERTa指出NLP的大多数任务可能都只需要相对位置信息，但确实有些场景下绝对位置信息更有帮助，于是它将整个模型分为两部分来理解。以Base版的MLM预训练模型为例，它一共有13层，前11层只是用相对位置编码，这部分称为Encoder，后面2层加入绝对位置信息，这部分它称之为Decoder，还弄了个简称EMD(EnhancedMaskDecoder)至于下游任务的微调截断，则是使用前11层的Encoder加上1层的Decoder来进行。</p>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序数组</title>
    <link href="/2024/05/04/%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <url>/2024/05/04/%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="排序数组">排序数组</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202405042127033.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="快速排序">快速排序</h4><ul><li>挑选基准值</li><li>分割数组</li><li>递归排序子数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">quickSort</span>(<span class="hljs-params">self,nums,low,high</span>):<br>        pivot = nums[low]<br>        left,right=low,high<br>        <span class="hljs-keyword">while</span> left&lt;right:<br><br>            <span class="hljs-keyword">while</span> left&lt;right <span class="hljs-keyword">and</span> nums[right]&gt;=pivot:<br>                right -= <span class="hljs-number">1</span>            <br>            nums[left] = nums[right]<br><br>            <span class="hljs-keyword">while</span> left&lt;right <span class="hljs-keyword">and</span> nums[left]&lt;=pivot:<br>                left += <span class="hljs-number">1</span><br>            nums[right] = nums[left]<br>        <br>        nums[left] = pivot<br><br>        <span class="hljs-keyword">return</span> left<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">random_init</span>(<span class="hljs-params">self,nums,low,high</span>):<br>        pivot_idx = random.randint(low,high)<br>        nums[low],nums[pivot_idx] = nums[pivot_idx],nums[low]<br><br>        <span class="hljs-keyword">return</span> self.quickSort(nums,low,high)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_sort</span>(<span class="hljs-params">self,nums,low,high</span>):<br>        <span class="hljs-keyword">if</span> low &gt;= high:<br>            <span class="hljs-keyword">return</span><br>        mid = self.random_init(nums,low,high)<br><br>        self.quick_sort(nums,low,mid-<span class="hljs-number">1</span>)<br>        self.quick_sort(nums,mid+<span class="hljs-number">1</span>,high)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortArray</span>(<span class="hljs-params">self, num1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br><br>        self.quick_sort(num1,<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(num1)-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> num1<br></code></pre></td></tr></table></figure><h4 id="堆排序">堆排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">heapify</span>(<span class="hljs-params">self,nums,n,i</span>):<br>        largest = i<br>        <span class="hljs-keyword">while</span> largest*<span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt; n :<br>            l,r = <span class="hljs-number">2</span>*largest+<span class="hljs-number">1</span>, <span class="hljs-number">2</span>*largest+<span class="hljs-number">2</span><br><br>            <span class="hljs-keyword">if</span> n&lt;= r <span class="hljs-keyword">or</span> nums[r]&lt;nums[l]:<br>                tmp = l<br>            <span class="hljs-keyword">else</span>:<br>                tmp = r<br>            <br>            <span class="hljs-keyword">if</span> nums[largest]&lt; nums[tmp]:<br>                nums[largest],nums[tmp] = nums[tmp], nums[largest]<br>                largest = tmp<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build_heap</span>(<span class="hljs-params">self,nums</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            self.heapify(nums,<span class="hljs-built_in">len</span>(nums),i)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">heap_sort</span>(<span class="hljs-params">self,nums</span>):<br>        self.build_heap(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            nums[i],nums[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>],nums[i]<br>            self.heapify(nums,i,<span class="hljs-number">0</span>)    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        self.heap_sort(nums)<br>        <span class="hljs-keyword">return</span> nums<br>        <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打家劫舍</title>
    <link href="/2024/04/30/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
    <url>/2024/04/30/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="打家劫舍">打家劫舍</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404300037198.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="动态规划">动态规划</h4><p>设置状态数组，每个位置能抢到的最多钱等于<spanclass="math inline">\(max(前一屋能偷到的最多前，再前一屋偷到的最多钱+目前该屋能偷到钱)\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums)&lt;<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]<br>        dp = [<span class="hljs-number">0</span>]*<span class="hljs-built_in">len</span>(nums)<br>        dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>]<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(nums)):<br>                dp[i] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>],nums[i]+dp[i-<span class="hljs-number">2</span>])      <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp)<br></code></pre></td></tr></table></figure><p><strong>空间优化</strong>：用两个指针来记录偷盗的金额</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    prev = <span class="hljs-number">0</span><br>    curr = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-comment"># 每次循环，计算“偷到当前房子为止的最大金额”</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>        <span class="hljs-comment"># 循环开始时，curr 表示 dp[k-1]，prev 表示 dp[k-2]</span><br>        <span class="hljs-comment"># dp[k] = max&#123; dp[k-1], dp[k-2] + i &#125;</span><br>        prev, curr = curr, <span class="hljs-built_in">max</span>(curr, prev + i)<br>        <span class="hljs-comment"># 循环结束时，curr 表示 dp[k]，prev 表示 dp[k-1]</span><br><br>    <span class="hljs-keyword">return</span> curr<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不同路径</title>
    <link href="/2024/04/30/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/"/>
    <url>/2024/04/30/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="不同路径">不同路径</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404300025716.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="动态规划">动态规划</h4><p>设置状态数组dp，对于<spanclass="math inline">\(dp[i][0]\)</span>和<spanclass="math inline">\(dp[0][j]\)</span>都只有一条路径可走，对于<spanclass="math inline">\(dp[i][j]=dp[i-1][j]+dp[i][j-1]\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">uniquePaths</span>(<span class="hljs-params">self, m: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        down = <span class="hljs-number">0</span><br>        right = <span class="hljs-number">0</span><br>        dp = [[<span class="hljs-number">1</span>]*n] + [[<span class="hljs-number">1</span>]+[<span class="hljs-number">0</span>]*(n-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m-<span class="hljs-number">1</span>)]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j] + dp[i][j-<span class="hljs-number">1</span>]<br>    <br>        <span class="hljs-keyword">return</span> dp[-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><strong>优化空间</strong>：按行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">uniquePaths</span>(<span class="hljs-params">self, m: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        cur = [<span class="hljs-number">1</span>] * n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>                cur[j] += cur[j-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> cur[-<span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跳跃游戏II</title>
    <link href="/2024/04/29/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII/"/>
    <url>/2024/04/29/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII/</url>
    
    <content type="html"><![CDATA[<h1 id="跳跃游戏ii">跳跃游戏II</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404290008704.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="动态规划贪心">动态规划+贪心</h4><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404290008713.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404290008720.png"alt="图3" /><figcaption aria-hidden="true">图3</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">jump</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        size = <span class="hljs-built_in">len</span>(nums)<br>        dp = [<span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size)]<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, size):<br>            <span class="hljs-keyword">while</span> j + nums[j] &lt; i:<br>                j += <span class="hljs-number">1</span><br>            dp[i] = dp[j] + <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> dp[size - <span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure><h4 id="贪心">贪心</h4><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404290008659.png"alt="图4" /><figcaption aria-hidden="true">图4</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">jump</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        end,max_step = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        step = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>):<br>            max_step = <span class="hljs-built_in">max</span>(max_step, nums[i]+i)<br><br>            <span class="hljs-keyword">if</span> i == end:<br>                end = max_step<br>                step += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> step<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跳跃游戏</title>
    <link href="/2024/04/28/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/04/28/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="跳跃游戏">跳跃游戏</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404282256955.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="贪心">贪心</h4><p>对于每一个位置x，该位置可以到达的最远距离是<spanclass="math inline">\(x+nums[x]\)</span>。通过遍历数组中每一个位置，同时维持该位置可以到达的最远距离。在遍历的过程中，如果最远可以到达的位置大于等于数组中的最后一个位置，那就说明最后一个位置可达，直接返回<spanclass="math inline">\(True\)</span>。如果遍历结束不可到达，则返回<spanclass="math inline">\(False\)</span>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canJump</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        max_step = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i,jump <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> max_step&gt;=i <span class="hljs-keyword">and</span> i+jump&gt;max_step:<br>                max_step = i+jump<br>            <br>            <span class="hljs-keyword">if</span> max_step&lt;i:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>买卖股票的最佳时机</title>
    <link href="/2024/04/14/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <url>/2024/04/14/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机">买卖股票的最佳时机</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404141720273.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="动态规划">动态规划</h4><ul><li>更新前<spanclass="math inline">\(i\)</span>天的最低价格，即最低买入成本<spanclass="math inline">\(cost\)</span></li><li>更新前<span class="math inline">\(i\)</span>天的最高利润<spanclass="math inline">\(profit\)</span>，即选择前<spanclass="math inline">\(i-1\)</span>天最高利润<spanclass="math inline">\(profit\)</span>和第<spanclass="math inline">\(i\)</span>天卖出的最高利润<spanclass="math inline">\(price-cost\)</span>中的最大值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        cost = prices[<span class="hljs-number">0</span>]<br>        days = <span class="hljs-built_in">len</span>(prices)<br>        money = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> price <span class="hljs-keyword">in</span> prices:<br>            <span class="hljs-keyword">if</span> cost &gt;= price:<br>                cost = price<br>            <br>            <span class="hljs-keyword">if</span> money&lt;=price-cost:<br>                money = price-cost<br><br>        <span class="hljs-keyword">return</span> money<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组中的第k个最大元素</title>
    <link href="/2024/04/14/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <url>/2024/04/14/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="数组中的第k个最大元素">数组中的第k个最大元素</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404141704077.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="堆排序">堆排序</h4><p>基本思想：堆排序（HeapSort）是一种基于二叉堆数据结构的排序算法，它通过将元素构建成一个最大堆或最小堆，然后重复从堆中移除根节点，直到堆为空，从而得到有序数组。堆排序是一种原地排序算法，具有稳定的时间复杂度，通常效率较高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">heapify</span>(<span class="hljs-params">arr, n, i</span>):<br>    largest = i<br>    left = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span><br>    right = <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">if</span> left &lt; n <span class="hljs-keyword">and</span> arr[left] &gt; arr[largest]:<br>        largest = left<br><br>    <span class="hljs-keyword">if</span> right &lt; n <span class="hljs-keyword">and</span> arr[right] &gt; arr[largest]:<br>        largest = right<br><br>    <span class="hljs-keyword">if</span> largest != i:<br>        arr[i], arr[largest] = arr[largest], arr[i]<br>        heapify(arr, n, largest)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">heap_sort</span>(<span class="hljs-params">arr</span>):<br>    n = <span class="hljs-built_in">len</span>(arr)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n // <span class="hljs-number">2</span> - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        heapify(arr, n, i)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        arr[i], arr[<span class="hljs-number">0</span>] = arr[<span class="hljs-number">0</span>], arr[i]<br>        heapify(arr, i, <span class="hljs-number">0</span>)<br><br></code></pre></td></tr></table></figure><p>这道题可以借助一个小顶堆来维护当前堆内元素的最小值，同时保证堆的大小为k：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findKthLargest</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        pq = []   <span class="hljs-comment"># 将数组加入小顶堆，堆中维护当前值最大的k个数</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            heapq.heappush(pq, num) <span class="hljs-comment"># 当前元素入堆</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pq) &gt; k:<br>                heapq.heappop(pq)   <span class="hljs-comment"># 堆中元素超过k个，弹出最小的那个</span><br>        <span class="hljs-keyword">return</span> pq[<span class="hljs-number">0</span>]    <span class="hljs-comment"># 最后堆顶的即为第k大的数</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小栈</title>
    <link href="/2024/04/14/%E6%9C%80%E5%B0%8F%E6%A0%88/"/>
    <url>/2024/04/14/%E6%9C%80%E5%B0%8F%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="最小栈">最小栈</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404141530455.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="最小插值法">最小插值法</h4><p>当元素入栈时，只要没有加入更小值时，当前最小值是保持不变的。我们可以改变入栈元素内容，将当前入栈值与最小值插值入栈，这样可以根据最小值还原栈内值。</p><p>这样有一个新问题：最小值不是一直不变，当有更小值入栈时，最小值就会改变，原来记录的差值就不对了。</p><p>当更小值入栈，插值小于0，而之前的插值都是大于等于0。因此可以根据负数插值作为一个判断，表示再这个时候发生了最小值的改变。只有在元素出栈的时候才可能需要还原最小值，还原的最小值就是<spanclass="math inline">\(当前最小值-插值\)</span>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.diffs = []  <span class="hljs-comment"># 存储入栈的元素</span><br>        self.min_val = <span class="hljs-number">0</span> <span class="hljs-comment"># 当前最小值</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.diffs:<br>            self.diffs.append(<span class="hljs-number">0</span>)     <span class="hljs-comment"># 当前栈内没有元素，差值为0入栈</span><br>            self.min_val = val      <span class="hljs-comment"># 最小值为当前入栈元素</span><br>        <span class="hljs-keyword">else</span>:<br>            self.diffs.append(val - self.min_val)    <span class="hljs-comment"># 先记录差值</span><br>            self.min_val = <span class="hljs-built_in">min</span>(val, self.min_val)   <span class="hljs-comment"># 再更新最小值</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 弹出栈顶差值</span><br>        <span class="hljs-comment"># 如果差值为负，表示在这个位置最小值发生改变，需要还原原来的最小值</span><br>        <span class="hljs-comment"># minVal = minVal - diff，否则最小值不变</span><br>        self.min_val -= <span class="hljs-built_in">min</span>(self.diffs.pop(),<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">top</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 根据差值还原当前元素</span><br>        <span class="hljs-comment"># 如果差值为负，说明当前位置发生了最小值改变，入栈值为最小值，记录的是和原来最小值的差值</span><br>        <span class="hljs-comment"># 否则记录的差值是入栈值和当前最小值的差值，相加还原</span><br>        <span class="hljs-keyword">return</span> self.min_val + <span class="hljs-built_in">max</span>(self.diffs[-<span class="hljs-number">1</span>], <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getMin</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> self.min_val<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有效的括号</title>
    <link href="/2024/04/14/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <url>/2024/04/14/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="有效的括号">有效的括号</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404141501426.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="辅助栈">辅助栈</h4><ul><li>遇到左括号入栈，遇到右括号时，对应栈顶左括号出战，则遍历完所有括号后，栈为空。</li><li>建立哈希表，构建左右括号对应关系。</li></ul><p>边界问题：</p><ul><li>当栈为空时，此时<spanclass="math inline">\(stack.pop()\)</span>会报错，因此需要给stack赋予初值，并在哈希表中建立对应关系，予以配合。此时当stack为空，且字符串为右括号可以正常提前返回False。</li><li>字符串以左括号结尾，该情况下可以正常遍历，最后根据<spanclass="math inline">\(len(stack)==1\)</span>，判断是否是有效的括号组合。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        dic = &#123;<span class="hljs-string">&#x27;&#123;&#x27;</span>: <span class="hljs-string">&#x27;&#125;&#x27;</span>,  <span class="hljs-string">&#x27;[&#x27;</span>: <span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>: <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>: <span class="hljs-string">&#x27;?&#x27;</span>&#125;<br>        stack = [<span class="hljs-string">&#x27;?&#x27;</span>]<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> dic: <br>            stack.append(c)<br>            <span class="hljs-keyword">elif</span> dic[stack.pop()] != c: <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索二维矩阵(二分法)</title>
    <link href="/2024/04/14/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-1/"/>
    <url>/2024/04/14/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-1/</url>
    
    <content type="html"><![CDATA[<h1 id="搜索二维矩阵">搜索二维矩阵</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404141436730.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="两次二分查找">两次二分查找</h4><p>先二分查找找到小于target的是哪一行，并且下一行的第一个数大于target，然后在该行二分查找到target。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchMatrix</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        r_t,r_b = <span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(matrix)<br>        l_l,l_r = <span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>        m,n = <span class="hljs-built_in">len</span>(matrix), <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>        col0 = [col[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> matrix]<br>        <span class="hljs-keyword">while</span> r_t&lt;r_b:<br>            r_mid = r_t + (r_b - r_t)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> col0[r_mid]&lt;= target:<br>                r_t = r_mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                r_b = r_mid<br>        <span class="hljs-keyword">if</span> r_t  &lt; <span class="hljs-number">0</span> :<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">while</span> l_l&lt;l_r:<br>            l_mid = l_l + (l_r - l_l)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> matrix[r_t-<span class="hljs-number">1</span>][l_mid]&lt;target:<br>                l_l = l_mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                l_r = l_mid<br><br>        <span class="hljs-keyword">if</span> l_l &gt;= n:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <br>        <span class="hljs-keyword">if</span> matrix[r_t-<span class="hljs-number">1</span>][l_l] == target: <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索插入位置</title>
    <link href="/2024/04/14/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <url>/2024/04/14/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="搜索插入位置">搜索插入位置</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404141348623.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="二分法">二分法</h4><ul><li>先确定查找区间的左右开闭情况<ul><li>将区间定义左闭右开的好处：很多函数堆区间的操作都是左闭右开的形式；在返回值问题上，退出循环时，必然满足<spanclass="math inline">\(left==right\)</span>，这样在最后返回值上就可以任意返回。</li></ul></li><li>数组长度<ul><li>区间为左闭右开，数组长度就固定为<spanclass="math inline">\([0,len(nums))\)</span>。</li></ul></li><li>循环退出条件<ul><li>由于左闭右开，所以条件为<spanclass="math inline">\(left&lt;right\)</span>，不能有<spanclass="math inline">\(=\)</span>。</li></ul></li><li>中间值的写法<ul><li><spanclass="math inline">\(mid=left+(right-left)//2\)</span>，这样写的目的是为了防止大数<spanclass="math inline">\((left+right)\)</span>溢出。</li></ul></li><li>中间值和目标值的比较关系<ul><li>当<spanclass="math inline">\(nums[mid]&lt;target\)</span>，表示得到比<strong>targe</strong>t校的数中的最大数时，<strong>left</strong>的值为<spanclass="math inline">\(mid+1\)</span>，下一个值必然是大于等于target的值，此时可能取到和target相等的位置。</li><li>当<span class="math inline">\(nums[mid]\leq target\)</span>，当<spanclass="math inline">\(nums[mid]==target\)</span>时，仍会进入条件，<spanclass="math inline">\(left=mid+1\)</span>的值肯定是大于target的值，此时会收敛到第一个大于target的值。</li></ul></li><li>左右区间变化<ul><li>区间变化取决于区间定义，所以<spanclass="math inline">\(left=mid+1,right=mid\)</span>，right的真是取值为mid-1。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchInsert</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left = <span class="hljs-number">0</span><br>        right = <span class="hljs-built_in">len</span>(nums)<br><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            mid = (left + right)//<span class="hljs-number">2</span><br><br>            <span class="hljs-keyword">if</span> nums[mid] &lt; target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                right = mid<br>        <br>        <span class="hljs-keyword">return</span> left<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RoPE——旋转式位置编码</title>
    <link href="/2024/04/13/%E6%97%8B%E8%BD%AC%E5%BC%8F%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81/"/>
    <url>/2024/04/13/%E6%97%8B%E8%BD%AC%E5%BC%8F%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1id="旋转式位置编码rotary-position-embeddingrope">旋转式位置编码(RotaryPosition Embedding，RoPE)</h1><h2 id="实现思路">实现思路</h2><p>该技术的出发点是通过绝对位置编码方式实现相对位置编码，该方法在理论和实践上都有一定的道理。</p><p>假设通过下述运算给<spanclass="math inline">\(q,k\)</span>​添加绝对位置信息： <spanclass="math display">\[\tilde{\boldsymbol{q}}_m=\boldsymbol{f}(\boldsymbol{q},m),\quad\tilde{\boldsymbol{k}}_n=\boldsymbol{f}(\boldsymbol{k},n)\]</span> 通过分别为<spanclass="math inline">\(q,k\)</span>设计函数<spanclass="math inline">\(\boldsymbol{f}(\cdot,m),\boldsymbol{f}(\cdot,n)\)</span>,使得经过该函数后，<spanclass="math inline">\(\tilde{\boldsymbol{q}}_m,\tilde{\boldsymbol{k}}_n\)</span>就带有<spanclass="math inline">\(m,n\)</span>​的绝对位置信息。Attention的核心运算是内积，因此希望内积后的结果带有相对位置信息，所以假设存在恒等关系：<span class="math display">\[\langle\boldsymbol{f}(\boldsymbol{q},m),\boldsymbol{f}(\boldsymbol{k},n)\rangle=g(\boldsymbol{q},\boldsymbol{k},m-n)\]</span> 根据上述等式可以求出一个解。</p><h2 id="求解过程">求解过程</h2><p>可以合理设<strong>初始条件</strong><spanclass="math inline">\(\boldsymbol{f}(\boldsymbol{q},0)=\boldsymbol{q},\boldsymbol{f}(\boldsymbol{k},0)=\boldsymbol{k}\)</span>​，以二维情况为例：</p><p>在复数中有<spanclass="math inline">\(\langle\boldsymbol{q},\boldsymbol{k}\rangle=\mathrm{Re}[\boldsymbol{q}\boldsymbol{k}^{*}]\)</span>，所以可以得到：<spanclass="math inline">\(\operatorname{Re}[\boldsymbol{f}(\boldsymbol{q},m)\boldsymbol{f}^*(\boldsymbol{k},n)]=g(\boldsymbol{q},\boldsymbol{k},m-n)\)</span>。假设存在复数<spanclass="math inline">\(g(\boldsymbol{q},\boldsymbol{k},m-n)\)</span>，使得<spanclass="math inline">\(\boldsymbol{f}(\boldsymbol{q},m)\boldsymbol{f}^*(\boldsymbol{k},n)=\boldsymbol{g}(\boldsymbol{q},\boldsymbol{k},m-n)\)</span>​,根据复数的指数形式可以令：<span class="math display">\[\begin{aligned}f(\boldsymbol{q},m)&amp;=R_{f}(\boldsymbol{q},m)e^{\mathrm{i}\Theta_{f}(\boldsymbol{q},m)}  \\\boldsymbol{f}(\boldsymbol{k},n)&amp;=R_f(\boldsymbol{k},n)e^{\mathrm{i}\Theta_f(\boldsymbol{k},n)}  \\\boldsymbol{g}(\boldsymbol{q},\boldsymbol{k},m-n)&amp;=R_g(\boldsymbol{q},\boldsymbol{k},m-n)e^{\mathrm{i}\Theta_g(\boldsymbol{q},\boldsymbol{k},m-n)}\end{aligned}\]</span> 将(3)代入方程可以得到： <span class="math display">\[\begin{aligned}R_f(\boldsymbol{q},m)R_f(\boldsymbol{k},n)&amp;=R_g(\boldsymbol{q},\boldsymbol{k},m-n)\\\Theta_f(\boldsymbol{q},m)-\Theta_f(\boldsymbol{k},n)&amp;=\Theta_g(\boldsymbol{q},\boldsymbol{k},m-n)\end{aligned}\]</span> 对于第一个式子，当<spanclass="math inline">\(m=n\)</span>时，可以得到：<spanclass="math inline">\(R_f(\boldsymbol{q},m)R_f(\boldsymbol{k},m)=R_g(\boldsymbol{q},\boldsymbol{k},0)=R_f(\boldsymbol{q},0)R_f(\boldsymbol{k},0)=\|\boldsymbol{q}\|\|\boldsymbol{k}\|\)</span></p><p>根据上式可以设<spanclass="math inline">\(R_f(\boldsymbol{q},m)=\|\boldsymbol{q}\|,R_f(\boldsymbol{k},m)=\|\boldsymbol{k}\|\)</span>，从式子中可以看到二者都不依赖于m。</p><p>同理对第二个式子：<spanclass="math inline">\(\Theta_f(\boldsymbol{q},m)-\Theta_f(\boldsymbol{k},m)=\Theta_g(\boldsymbol{q},\boldsymbol{k},0)=\Theta_f(\boldsymbol{q},0)-\Theta_f(\boldsymbol{k},0)=\Theta(\boldsymbol{q})-\Theta(\boldsymbol{k})\)</span></p><p>根据上式可以看出<span class="math inline">\(\Theta_{f}(\boldsymbolq,m)-\Theta(\boldsymbolq)\)</span>应该是一个只与m相关、跟q无关的函数，记作<spanclass="math inline">\(\varphi(m)\)</span>。所以<spanclass="math inline">\(\Theta_{f}(\boldsymbol q,m)=\Theta(\boldsymbolq)+\varphi(m)\)</span>​。令n=m-1，可以得到： <spanclass="math display">\[\varphi(m)-\varphi(m-1)=\Theta_g(\boldsymbol{q},\boldsymbol{k},1)+\Theta(\boldsymbol{k})-\Theta(\boldsymbol{q})\]</span> 即{<spanclass="math inline">\(\varphi(m)\)</span>}为等差数列，令(5)右边式子为<spanclass="math inline">\(\theta\)</span>，可以得到$=m $</p><h2 id="编码形式">编码形式</h2><p>根据上述推导可以得到二维情况下RoPE表达式： <spanclass="math display">\[f(\boldsymbol{q},m)=R_f(\boldsymbol{q},m)e^{\mathrm{i}\Theta_f(\boldsymbol{q},m)}=\|q\|e^{\mathrm{i}(\Theta(\boldsymbol{q})+m\theta)}=\boldsymbol{q}e^{\mathrm{i}m\theta}\]</span>根据复数乘法的几何意义，该变化实际上对应向量的旋转，上式可以写成矩阵形式：<span class="math display">\[\left.\boldsymbol{f}(\boldsymbol{q},m)=\left(\begin{array}{cc}\cosm\theta&amp;-\sin m\theta\\\sin m\theta&amp;\cosm\theta\end{array}\right.\right)\left(\begin{array}{c}q_0\\q_1\end{array}\right)\]</span>由于内积满足线性叠加性，因此任意偶数维的RoPE，都可以表示为二维情形的拼接：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404021141374.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><p>给位置m的向量q乘上矩阵<spanclass="math inline">\(W_m\)</span>、位置n的向量k乘上矩阵<spanclass="math inline">\(W_n\)</span>，用变换后的<spanclass="math inline">\(Q、K\)</span>​进行attention计算，可以得到： <spanclass="math display">\[(\boldsymbol{W}_m\boldsymbol{q})^\top(\boldsymbol{W}_n\boldsymbol{k})=\boldsymbol{q}^\top\boldsymbol{W}_m^\top\boldsymbol{W}_n\boldsymbol{k}=\boldsymbol{q}^\top\boldsymbol{W}_{n-m}\boldsymbol{k}\]</span> <spanclass="math inline">\(W_m\)</span>是一个正交矩阵，它不会改变向量模长，因此通常讲不会改变模型的稳定性。由于<spanclass="math inline">\(W_m\)</span>​的稀疏性，直接矩阵乘法实现会浪费算力，可以通过下述式子实现：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404021405328.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><p>$$表示逐位对应相乘。</p><h2 id="远程衰减">远程衰减</h2><p>与Sinusoidal位置编码相比，RoPE编码在形式上相似，不过前者是加性的，而后者可以看作是乘性。在<spanclass="math inline">\(\theta_i\)</span>的选择上沿用了Sinusoidal位置编码的方案，即<spanclass="math inline">\(\theta_{i}=10000^{-2i/d}\)</span>​，这会导致一定的远程衰减性。例如将q固定在位置0处，k的位置从0开始增大，依次计算内积：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404021415082.png"alt="图3" /><figcaption aria-hidden="true">图3</figcaption></figure><p>对于<spanclass="math inline">\(\theta_{i}\)</span>的取值可以进一步探究，令<spanclass="math inline">\(\theta_{i}=base^{-2i/d}\)</span>，其中改变base的取值：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404021418480.png"alt="图4" /><figcaption aria-hidden="true">图4</figcaption></figure><p>从图4中可以看出base的不同取值会影响注意力远程衰减的程度。当base大于500时，随着base的提升，远程衰减的程度会逐渐削弱。但太小的base也会破坏注意力远程衰减的性质，例如base=10或100时，注意力分数不再随着相对位置的增大呈现出震荡下降的趋势。极端的情况下，当base=1时，将完全失去远程衰减特性：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404021427232.png"alt="图5" /><figcaption aria-hidden="true">图5</figcaption></figure><p>对于base的性质研究与大模型的长度外推有很大关系，如NTK-Aware ScaledRoPE、NTK-by-parts、DynamicNTK等长度外推方法，本质上都是通过改变base，从而影响每个位置对应的旋转角度，进而影响模型的位置编码信息，最终达到长度外推的目的。目前大多长度外推工作都是通过放大base以提升模型的输入长度，但更大的base也将会使得注意力远程衰减的性质变弱，改变模型的注意力分布，导致模型的输出质量下降。</p><h2 id="长度扩展">长度扩展</h2><p>基于RoPE的大模型进行长度扩展的方法，大致可以分为两大类：局部注意力和调整旋转弧度。</p><h3 id="调整旋转弧度">调整旋转弧度</h3><p>模型在训练时，只见过<spanclass="math inline">\([0,(L-1)\theta_i]\)</span>范围内的旋转弧度，未见过大于<spanclass="math inline">\((L-1)\theta_i\)</span>的旋转弧度，所以当推理长度大于时，模型难以理解新的旋转弧度，无法正确注入位置信息，导致模型性能下降(这只是一个简单的说法)。</p><h4 id="position-interpolation">Position Interpolation</h4><p>该做法简单直观：缩小每个位置的旋转弧度，让向量旋转得慢一些，每个位置的旋转弧度变为原来的<spanclass="math inline">\(\fracL{L^{\prime}}\)</span>，长度扩大几倍，则旋转弧度缩小几倍。最终，经过调整后，位置<spanclass="math inline">\(m\)</span>​的旋转弧度如下公式所示： <spanclass="math display">\[\frac{mL\theta_i}{L^{&#39;}}=\frac{mL}{L^{&#39;}}base^{-2i/d}\]</span> PositionInterpolation将每个位置的旋转弧度均变为原来的一半。这相当于在原来的弧度范围内，插入更多的位置，由于旋转弧度是线性变化的，所以也称为线性位置插值。<strong>进行位置插值后，向量旋转速度变慢，周期变大，频率变慢。</strong></p><p>举个例子，将模型的长度从2048扩展至4096：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404131709812.png"alt="图6" /><figcaption aria-hidden="true">图6</figcaption></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404131709833.png"alt="图7" /><figcaption aria-hidden="true">图7</figcaption></figure><h4 id="ntk-aware-interpolation">NTK-Aware Interpolation</h4><p>作者认为高频信息对于神经网络非常重要，而PositionInterpolation对于向量的所有分组不加区分地缩小旋转弧度，降低旋转速度（进一步体现为对其正弦函数进行拉伸），会导致模型的高频信息缺失，从而影响模型的性能。</p><p>上面介绍过，位置越靠前的向量分组，旋转速度越快。频率越高。为了保留高频信息，在NTK-Aware插值中，经过调整后，位置<spanclass="math inline">\(m\)</span>的旋转弧度如下公式所示，LLaMA中的 <spanclass="math inline">\(base=10000\)</span>，<spanclass="math inline">\(\alpha\)</span>表示缩放因子： <spanclass="math display">\[m\theta_i=m*(base*\alpha)^{-2i/d}=m*(10000*\alpha)^{-2i/d}\]</span> 以Code LLaMA为例进行分析，Code LLaMA中 <spanclass="math inline">\(\alpha=100\)</span>，表示将原始模型的<spanclass="math inline">\(base\)</span>放大100倍，调整后的旋转弧度与原始旋转弧度的倍数关系如下：<span class="math display">\[\frac{m*(1000000)^{-2i/d}}{m*(10000)^{-2i/d}}=100^{-2i/d}\]</span>如下图所示，越靠后的分组，旋转弧度缩小的倍数越大。其中第0分组的旋转弧度保持不变，最后一个分组的旋转弧度变为原来的1/100。可以将NTK-AwareInterpolation的思想总结为：保留高频信息；高频分量旋转速度降幅低，低频分量旋转速度降幅高；在高频部分进行外推，低频部分进行内插：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404131718032.png"alt="图8" /><figcaption aria-hidden="true">图8</figcaption></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404131724324.png"alt="图9" /><figcaption aria-hidden="true">图9</figcaption></figure><p>如图所示，在不进行finetune的时候，NTK-Aware插值的效果比线性插值更优。为什么NTK-AwareInterpolation能够奏效？上文提到过，位置越靠后的分组旋转速度越慢，频率越低，周期越长。如下图所示，对于第0组分量，仅在位置7时，就已经旋转一周。但对于第64组分量，当位置为2047时，其旋转弧度约为0.2047，甚至仍未完成1/4周旋转。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404131727470.png"alt="图10" /><figcaption aria-hidden="true">图10</figcaption></figure><p>综上所诉，将NTK-Aware Interpolation奏效的原因主要有两点：</p><ol type="1"><li>前置的分组在训练中见过很多完整的旋转周期，位置信息得到充分训练，所以具备较强的外推能力</li><li>后置的分组在训练中无法见过完整的旋转周期，或者见到的旋转周期非常少，训练不够充分，外推能力弱，需要进行位置插值。</li></ol><h4 id="ntk-by-parts-interpolation">NTK-by-parts Interpolation</h4><p>NTK-by-parts Interpolation则是基于NTK-AwareInterpolation进行优化，其核心思想是：不改变高频部分，仅缩小低频部分的旋转弧度。也就是不改变靠前分组的旋转弧度，仅减小靠后分组的旋转弧度，这就是by-patrs的含义。</p><p>第<span class="math inline">\(i\)</span>​个分组的旋转周期如下： <spanclass="math display">\[\lambda_i=\frac{2\pi}{\theta_i}=2\pi*base^{2i/d}\]</span> 第<spanclass="math inline">\(i\)</span>个分组在训练长度内旋转的周期个数:<spanclass="math inline">\(r(i)=\frac{L}{\lambda_i}\)</span>。以每组分量在训练长度内旋转的周期个数<spanclass="math inline">\(r(i)\)</span>分类讨论插值方案。引入超参数<spanclass="math inline">\(\beta\)</span>，表示旋转周期个数的约束条件。</p><h4 id="dynamic-ntk-interpolation">Dynamic NTK Interpolation</h4><p>Dynamic NTKInterpolation是一种动态插值的方法，思路很简单：<strong>推理长度小于等于训练长度时，不进行插值；推理长度大于训练长度时，每一步都通过NTK-AwareInterpolation动态放大base。</strong>当序列长度大于模型训练长度时，使用NTK-AwareInterpolation调整旋转弧度为<spanclass="math inline">\(m*(base*\alpha)^{-2i/d}\)</span>，<spanclass="math inline">\(\alpha=\left(\frac{l}{L}\right)^{d/(d-2)}\)</span>。超出模型序列长度后，每一次生成都会根据当前长度重新调整旋转弧度，然后再进行下一次生成。</p><h4 id="yarn">YaRN</h4><p>无论是PositionInterpolation还是NTK类方法，本质都是通过减小旋转弧度，降低旋转速度，来达到长度扩展的目的。<strong>这将导致位置之间的旋转弧度差距变小，词向量之间的距离变得比原来更近，词向量之间的点乘变大，破坏模型原始的注意力分布。</strong>所以经过插值之后，模型在原来的训练长度内的困惑度均有所提升，性能受损。</p><p>根据向量内积公式(<spanclass="math inline">\(q.k=|q|*|k|*cos(\gamma)\)</span>)，向量旋转不改变模长，当旋转弧度变小，导致二者之间的夹角变小，从而内积变大，最终会影响模型的注意力分布。</p><p><strong>YaRN本质上是NTK-by-partsInterpolation与注意力分布修正策略的结合，仅缩小低频部分的旋转弧度，且通过温度系数修正注意力分布。</strong>只需将原来的注意力分数除以温度<spanclass="math inline">\(t\)</span>​即可: <span class="math display">\[\dfrac{\mathbf{q}_m^T\mathbf{k}_n}{\sqrt{|d|}}\to\dfrac{\mathbf{q}_m^T\mathbf{k}_n}{t\sqrt{|d|}}, \sqrt{\dfrac1t}=0.1*\ln\!\left(\dfrac{L^{&#39;}}{L}\right)+1\]</span>下图是未经过微调的动态插值方法的比较，修正了注意力分布的Dynamic-YaRN，显著优于未修正注意力分布的Dynamic-PI方法。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404131754146.png"alt="图11" /><figcaption aria-hidden="true">图11</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子集</title>
    <link href="/2024/04/12/%E5%AD%90%E9%9B%86/"/>
    <url>/2024/04/12/%E5%AD%90%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="子集">子集</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404122028530.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="回溯法">回溯法</h4><p>设定一个tmp为子集，用来存放每次递归获得的数组，作为回溯的节点。遍历给定的数组，利用递归进行枚举和回溯。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subsets</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        res = []<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        tmp = []<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i</span>):<br>            res.append(tmp[:])<br>            <span class="hljs-keyword">if</span> i == n:<br>                <span class="hljs-keyword">return</span><br>            <br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,n):<br>                tmp.append(nums[j])<br>                dfs(j+<span class="hljs-number">1</span>)<br>                tmp.pop()<br>        <br>        dfs(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全排列</title>
    <link href="/2024/04/11/%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <url>/2024/04/11/%E5%85%A8%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="全排列">全排列</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404112043291.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="回溯法">回溯法</h4><p>可以将问题转换成在一行空格中填入给定的数，回溯法就是一种穷举的算法，从左到右依次填入数字。定义函数back(first，output)，表示从左往右填到第first个位置的排列为output。</p><ul><li>当first=n，表示已经填完n个位置，找到可行解，将output放入数组，递归结束</li><li>当first &lt;n，需要考虑当前位置填写的数。根据题目要求不能填入重复的数，可以将给定数组划分成两块，左边表示已经填过的，右边表示待填写的。在递归过程中动态维护该数组。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">permute</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">back</span>(<span class="hljs-params">first=<span class="hljs-number">0</span></span>):<br>            <span class="hljs-keyword">if</span> first == n:<br>                <span class="hljs-comment">#该处必须为nums的拷贝，否则会改变nums数组本身</span><br>                ans.append(nums[:])<br><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(first,n):<br>                nums[first], nums[i] = nums[i],nums[first]<br><br>                back(first+<span class="hljs-number">1</span>)<br>                nums[first], nums[i] = nums[i],nums[first]<br><br>        <br>        n = <span class="hljs-built_in">len</span>(nums)<br>        ans=[]<br>        back()<br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>岛屿数量</title>
    <link href="/2024/04/09/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"/>
    <url>/2024/04/09/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="岛屿数量">岛屿数量</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404091701276.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="广度优先搜索">广度优先搜索</h4><p>通过扫描整个二维网络，如果某个位置为1，则将其加入队列，进行BFS。在BFS中，每搜索到一个1都会重新被标记为0.直到队列为空，搜索结束。最终岛屿数量为进行BFS的次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numIslands</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        s_r = <span class="hljs-built_in">len</span>(grid)<br>        <span class="hljs-keyword">if</span> s_r == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        s_c = <span class="hljs-built_in">len</span>(grid[<span class="hljs-number">0</span>])<br><br>        island_num = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s_r):<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s_c):<br>                <span class="hljs-keyword">if</span> grid[r][c] == <span class="hljs-string">&quot;1&quot;</span>:<br>                    island_num += <span class="hljs-number">1</span><br>                    grid[r][c] = <span class="hljs-string">&quot;0&quot;</span><br>                    que = [(r,c)]<br>                    <span class="hljs-keyword">while</span> que:<br>                        row,col = que.pop()<br>                        <span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> [(row-<span class="hljs-number">1</span>,col),(row+<span class="hljs-number">1</span>,col),(row,col-<span class="hljs-number">1</span>),(row,col+<span class="hljs-number">1</span>)]:<br>                            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span>&lt;=x&lt;s_r <span class="hljs-keyword">and</span> <span class="hljs-number">0</span>&lt;=y&lt;s_c <span class="hljs-keyword">and</span> grid[x][y] == <span class="hljs-string">&quot;1&quot;</span>:<br>                                que.append((x,y))<br>                                grid[x][y] = <span class="hljs-string">&quot;0&quot;</span><br>            <br>        <span class="hljs-keyword">return</span> island_num<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将有序数组转换为平衡二叉搜索树</title>
    <link href="/2024/04/09/%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2024/04/09/%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="将有序数组转换为二叉搜索树">将有序数组转换为二叉搜索树</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404091632889.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="中序遍历">中序遍历</h4><p>在给定中序遍历序列数组的情况下，每一个子树中的数字在数组中一定是连续的，因此可以通过数组下标范围确定子树包含的数字，下标范围为[left,right]。当<spanclass="math inline">\(left&gt;rigth\)</span>时，平衡二叉搜索树为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortedArrayToBST</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">stucture</span>(<span class="hljs-params">left,right</span>):<br><br>            <span class="hljs-keyword">if</span> left&gt;right:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            <br>            mid = (left+right)//<span class="hljs-number">2</span><br><br>            root = TreeNode(nums[mid])<br>            root.left = stucture(left,mid-<span class="hljs-number">1</span>)<br>            root.right = stucture(mid+<span class="hljs-number">1</span>,right)<br><br>            <span class="hljs-keyword">return</span> root<br>        <br>        <span class="hljs-keyword">return</span> stucture(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的层序遍历</title>
    <link href="/2024/04/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2024/04/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树的层序遍历">二叉树的层序遍历</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404091550883.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="广度优先搜索">广度优先搜索</h4><p>借助数据结构队列，实现逐层打印</p><p>算法流程：</p><ul><li>根节点为空时，返回空列表</li><li>初始化队列为根节点</li><li>当队列为空时跳出循环：<ul><li>新建临时结果列表用于存储当前层结果和临时队列用于存储下一层结果</li><li>遍历队列，将结果存储临时结果列表，若当前节点的左(右)子节点不为空，则将临时节点加入临时队列</li><li>令队列等于临时队列</li></ul></li><li>返回结果列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> []<br>        stack = [root]<br>        ans = []<br>        <span class="hljs-keyword">while</span> stack:<br>            val = []<br>            tmp = []<br>            <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> stack:<br>                val.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left: tmp.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right: tmp.append(node.right)<br>            ans.append(val)<br>            stack = tmp  <br><br>        <span class="hljs-keyword">return</span> ans  <br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的直径</title>
    <link href="/2024/04/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    <url>/2024/04/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树的直径">二叉树的直径</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404091457687.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="深度优先搜索">深度优先搜索</h4><p>递归计算当前节点的左右子树的路径，当前节点的直径值为<spanclass="math inline">\(max(左子树路径,右子树路径)+1\)</span>。递归至树节点，该树的直径为左子树深度+右子树深度+1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">diameterOfBinaryTree</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.ans = <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">node</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>            L = dfs(node.left)<br>            R = dfs(node.right)<br>            self.ans = <span class="hljs-built_in">max</span>(self.ans, L+R+<span class="hljs-number">1</span>)<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(L,R)+<span class="hljs-number">1</span><br><br>        dfs(root)<br>        <br>        <span class="hljs-keyword">return</span> self.ans - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对称二叉树</title>
    <link href="/2024/04/01/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2024/04/01/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="对称二叉树">对称二叉树</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404011539775.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="递归">递归</h4><p>终止条件：left和right不等或者left和right都为空</p><p>递归：比较<spanclass="math inline">\(left.left和right.right\)</span>以及<spanclass="math inline">\(left.right和right.left\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isSymmetric</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">left,right</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span>(left <span class="hljs-keyword">or</span> right):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (left <span class="hljs-keyword">and</span> right):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <br>            <span class="hljs-keyword">if</span> left.val != right.val:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>            <span class="hljs-keyword">return</span> dfs(left.left,right.right) <span class="hljs-keyword">and</span> dfs(left.right,right.left)<br>        <br>        <span class="hljs-keyword">return</span> dfs(root.left,root.right)<br></code></pre></td></tr></table></figure><h4 id="迭代">迭代</h4><p>实现思路与递归一样：将比较的两个节点放入队列中，比较完毕后弹出队列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isSymmetric</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> (root.left <span class="hljs-keyword">or</span> root.right): <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        que = [root.left, root.right]<br><br>        <span class="hljs-keyword">while</span> que:<br>            left = que.pop(<span class="hljs-number">0</span>)<br>            right = que.pop(<span class="hljs-number">0</span>)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (left <span class="hljs-keyword">or</span> right):<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (left <span class="hljs-keyword">and</span> right):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> left.val != right.val:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <br>            que.append(left.left)<br>            que.append(right.right)<br><br>            que.append(left.right)<br>            que.append(right.left)<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>翻转二叉树</title>
    <link href="/2024/04/01/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2024/04/01/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="翻转二叉树">翻转二叉树</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404010949424.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="递归">递归</h4><p>根据二叉镜像树的定义，考虑<spanclass="math inline">\(DFS\)</span>递归遍历二叉树。</p><p>算法流程：</p><ul><li>终止条件：当节点root为空时，则返回None</li><li>递归：<ul><li>初始化节点tmp，暂存root的左子节点</li><li>开始递归右子节点，并将返回值作为root的左子节点</li><li>开始递归左子节点，并将返回值作为root的右子节点</li></ul></li><li>返回：当前节点root</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">invertTree</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span><br>        tmp = root.left<br>        root.left = self.invertTree(root.right)<br>        root.right = self.invertTree(tmp)<br>        <span class="hljs-keyword">return</span> root<br>        <br></code></pre></td></tr></table></figure><h4 id="辅助栈">辅助栈</h4><p>算法流程：</p><ul><li>当root为空时，直接返回None</li><li>初始化栈，加入根节点root</li><li>当栈为空时结束。出栈的节点记为node，将node左和右子节点入栈，交换node的左右子节点</li><li>返回根节点root</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">invertTree</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> root<br>        stack = [root]<br>        <span class="hljs-keyword">while</span> stack:<br>            node = stack.pop()<br>            <span class="hljs-keyword">if</span> node.left: stack.append(node.left)<br>            <span class="hljs-keyword">if</span> node.right: stack.append(node.right)<br><br>            node.left,node.right = node.right, node.left<br>        <br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树最大深度</title>
    <link href="/2024/03/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <url>/2024/03/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树的最大深度">二叉树的最大深度</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403302342744.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h5id="树的遍历方式总体分为两类深度优先搜索dfs广度优先搜索bfs">树的遍历方式总体分为两类：深度优先搜索(DFS)、广度优先搜索(BFS)</h5><ul><li>常见DFS：先序遍历、中序遍历、后序遍历</li><li>常见BFS：层序遍历</li></ul><h4 id="后序遍历递归">后序遍历(递归)</h4><p>树的深度等于左子树深度和右子树深度最大值加1</p><p>算法流程：</p><p>终止：当root为空，表明越过叶节点，返回深度0</p><p>递归：计算root的左子树深度，即调用<spanclass="math inline">\(函数(root.left)\)</span>；计算root的右子树深度，即调用<spanclass="math inline">\(函数(root.right)\)</span></p><p>返回：返回节点树的深度，即<spanclass="math inline">\(max(函数(root.left),函数(root.right))+1\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(self.maxDepth(root.left), self.maxDepth(root.right)) + <span class="hljs-number">1</span><br>        <br></code></pre></td></tr></table></figure><h4 id="层序遍历队列">层序遍历(队列)</h4><p>每遍历一层，深度加1，直至遍历完成</p><p>算法流程：</p><ul><li>当root为空，返回深度0</li><li>初始化队列que(加入根节点)，深度res=0</li><li>遍历：当que为空时结束。<ul><li>初始化一个空列表tmp，用于临时存储下一层的节点。</li><li>遍历que中的各节点，将其左右子节点加入tmp</li><li>令que=tmp</li><li>深度加1</li></ul></li><li>返回res</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        res = <span class="hljs-number">0</span><br>        que = [root]<br>        <span class="hljs-keyword">while</span> que:<br>            tmp = []<br>            <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> que:<br>                <span class="hljs-keyword">if</span> node.left: tmp.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right: tmp.append(node.right)<br>            <br>            que = tmp<br>            res += <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> res<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树中序遍历</title>
    <link href="/2024/03/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2024/03/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树中序遍历">二叉树中序遍历</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403301725002.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="递归">递归</h4><p>不断先询问左子树，然后将根节点值加入答案，再询问右子树，直到节点为空结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        self.inorder(root,res)<br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorder</span>(<span class="hljs-params">self,root,res</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span><br>        self.inorder(root.left,res)<br>        res.append(root.val)<br>        self.inorder(root.right,res)<br></code></pre></td></tr></table></figure><h4 id="迭代栈">迭代（栈）</h4><p>定义一个栈，将树的左节点依次入栈，当左节点为空时，弹出栈顶元素，将该元素值加入列表，遍历右节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        stack = []<br>        <span class="hljs-keyword">while</span> root <span class="hljs-keyword">or</span> stack:<br>            <span class="hljs-keyword">if</span> root:<br>                stack.append(root)<br>                root =root.left<br>            <span class="hljs-keyword">else</span>:<br>                root = stack.pop()<br>                res.append(root.val)<br>                root = root.right<br><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k个一组翻转链表</title>
    <link href="/2024/03/30/k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/03/30/k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="k个一组翻转链表">K个一组翻转链表</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403301523445.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="局部反转链表">局部反转链表</h4><p>根据题目要求，我们可以将改问题分解成一个个局部反转链表。需要将链表节点按k个一组分组，使用一个指针head依次指向每组的头节点，该指针每次向前移动k步，直到结尾，对于每个分组，判断分组长度是否大于等于k，是则翻转，不是就不需要。</p><ul><li>对于每一个子链表，除了翻转链表本身外，还需要将子链表的头部和上一个子链表尾部链接，将尾部与下一个子链表头部链接。因此，在翻转完链表后，需要得到子链表的头尾节点，以及上、下一个的子链表的头尾节点。</li><li>对于第一个子链表，我们可以设立一个哨兵节点与头节点链接。最后返回结果返回该哨兵节点的下一个即可。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseKGroup</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        dummy = ListNode(-<span class="hljs-number">1</span>)<br>        dummy.<span class="hljs-built_in">next</span> = head<br>        pre = dummy<br>        <span class="hljs-keyword">while</span> head:<br>            tail = pre<br><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>                tail =tail.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tail:<br>                    <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br>            nex = tail.<span class="hljs-built_in">next</span><br>            head, tail = self.reverseList(head,tail)<br>            pre.<span class="hljs-built_in">next</span> = head<br>            tail.<span class="hljs-built_in">next</span> = nex<br>            pre = tail<br>            head = tail.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br>            <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head, tail</span>):<br>        prev = tail.<span class="hljs-built_in">next</span><br>        p = head<br>        <span class="hljs-keyword">while</span> prev != tail:<br>            nex = p.<span class="hljs-built_in">next</span><br>            p.<span class="hljs-built_in">next</span> = prev<br>            prev = p <br>            p =nex<br>        <span class="hljs-keyword">return</span> tail, head<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LRU缓存机制</title>
    <link href="/2024/03/29/LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <url>/2024/03/29/LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="lru缓存机制">LRU缓存机制</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403292126511.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="哈希表双向链表">哈希表+双向链表</h4><ul><li>双向链表按照被使用的顺序存储键值对，靠近头部的键值为最近使用，靠近尾部的键值是最久未使用。</li><li>哈希表通过存储数据的键映射至双向链表的位置。</li></ul><p>算法流程：首先使用哈希表进行定位，找出缓存项在双向链表中的位置，随后将其移动至双向链表头部。</p><p>对于get操作，首先判断key是否存在：若存在，则key对应节点为最近被使用节点；若不存在则返回-1。</p><p>对于put，同样先判断key是否存在：</p><ul><li>若key不存在，根据传入key和value创建新节点，并添加至双向链表头部，同时将key和该节点添进哈希表中。然后判断双向链表的结点是否超出容量，如果超出则删除双向链表尾部结点，并清除哈希表中的对应项。</li><li>若key存在，先通过哈希表定位，再将对应节点值更新为value，将节点移动到双向链表头部。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DualNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key=<span class="hljs-number">0</span>, value = <span class="hljs-number">0</span></span>):<br>        self.key = key<br>        self.value =value<br>        self.prev = <span class="hljs-literal">None</span><br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, capacity: <span class="hljs-built_in">int</span></span>):<br>        self.<span class="hljs-built_in">dict</span> = &#123;&#125;<br>        self.<span class="hljs-built_in">len</span> = capacity<br>        self.head = DualNode()<br>        self.tail = DualNode()<br>        self.head.<span class="hljs-built_in">next</span> = self.tail<br>        self.tail.prev = self.head<br>        self.size = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.<span class="hljs-built_in">dict</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        node = self.<span class="hljs-built_in">dict</span>[key]<br>        self.movetoHead(node)<br>        <span class="hljs-keyword">return</span> node.value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">int</span>, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.<span class="hljs-built_in">dict</span>:<br>            node = DualNode(key,value)<br>            self.<span class="hljs-built_in">dict</span>[key] = node<br>            self.addtoHead(node)<br>            self.size += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> self.size &gt;self.<span class="hljs-built_in">len</span>:<br>                removed = self.removeTail()<br>                self.<span class="hljs-built_in">dict</span>.pop(removed.key)<br>                self.size -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            node = self.<span class="hljs-built_in">dict</span>[key]<br>            node.value = value<br>            self.movetoHead(node)<br>            <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addtoHead</span>(<span class="hljs-params">self,node</span>):<br>        node.prev = self.head<br>        node.<span class="hljs-built_in">next</span> = self.head.<span class="hljs-built_in">next</span><br>        self.head.<span class="hljs-built_in">next</span>.prev = node<br>        self.head.<span class="hljs-built_in">next</span> = node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNode</span>(<span class="hljs-params">self,node</span>):<br>        node.prev.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span><br>        node.<span class="hljs-built_in">next</span>.prev = node.prev<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">movetoHead</span>(<span class="hljs-params">self,node</span>):<br>        self.removeNode(node)<br>        self.addtoHead(node)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeTail</span>(<span class="hljs-params">self</span>):<br>        node = self.tail.prev <br>        self.removeNode(node)<br>        <span class="hljs-keyword">return</span> node      <br><br><br><br><br><span class="hljs-comment"># Your LRUCache object will be instantiated and called as such:</span><br><span class="hljs-comment"># obj = LRUCache(capacity)</span><br><span class="hljs-comment"># param_1 = obj.get(key)</span><br><span class="hljs-comment"># obj.put(key,value)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序链表</title>
    <link href="/2024/03/29/%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/03/29/%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="排序链表">排序链表</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403291644764.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="归并排序递归法">归并排序（递归法）</h4><p>当输入<span class="math inline">\(head.next==None\)</span>时，直接返回None</p><p>该方法有两个环节：</p><p>分割（快慢指针）：找到当前链表中点，并从中点将链表断开。当<spanclass="math inline">\(head.next==None\)</span>时，说明只剩一个节点，直接返回该节点。</p><p>合并：将两个有序链表合并成一个有序列表。利用双指针进行合并：设立哨兵节点h作为头部，left，right分别指向两个链表头部，比较指针处节点值大小，从小到大加入合并链表头部，两指针交替进行，直到链表添加完成，返回哨兵节点的下个节点。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403291644837.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortList</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> head.<span class="hljs-built_in">next</span>: <span class="hljs-keyword">return</span> head<br>        slow, fast = head,head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> fast <span class="hljs-keyword">and</span> fast.<span class="hljs-built_in">next</span>:<br>            slow = slow.<span class="hljs-built_in">next</span><br>            fast = fast.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        mid, slow.<span class="hljs-built_in">next</span> = slow.<span class="hljs-built_in">next</span>, <span class="hljs-literal">None</span><br><br>        left, right = self.sortList(head), self.sortList(mid)<br>        h = res=ListNode(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">while</span> left <span class="hljs-keyword">and</span> right:<br>            <span class="hljs-keyword">if</span> left.val &lt;= right.val: h.<span class="hljs-built_in">next</span>,left = left, left.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>: h.<span class="hljs-built_in">next</span>, right = right, right.<span class="hljs-built_in">next</span><br>            h = h.<span class="hljs-built_in">next</span><br>        <br>        h.<span class="hljs-built_in">next</span> = left <span class="hljs-keyword">if</span> left <span class="hljs-keyword">else</span> right<br><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br><br></code></pre></td></tr></table></figure><h4 id="归并排序自底向上还没看懂">归并排序（自底向上）还没看懂</h4><p>未完待续</p>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机链表的复制</title>
    <link href="/2024/03/28/%E9%9A%8F%E6%9C%BA%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <url>/2024/03/28/%E9%9A%8F%E6%9C%BA%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="随机链表的复制深拷贝">随机链表的复制(深拷贝)</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403282234744.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="哈希表">哈希表</h4><p>建立一个哈希表，key值为原链表结点，value为新链表结点，根据原链表构建新链表的引用指向，最后返回新链表的头节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># Definition for a Node.</span><br><span class="hljs-string">class Node:</span><br><span class="hljs-string">    def __init__(self, x: int, next: &#x27;Node&#x27; = None, random: &#x27;Node&#x27; = None):</span><br><span class="hljs-string">        self.val = int(x)</span><br><span class="hljs-string">        self.next = next</span><br><span class="hljs-string">        self.random = random</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copyRandomList</span>(<span class="hljs-params">self, head: <span class="hljs-string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="hljs-string">&#x27;Optional[Node]&#x27;</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        dic = &#123;&#125;<br>        cur = head<br>        <span class="hljs-keyword">while</span> cur:<br>            dic[cur] = Node(cur.val)<br>            cur = cur.<span class="hljs-built_in">next</span><br>        cur = head<br>        <span class="hljs-keyword">while</span> cur:<br>            dic[cur].<span class="hljs-built_in">next</span> = dic.get(cur.<span class="hljs-built_in">next</span>)<br>            dic[cur].random = dic.get(cur.random)<br>            cur= cur.<span class="hljs-built_in">next</span><br>        <br>        <span class="hljs-keyword">return</span> dic[head]<br><br></code></pre></td></tr></table></figure><h4 id="拼接拆分">拼接+拆分</h4><p>考虑构建<spanclass="math inline">\(原节点1\rightarrow新节点1\rightarrow原节点2\rightarrow新节点2…\)</span>的拼接链表，这样在访问原节点的random指向节点的同时可以找到对应新节点的random指向节点。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br># Definition <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> Node.<br>class Node:<br>    def __init__(self, <span class="hljs-keyword">x</span>: <span class="hljs-keyword">int</span>, <span class="hljs-keyword">next</span>: <span class="hljs-string">&#x27;Node&#x27;</span> = None, random: <span class="hljs-string">&#x27;Node&#x27;</span> = None):<br>        self.val = <span class="hljs-keyword">int</span>(<span class="hljs-keyword">x</span>)<br>        self.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">next</span><br>        self.random = random<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br>class Solution:<br>    def copyRandomList(self, head: <span class="hljs-string">&#x27;Node&#x27;</span>) -&gt; <span class="hljs-string">&#x27;Node&#x27;</span>:<br>        <span class="hljs-keyword">if</span> not head: <span class="hljs-keyword">return</span><br>        cur = head<br>        # <span class="hljs-number">1</span>. 复制各节点，并构建拼接链表<br>        <span class="hljs-keyword">while</span> cur:<br>            tmp = Node(cur.val)<br>            tmp.<span class="hljs-keyword">next</span> = cur.<span class="hljs-keyword">next</span><br>            cur.<span class="hljs-keyword">next</span> = tmp<br>            cur = tmp.<span class="hljs-keyword">next</span><br>        # <span class="hljs-number">2</span>. 构建各新节点的 random 指向<br>        cur = head<br>        <span class="hljs-keyword">while</span> cur:<br>            <span class="hljs-keyword">if</span> cur.random:<br>                cur.<span class="hljs-keyword">next</span>.random = cur.random.<span class="hljs-keyword">next</span><br>            cur = cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span><br>        # <span class="hljs-number">3</span>. 拆分两链表<br>        cur = <span class="hljs-keyword">res</span> = head.<span class="hljs-keyword">next</span><br>        <span class="hljs-keyword">pre</span> = head<br>        <span class="hljs-keyword">while</span> cur.<span class="hljs-keyword">next</span>:<br>            <span class="hljs-keyword">pre</span>.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">pre</span>.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span><br>            cur.<span class="hljs-keyword">next</span> = cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span><br>            <span class="hljs-keyword">pre</span> = <span class="hljs-keyword">pre</span>.<span class="hljs-keyword">next</span><br>            cur = cur.<span class="hljs-keyword">next</span><br>        <span class="hljs-keyword">pre</span>.<span class="hljs-keyword">next</span> = None # 单独处理原链表尾节点<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span>      # 返回新链表头节点<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两两交换链表中的结点</title>
    <link href="/2024/03/28/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/"/>
    <url>/2024/03/28/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="两两交换链表中的节点">两两交换链表中的节点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403281648993.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="迭代">迭代</h4><p>设置一个头节点，和三个指针<spanclass="math inline">\(tmp,n1,n2\)</span>，根据题目要求要将<spanclass="math inline">\(tmp \rightarrow n1 \rightarrown2\)</span>转变成<span class="math inline">\(tmp \rightarrow n2\rightarrow n1\)</span>,当tmp后面没有节点或只有一个节点，则结束交换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">swapPairs</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        res = ListNode(-<span class="hljs-number">1</span>)<br>        res.<span class="hljs-built_in">next</span> = head<br>        tmp =res<br><br>        <span class="hljs-keyword">while</span> tmp.<span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> tmp.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>:<br>            n1 = tmp.<span class="hljs-built_in">next</span><br>            n2 = tmp.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            tmp.<span class="hljs-built_in">next</span> = n2<br>            n1.<span class="hljs-built_in">next</span> = n2.<span class="hljs-built_in">next</span><br>            n2.<span class="hljs-built_in">next</span> = n1<br>            tmp = n1<br><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br><br></code></pre></td></tr></table></figure><h4 id="递归">递归</h4><p>终止条件为链表中没有节点或者只有一个节点，如果链表中至少有两个节点，在两两交换链表中的节点后，需要更新节点之间的指针关系，就可以完成题目要求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">swapPairs</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> head.<span class="hljs-built_in">next</span>:<br>            <span class="hljs-keyword">return</span> head<br>        newHead = head.<span class="hljs-built_in">next</span><br>        head.<span class="hljs-built_in">next</span> = self.swapPairs(newHead.<span class="hljs-built_in">next</span>)<br>        newHead.<span class="hljs-built_in">next</span> = head<br>        <span class="hljs-keyword">return</span> newHead<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>删除链表倒数第N个结点</title>
    <link href="/2024/03/28/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <url>/2024/03/28/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="删除链表的倒数第n个结点">删除链表的倒数第N个结点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403281028914.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="辅助空间法">辅助空间法</h4><p>将链表的值存入数组中，跳过对应节点的值，将剩余值存入新的链表，最终返回新链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNthFromEnd</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        res = ListNode(-<span class="hljs-number">1</span>)<br>        dummy = res<br>        h_val = []<br>        <span class="hljs-keyword">while</span> head:<br>            h_val.append(head.val)<br>            head = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(h_val)):<br>        <br>            <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(h_val) - n:<br>                <span class="hljs-keyword">continue</span><br>            res.<span class="hljs-built_in">next</span> = ListNode(h_val[i])<br>            res = res.<span class="hljs-built_in">next</span><br>            <br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br><br></code></pre></td></tr></table></figure><h4 id="双指针">双指针</h4><p>设置双指针a、b，当b指向末尾None，两个指针间隔元素为n时，删除a的下一个指针即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNthFromEnd</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        res = ListNode(-<span class="hljs-number">1</span>)<br>        res.<span class="hljs-built_in">next</span> = head<br>        a,b = res,res<br><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            b= b.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> b <span class="hljs-keyword">and</span> b.<span class="hljs-built_in">next</span>:<br>            a = a.<span class="hljs-built_in">next</span><br>            b = b.<span class="hljs-built_in">next</span><br>        a.<span class="hljs-built_in">next</span> = a.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小覆盖子串</title>
    <link href="/2024/03/19/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
    <url>/2024/03/19/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="最小覆盖子串">最小覆盖子串</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403192047546.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="滑动窗口">滑动窗口</h4><p>用<spanclass="math inline">\(i、j\)</span>表示滑动窗口的左右边界，通过改变<spanclass="math inline">\(i，j\)</span>去增大或收缩滑动窗口，当窗口包含的元素满足调节，记录下此时滑动窗口的长度，这些长度中的最小值就是要求的结果</p><ul><li>增加<spanclass="math inline">\(j\)</span>使得窗口增大，直到窗口包含了t的所有元素。</li><li>增加<spanclass="math inline">\(i\)</span>使得窗口缩小，将不必要的元素排除在外，直到碰到一个必须包含的元素，记录此时滑动窗口的长度，并保存最小值。</li><li>令i继续增加位置，回到第一步，寻找心的满足条件的滑动窗口，直到j超出了字符串s的范围。</li></ul><p>可以用一个字典<spanclass="math inline">\(dict\)</span>来表示当前滑动窗口中需要的各元素的数量，用t中的元素初始化这个<spanclass="math inline">\(dict\)</span>。当滑动窗口中包含某个元素，就令<spanclass="math inline">\(dic\)</span>t中该元素数量减1；当窗口移除某个元素，就让<spanclass="math inline">\(dict\)</span>中该元素的数量加1。</p><p>如果每次通过遍历<spanclass="math inline">\(dict\)</span>来判断滑动窗口是否包含了所有元素会耗费<spanclass="math inline">\(O(k)\)</span>的时间复杂度，我们可以通过一个额外变量<spanclass="math inline">\(dictCnt\)</span>来记录所需元素的总数量，通过该变量的大小来判断窗口是否满足条件。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403192100856.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">minWindow</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        need=collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> t:<br>            need[c]+=<span class="hljs-number">1</span><br>        needCnt=<span class="hljs-built_in">len</span>(t)<br>        i=<span class="hljs-number">0</span><br>        res=(<span class="hljs-number">0</span>,<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>))<br>        <span class="hljs-keyword">for</span> j,c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>            <span class="hljs-keyword">if</span> need[c]&gt;<span class="hljs-number">0</span>:<br>                needCnt-=<span class="hljs-number">1</span><br>            need[c]-=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> needCnt==<span class="hljs-number">0</span>:       <span class="hljs-comment">#步骤一：滑动窗口包含了所有T元素</span><br>                <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:      <span class="hljs-comment">#步骤二：增加i，排除多余元素</span><br>                    c=s[i] <br>                    <span class="hljs-keyword">if</span> need[c]==<span class="hljs-number">0</span>:<br>                        <span class="hljs-keyword">break</span><br>                    need[c]+=<span class="hljs-number">1</span><br>                    i+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> j-i&lt;res[<span class="hljs-number">1</span>]-res[<span class="hljs-number">0</span>]:   <span class="hljs-comment">#记录结果</span><br>                    res=(i,j)<br>                need[s[i]]+=<span class="hljs-number">1</span>  <span class="hljs-comment">#步骤三：i增加一个位置，寻找新的满足条件滑动窗口</span><br>                needCnt+=<span class="hljs-number">1</span><br>                i+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">if</span> res[<span class="hljs-number">1</span>]&gt;<span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">else</span> s[res[<span class="hljs-number">0</span>]:res[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>]    <span class="hljs-comment">#如果res始终没被更新过，代表无满足条件的结果</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索二维矩阵</title>
    <link href="/2024/03/17/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/"/>
    <url>/2024/03/17/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="搜索二维矩阵">搜索二维矩阵</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403172222355.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="贪心">贪心</h4><p>利用矩阵从左到右、从上到下依次递增的特性，可以发现矩阵的结构类似于二叉搜索树。根节点对应矩阵左下角和右上角的元素，若以矩阵左下角元素为标志数flag：</p><ul><li>若<span class="math inline">\(flag&gt;target\)</span>,则<spanclass="math inline">\(targe\)</span>t一定在<spanclass="math inline">\(flag\)</span>所在行的上方，<spanclass="math inline">\(flag\)</span>所在行可被消去</li><li>若<span class="math inline">\(flag&lt;target\)</span>,则<spanclass="math inline">\(target\)</span>一定在<spanclass="math inline">\(flag\)</span>所在列的右方，<spanclass="math inline">\(flag\)</span>​所在列可被消去</li></ul><p>从矩阵左下角元素开始遍历，与目标值进行比对：</p><ul><li>当<spanclass="math inline">\(matrix[i][j]&gt;target\)</span>时，执行<spanclass="math inline">\(i--\)</span>,消去第i行元素</li><li>当<spanclass="math inline">\(matrix[i][j]&lt;target\)</span>时，执行<spanclass="math inline">\(j++\)</span>,消去第j列元素</li><li>当<spanclass="math inline">\(matrix[i][j]=target\)</span>时，返回True</li></ul><p>若行或列索引越界，则代表矩阵中无目标值，返回False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchMatrix</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        i, j = <span class="hljs-built_in">len</span>(matrix) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j &lt; <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>]):<br>            <span class="hljs-keyword">if</span> matrix[i][j] &gt; target: i -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> matrix[i][j] &lt; target: j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>旋转图象</title>
    <link href="/2024/03/17/%E6%97%8B%E8%BD%AC%E5%9B%BE%E8%B1%A1/"/>
    <url>/2024/03/17/%E6%97%8B%E8%BD%AC%E5%9B%BE%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="旋转图象">旋转图象</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403162315069.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="辅助存储">辅助存储</h4><p>根据旋转示意不难看出：</p><ul><li>原矩阵第i行元素旋转到第n-1-i列</li><li>原矩阵第j列元素旋转到第j行</li></ul><p>该方法存在问题：写入一个元素后，原矩阵的元素会被覆盖，导致被覆盖的元素无法写入到旋转后的位置，所以需要一个辅助矩阵进行元素存储。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify matrix in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        row = <span class="hljs-built_in">len</span>(matrix)<br>        col = <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>        tmp = [[matrix[r][c] <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(col)]<span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row)]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(col):<br>                matrix[i][j] = tmp[row-<span class="hljs-number">1</span>-j][i]<br></code></pre></td></tr></table></figure><p>上述方法需要遍历所有元素以及创建新的辅助矩阵，因此时间复杂度和空间复杂度都是<spanclass="math inline">\(N^2\)</span></p><h4 id="原地修改">原地修改</h4><p>以矩阵四个角的元素为例，从左上角开始顺时针元素一次为A,B,C,D,旋转90°等价于依次执行<spanclass="math inline">\(D\to A,A\to B,B\to C,C\toD\)</span>。第一次覆盖会让A元素丢失，需要一个tmp预先存储A，旋转的操作就变为<spanclass="math inline">\(A\leftarrow D\leftarrow C\leftarrow B\leftarrowtmp\)</span>。</p><p>从循环流程来看，当矩阵大小<spanclass="math inline">\(n\)</span>为偶数时，取前<spanclass="math inline">\(\frac{n}2\)</span>行、前<spanclass="math inline">\(\frac{n}2\)</span>列的元素为起始点；当矩阵大小n为奇数时，取前<spanclass="math inline">\(\frac{n}2\)</span>行、前<spanclass="math inline">\(\frac{n+1}2\)</span>列的元素为起始点。最后再结合上一个方法的旋转公式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        n = <span class="hljs-built_in">len</span>(matrix)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n // <span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((n + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span>):<br>                tmp = matrix[i][j]<br>                matrix[i][j] = matrix[n - <span class="hljs-number">1</span> - j][i]<br>                matrix[n - <span class="hljs-number">1</span> - j][i] = matrix[n - <span class="hljs-number">1</span> - i][n - <span class="hljs-number">1</span> - j]<br>                matrix[n - <span class="hljs-number">1</span> - i][n - <span class="hljs-number">1</span> - j] = matrix[j][n - <span class="hljs-number">1</span> - i]<br>                matrix[j][n - <span class="hljs-number">1</span> - i] = tmp<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>螺旋矩阵</title>
    <link href="/2024/03/15/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2024/03/15/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="螺旋矩阵">螺旋矩阵</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403152349839.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="设定边界">设定边界</h4><ul><li>当矩阵为空时，直接返回列表</li><li>初始化矩阵左、右、上、下四个边界</li><li>从左向右、从上向下、从右向左、从下向上四个方向循环打印。</li></ul><p>​ 根据边界打印，将元素按顺序添加到列表中；</p><p>​ 边界向内收缩1；</p><p>​ 判断边界是否相遇，若打印完毕则跳出</p><ul><li>返回列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">spiralOrder</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> matrix: <span class="hljs-keyword">return</span> []<br>        l, r, t, b, res = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>]) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(matrix) - <span class="hljs-number">1</span>, []<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l, r + <span class="hljs-number">1</span>): res.append(matrix[t][i]) <span class="hljs-comment"># left to right</span><br>            t += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> t &gt; b: <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t, b + <span class="hljs-number">1</span>): res.append(matrix[i][r]) <span class="hljs-comment"># top to bottom</span><br>            r -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> l &gt; r: <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r, l - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): res.append(matrix[b][i]) <span class="hljs-comment"># right to left</span><br>            b -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> t &gt; b: <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b, t - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): res.append(matrix[i][l]) <span class="hljs-comment"># bottom to top</span><br>            l += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> l &gt; r: <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> res<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵置零</title>
    <link href="/2024/03/13/%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/"/>
    <url>/2024/03/13/%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="矩阵置零">矩阵置零</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403122359373.png"alt="图一" /><figcaption aria-hidden="true">图一</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="两次扫matrix">两次扫matrix</h4><p>第一遍记录数组中0的坐标，第二遍置零</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setZeroes</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify matrix in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        lines = []<br>        rows = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])):<br>                <span class="hljs-keyword">if</span> matrix[i][j] == <span class="hljs-number">0</span>:<br>                    lines.append(j)<br>                    rows.append(i)<br> <br>        <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix)):<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                matrix[h][line] = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:<br>            matrix[row] = [<span class="hljs-number">0</span>]*<span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>                <br></code></pre></td></tr></table></figure><h4 id="用o1空间">用O(1)空间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setZeroes</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify matrix in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        flag_col = <span class="hljs-literal">False</span><br>        row = <span class="hljs-built_in">len</span>(matrix)<br>        col = <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>            <span class="hljs-keyword">if</span> matrix[i][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>: flag_col = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,col):<br>                <span class="hljs-keyword">if</span> matrix[i][j] == <span class="hljs-number">0</span>:<br>                    matrix[i][<span class="hljs-number">0</span>] = matrix[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span><br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(col - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> matrix[i][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> matrix[<span class="hljs-number">0</span>][j] == <span class="hljs-number">0</span>:<br>                    matrix[i][j] = <span class="hljs-number">0</span><br><br>            <span class="hljs-keyword">if</span> flag_col == <span class="hljs-literal">True</span>: matrix[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>            <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自身以外数组乘积</title>
    <link href="/2024/03/10/%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E4%B9%98%E7%A7%AF/"/>
    <url>/2024/03/10/%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E4%B9%98%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="除自身以外数组的乘积">除自身以外数组的乘积</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403100032625.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="上三角下三角">上三角+下三角</h4><ul><li>初始化数组<span class="math inline">\(ans\)</span>，令<spanclass="math inline">\(ans[0]=1\)</span>,辅助变量<spanclass="math inline">\(tmp=1\)</span></li><li>计算<spanclass="math inline">\(ans[i]\)</span>的下三角各元素的乘积，直接加入<spanclass="math inline">\(ans[i]\)</span></li><li>计算<spanclass="math inline">\(ans[i]\)</span>的上三角各元素的乘积等于<spanclass="math inline">\(tmp\)</span>，乘入<spanclass="math inline">\(ans[i]\)</span></li><li><span class="math inline">\(ans\)</span>即为所得</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">productExceptSelf</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        ans, tmp = [<span class="hljs-number">1</span>] * <span class="hljs-built_in">len</span>(nums), <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):<br>            ans[i] = ans[i - <span class="hljs-number">1</span>] * nums[i - <span class="hljs-number">1</span>] <span class="hljs-comment"># 下三角</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            tmp *= nums[i + <span class="hljs-number">1</span>]                <span class="hljs-comment"># 上三角</span><br>            ans[i] *= tmp                     <span class="hljs-comment"># 下三角 * 上三角</span><br>        <span class="hljs-keyword">return</span> ans<br>            <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轮转数组</title>
    <link href="/2024/03/08/%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <url>/2024/03/08/%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="轮转数组">轮转数组</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403061222371.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="辅助空间法">辅助空间法</h4><ul><li><spanclass="math inline">\(k=k\%n\)</span>,将k限定在[0,n-1]范围内。</li><li>用<span class="math inline">\(i\)</span>表示轮转前位置，<spanclass="math inline">\(i^`\)</span>​表示轮转后位置:</li></ul><p><span class="math display">\[i&#39;=(i+k)\%n=\begin{cases}i+k,\quad&amp;i+k\leqn-1,\text{即}i\in[0,n-k-1]\\i+k-n,\quad&amp;i+k\geqn,\text{即}i\in[n-k,n-1]\end{cases}\]</span></p><ul><li>针对以上两端区间分别处理，用临时向量进行存储第二段区间。用<spanclass="math inline">\(i\)</span>从<spanclass="math inline">\(n-k-1\)</span>向0遍历，将<spanclass="math inline">\(i+k\)</span>的位置更新为位置<spanclass="math inline">\(i\)</span>的值。需要注意的是顺序从右向左。</li><li>最后再把临时向量赋值到[0,k-1]。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        k %= n<br>        <span class="hljs-comment"># [n-k-1,n-1]</span><br>        tmp = nums[n - k:].copy()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - k - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            nums[i + k] = nums[i]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, k):<br>            nums[i] = tmp[i]<br></code></pre></td></tr></table></figure><h4 id="双指针翻转数组">双指针+翻转数组</h4><p>先整体翻转数组，再分别翻转[0,k-1]和[k,n-1]的区间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], left, right</span>) -&gt; <span class="hljs-literal">None</span>:<br>    i, j = left, right<br>    <span class="hljs-keyword">while</span> i &lt; j:<br>        nums[i], nums[j] = nums[j], nums[i]<br>        i+=<span class="hljs-number">1</span><br>        j-=<span class="hljs-number">1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        k %= n<br>        reverse(nums, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)<br>        reverse(nums, <span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>)<br>        reverse(nums, k, n - <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><h4 id="裴蜀定理还没看懂">裴蜀定理（还没看懂</h4>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transformer</title>
    <link href="/2024/03/05/Transformer/"/>
    <url>/2024/03/05/Transformer/</url>
    
    <content type="html"><![CDATA[<h1 id="transformer学习笔记">Transformer学习笔记</h1><h2 id="架构">1、架构</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403052131299.jpeg" alt="图1" style="zoom: 33%;" /></p><p>上图是<spanclass="math inline">\(Transformer\)</span>的详细架构，可以从中抽象出基础模块进行理解：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403051543793.png" alt="图2" style="zoom: 67%;" /></p><p>以翻译任务为例，可以将<spanclass="math inline">\(Transform\)</span>理解成一个黑盒，输入模型一句话，输出能够得到一个翻译结果。Transform是一个<spanclass="math inline">\(Seq2Seq\)</span>模型（<spanclass="math inline">\(Encoder-Decoder\)</span>框架的模型），$Encoder和Decoder $默认是有6层：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403051605301.png" alt="图3" style="zoom:67%;" /></p><p>这里<spanclass="math inline">\(Encoders\)</span>的输出会和每一层的<spanclass="math inline">\(Decoder\)</span>进行结合，原因是Encoder向每层的Decoder输入KV，Decoder产生的Q 从Encoder的KV中查询信息。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403051620772.png"alt="图4" /><figcaption aria-hidden="true">图4</figcaption></figure><h2 id="encoder">2、Encoder</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403052124785.png"alt="图5" /><figcaption aria-hidden="true">图5</figcaption></figure><p>从图5中可以看到，<spanclass="math inline">\(Encoder\)</span>包含两个子层：</p><ul><li>第一个是Multi-Head self-Attention，用于计算输入的<spanclass="math inline">\(self-attention\)</span>；</li></ul><p>残差模块表示：<imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403051917053.png"alt="图6" /></p><p>残差结构的作用：避免出现梯度消失的情况，由图5所示，网络在反向传播时，错误信号可以不经过任何中间权重矩阵变换直接传播到低层，一定程度上可以缓解梯度消失问题。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403051914487.png"alt="图7" /><figcaption aria-hidden="true">图7</figcaption></figure><p>LayerNorm作用：保证数据特征分布的稳定性，并且可以加速模型的收敛。</p><h4 id="为什么transformer用layer-norm">为什么Transformer用LayerNorm</h4><p>Layer Norm主要解决的是内部变量转移(Internal CovariateShift)的问题，在传统深度神经网络中，通常采用批归一化(BatchNormalization)来解决这个问题，<strong>但是在Transformer中，每个位置的输入都是高维变量，BatchNorm会破坏向量的位置信息。LayerNorm对每个样本单独计算均值和方差，不会破坏向量的位置信息。</strong></p><ul><li>第二个是简单的前馈神经网络层。每个层的输出都会通过残差网络：<spanclass="math inline">\(LayerNorm (x + Sub_layer(x))\)</span>。</li></ul><p>Feed Forward作用：</p><h2 id="decoder">3、Decoder</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404112136725.png" alt="图8" style="zoom:80%;" /></p><p>Decoder包含三个层：两个Multi-Head self-Attention 层和一个FeedForward层</p><h4 id="第一个-multi-head-attention">第一个 Multi-Head Attention</h4><p>该层采用了 Masked 操作，因为在翻译的过程中是顺序翻译的，即翻译完第 i个单词，才可以翻译第 i+1 个单词。通过 Masked 操作可以防止第 i 个单词知道i+1 个单词之后的信息。</p><ul><li>输入Decoder矩阵和对应的Mask矩阵</li></ul><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404112137260.png"alt="图9" /><figcaption aria-hidden="true">图9</figcaption></figure><ul><li>与上述self-attention一样</li></ul><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404112138337.png"alt="图10" /><figcaption aria-hidden="true">图10</figcaption></figure><ul><li>在得到最终<span class="math inline">\(QK^T\)</span>之后需要进行<spanclass="math inline">\(Softmax\)</span>，在<spanclass="math inline">\(Softmax\)</span>之前需要用Mask矩阵遮挡每一个单词之后的信息</li></ul><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404112140349.png"alt="图11" /><figcaption aria-hidden="true">图11</figcaption></figure><ul><li>后续步骤和Encoder的self-attention模块一致</li></ul><h4 id="第二个-multi-head-attention">第二个 Multi-Head Attention</h4><p>第二个 Multi-Head Attention 变化不大， 主要的区别在于其中Self-Attention 的 <strong>K, V</strong>矩阵不是使用 上一个 Decoder block的输出计算的，而是使用 <strong>Encoder 的编码信息矩阵 C</strong>计算的。这样做的好处是在 Decoder 的时候，每一位单词都可以利用到 Encoder所有单词的信息。</p><h4 id="softmax-预测输出单词">Softmax 预测输出单词</h4><p>最后的部分是利用 Softmax预测下一个单词，在之前的网络层我们可以得到一个最终的输出 Z，因为 Mask的存在，使得单词 0 的输出 Z0 只包含单词 0 的信息，如下：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202404112145235.png"alt="图12" /><figcaption aria-hidden="true">图12</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>八股</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合并区间</title>
    <link href="/2024/03/05/%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/"/>
    <url>/2024/03/05/%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="合并区间">合并区间</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403051053341.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="排序">排序</h4><p>第一步将列表中的区间按左端点的大小做升序排序，然后将第一个区间加入<spanclass="math inline">\(ans\)</span>数组中,并按顺序依次处理之后的区间：</p><ul><li>当前区间的左端点在<spanclass="math inline">\(ans\)</span>数组中最后一个区间的右端点之后，那们二者不会重合，直接将此区间加入<spanclass="math inline">\(ans\)</span>数组的末尾；</li><li>反之二者重合，用当前区间的右端点更新<spanclass="math inline">\(ans\)</span>数组中最后一个区间的右端点，值为二者的较大值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, intervals: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        intervals = <span class="hljs-built_in">sorted</span>(intervals,key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>])<br>        ans = []<br><br>        <span class="hljs-keyword">for</span> interval <span class="hljs-keyword">in</span> intervals:<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ans <span class="hljs-keyword">or</span> ans[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&lt;interval[<span class="hljs-number">0</span>]:<br>                ans.append(interval)<br>            <span class="hljs-keyword">else</span>:<br>                ans[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(ans[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],interval[<span class="hljs-number">1</span>])<br>        <br>        <span class="hljs-keyword">return</span> ans<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最大子数组和</title>
    <link href="/2024/03/04/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <url>/2024/03/04/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="最大子数组和">最大子数组和</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202403032305388.png"alt="image-20240303230430889" /><figcaption aria-hidden="true">image-20240303230430889</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="动态规划">动态规划</h4><p>第一步需要理解题意，找出最大连续子数组和，连续是一个关键点。题目只要求返回结果，不要求得到最大的连续子数组，可以用动态规划来解决。</p><p>第二步是如何定义子问题，根据不确定因素来清楚的定义子问题，从而让复杂的问题简单化。</p><p>首先无法知道最大的连续子数组一定会有某个数，因此可以求出所有经过输入数组的某一个数的连续子数组的最大和，例如输入数组为<spanclass="math inline">\([-2,1,-3,4,-1,2,1,-5,4]\)</span>：</p><ul><li>经过<spanclass="math inline">\(-2\)</span>的连续子数组的最大和是多少</li><li>经过<spanclass="math inline">\(1\)</span>的连续子数组的最大和是多少</li><li>……</li></ul><p>上述各个子问题之间的联系很难看出，同时在子问题中无法确定每个数在自己的连续子数组中是第几个元素，不如将子问题定义为：</p><ul><li>以<spanclass="math inline">\(-2\)</span>结尾的连续子数组的最大和是多少</li><li>以<spanclass="math inline">\(1\)</span>结尾的连续子数组的最大和是多少</li><li>……</li></ul><p>以子问题<span class="math inline">\(1，2\)</span>为例，问题<spanclass="math inline">\(1\)</span>的答案就是<spanclass="math inline">\([-2]\)</span>,问题2的答案有<spanclass="math inline">\([-2,1],[1]\)</span>，其中<spanclass="math inline">\([-2,1]\)</span>就是在问题<spanclass="math inline">\(1\)</span>的后面加上<spanclass="math inline">\(1\)</span>得到的。<spanclass="math inline">\(-2+1=-1&lt;1\)</span>,因此问题<spanclass="math inline">\(2\)</span>的答案为<spanclass="math inline">\([1]\)</span>。</p><p>从上述例子中可以看出如果问题i的结果是负数或者<spanclass="math inline">\(0\)</span>，那么问题<spanclass="math inline">\(i+1\)</span>的结果就可以把问题<spanclass="math inline">\(i\)</span>的结果舍弃。</p><p>第三步定义子问题，<spanclass="math inline">\(dp[i]:\)</span>表示以<spanclass="math inline">\(nums[i]\)</span>​结尾的连续子数组的最大和。</p><p>状态转移方程1：</p><p>假设数组<spanclass="math inline">\(nums\)</span>的值全都严格大于0，那么一定有<spanclass="math inline">\(dp[i]=dp[i-1]+nums[i]\)</span>。当<spanclass="math inline">\(nums\)</span>中存在负数时，<spanclass="math inline">\(dp[i-1]\)</span>就可能为负数，那么<spanclass="math inline">\(nums[i]\)</span>加上前面的<spanclass="math inline">\(dp[i-1]\)</span>以后值不会变大，此时<spanclass="math inline">\(dp[i]\)</span>就等于<spanclass="math inline">\(nums[i]\)</span> <span class="math display">\[dp[i]=\begin{cases}dp[i-1]+nums[i],&amp;if&amp;dp[i-1]&gt;0\\nums[i],&amp;if&amp;dp[i-1]\leq0\end{cases}\]</span>由于题目只是求最大值，并且只有两种情况，因此状态转移方程还可以写成：<span class="math display">\[dp[i]=\max\{nums[i],dp[i-1]+nums[i]\}\]</span> 第四步规定初始值和输出，<spanclass="math inline">\(dp[0]=nums[0]\)</span>。<strong>输出是所有<spanclass="math inline">\(dp\)</span>值中的最大值，不是直接将最后一个状态返回出去</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#状态转移方程1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        size = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> size == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        dp = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size)]<br><br>        dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, size):<br>            <span class="hljs-keyword">if</span> dp[i - <span class="hljs-number">1</span>] &gt;= <span class="hljs-number">0</span>:<br>                dp[i] = dp[i - <span class="hljs-number">1</span>] + nums[i]<br>            <span class="hljs-keyword">else</span>:<br>                dp[i] = nums[i]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp)<br><br><span class="hljs-comment">#状态转移方程2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        pre = <span class="hljs-number">0</span><br>        res = nums[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            pre = <span class="hljs-built_in">max</span>(nums[i], pre+nums[i])<br>            res = <span class="hljs-built_in">max</span>(res,pre)<br><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>和为k的子数组</title>
    <link href="/2024/02/29/%E5%92%8C%E4%B8%BAk/"/>
    <url>/2024/02/29/%E5%92%8C%E4%B8%BAk/</url>
    
    <content type="html"><![CDATA[<h1 id="和为k的子数组">和为k的子数组</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402292208185.png"alt="image-20240229220749386" /><figcaption aria-hidden="true">image-20240229220749386</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="前缀和哈希表">前缀和+哈希表</h4><p>前缀和：一个数组的某个下标之前的所有数组元素的和（包含自身）</p><p>通常会习惯在前缀和首位放一个0，例如数组<spanclass="math inline">\([1,2,3]\)</span>,前缀和就为<spanclass="math inline">\([0,1,3,6]\)</span>，前缀和有助于快速计算某个区间内的和，例如要计算<spanclass="math inline">\(i,j\)</span>之间的和：<spanclass="math inline">\(nums[i]+nums[i+1]+……+nums[j]\)</span>,可以看作是<spanclass="math inline">\(nums[0]+nums[1]+……+nums[i]+……+nums[j]\)</span>减去<spanclass="math inline">\(nums[0]+nums[1]+……+nums[i-1]\)</span>,也可以看作<spanclass="math inline">\(preSum[j]-preSum[i-1]\)</span>。</p><p>在遍历过程中，统计历史中每一个前缀和出现的次数，然后计算到i位置的前缀和<spanclass="math inline">\(presum\)</span>减去目标k在遍历过程中出现的次数，假设出现<spanclass="math inline">\(m\)</span>次，代表第i位以前有<spanclass="math inline">\(m\)</span>个连续子数组的和为<spanclass="math inline">\(presum-k\)</span>，这<spanclass="math inline">\(m\)</span>个和为<spanclass="math inline">\(presum-k\)</span>的连续子数组，每一个都可以和<spanclass="math inline">\(presum\)</span>组合成<spanclass="math inline">\(presum-(presum-k)=k\)</span>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subarraySum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        preSums = collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        count = <span class="hljs-number">0</span><br>        nums_len = <span class="hljs-built_in">len</span>(nums)<br><br>        preSums[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br><br>        presums = <span class="hljs-number">0</span> <br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nums_len):<br>            presums +=nums[i]<br><br>            count += preSums[presums-k]<br><br>            preSums[presums] += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> count<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>找到字符串中所有字母异位词</title>
    <link href="/2024/02/27/%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <url>/2024/02/27/%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="找到字符串中所有字母异位词">找到字符串中所有字母异位词</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402272251984.png"alt="image-20240227191448423" /><figcaption aria-hidden="true">image-20240227191448423</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="滑动窗口">1、滑动窗口</h4><p>先在字符串s中构造一个p长度的滑动窗口，在滑动过程中固定窗口中字母的数量，当窗口中每种字母的数量与字符串p中每种字母的数量相同时，说明当前窗口为字符串p的字母异位词。</p><p>当字符串s的长度小于字符串p的长度时，字符串s中一定不存在p的异位词，此时字符串s中无法构造和字符串p长度相同的窗口，所以该情况需要单独处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findAnagrams</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        s_len, p_len = <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">len</span>(p)<br>        <br>        <span class="hljs-keyword">if</span> s_len &lt; p_len:<br>            <span class="hljs-keyword">return</span> []<br><br>        ans = []<br>        s_count = [<span class="hljs-number">0</span>] * <span class="hljs-number">26</span><br>        p_count = [<span class="hljs-number">0</span>] * <span class="hljs-number">26</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p_len):<br>            s_count[<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">97</span>] += <span class="hljs-number">1</span><br>            p_count[<span class="hljs-built_in">ord</span>(p[i]) - <span class="hljs-number">97</span>] += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> s_count == p_count:<br>            ans.append(<span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s_len - p_len):<br>            s_count[<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">97</span>] -= <span class="hljs-number">1</span><br>            s_count[<span class="hljs-built_in">ord</span>(s[i + p_len]) - <span class="hljs-number">97</span>] += <span class="hljs-number">1</span><br>            <br>            <span class="hljs-keyword">if</span> s_count == p_count:<br>                ans.append(i + <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> ans<br>                <br></code></pre></td></tr></table></figure><h4 id="优化滑动窗口">2、优化滑动窗口</h4><p>该方法在方法一的基础上，将统计滑动窗口和字符串p中每种字母数量转变为统计二者间每种字母数量的差，当差为0时，即二者为字母异位词。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findAnagrams</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        s_len, p_len = <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">len</span>(p)<br><br>        <span class="hljs-keyword">if</span> s_len &lt; p_len:<br>            <span class="hljs-keyword">return</span> []<br><br>        ans = []<br>        count = [<span class="hljs-number">0</span>] * <span class="hljs-number">26</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p_len):<br>            count[<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">97</span>] += <span class="hljs-number">1</span><br>            count[<span class="hljs-built_in">ord</span>(p[i]) - <span class="hljs-number">97</span>] -= <span class="hljs-number">1</span><br><br>        differ = [c != <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> count].count(<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-keyword">if</span> differ == <span class="hljs-number">0</span>:<br>            ans.append(<span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s_len - p_len):<br>            <span class="hljs-keyword">if</span> count[<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">97</span>] == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 窗口中字母 s[i] 的数量与字符串 p 中的数量从不同变得相同</span><br>                differ -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> count[<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">97</span>] == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 窗口中字母 s[i] 的数量与字符串 p 中的数量从相同变得不同</span><br>                differ += <span class="hljs-number">1</span><br>            count[<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">97</span>] -= <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> count[<span class="hljs-built_in">ord</span>(s[i + p_len]) - <span class="hljs-number">97</span>] == -<span class="hljs-number">1</span>:  <span class="hljs-comment"># 窗口中字母 s[i+p_len] 的数量与字符串 p 中的数量从不同变得相同</span><br>                differ -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> count[<span class="hljs-built_in">ord</span>(s[i + p_len]) - <span class="hljs-number">97</span>] == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 窗口中字母 s[i+p_len] 的数量与字符串 p 中的数量从相同变得不同</span><br>                differ += <span class="hljs-number">1</span><br>            count[<span class="hljs-built_in">ord</span>(s[i + p_len]) - <span class="hljs-number">97</span>] += <span class="hljs-number">1</span><br>            <br>            <span class="hljs-keyword">if</span> differ == <span class="hljs-number">0</span>:<br>                ans.append(i + <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接雨水</title>
    <link href="/2024/02/22/%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <url>/2024/02/22/%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="接雨水">接雨水</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402222018933.png"alt="image-20240222201820556" /><figcaption aria-hidden="true">image-20240222201820556</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="动态规划">1、动态规划</h4><p>对于下标<spanclass="math inline">\(i\)</span>，下雨后能接到的雨水等于下标i两边的最大高度的最小值减去<spanclass="math inline">\(height[i]\)</span>。通常的方法是分别向左向右扫描并记录每个下标左右边的最大高度，然后计算每个下标位置能接的雨水量。这种做法的时间复杂度为<spanclass="math inline">\(O(n^2)\)</span>。为了避免对每个下标位置进行双边扫描，换作对每个位置两边的最大高度进行扫描。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402222026342.png"alt="image-20240222202616303" /><figcaption aria-hidden="true">image-20240222202616303</figcaption></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402222026290.png"alt="image-20240222202633255" /><figcaption aria-hidden="true">image-20240222202633255</figcaption></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402222026020.png"alt="image-20240222202649986" /><figcaption aria-hidden="true">image-20240222202649986</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">trap</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> height:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        h_len = <span class="hljs-built_in">len</span>(height)<br><br>        leftMax = [height[<span class="hljs-number">0</span>]] + [<span class="hljs-number">0</span>]*(h_len-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,h_len):<br>            leftMax[i]= <span class="hljs-built_in">max</span>(leftMax[i-<span class="hljs-number">1</span>], height[i])<br>        <br>        rightMax = [<span class="hljs-number">0</span>]*(h_len-<span class="hljs-number">1</span>) + [height[h_len-<span class="hljs-number">1</span>]]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h_len-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            rightMax[i] = <span class="hljs-built_in">max</span>(rightMax[i+<span class="hljs-number">1</span>], height[i])<br><br>        sum_rain = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h_len):<br>            every_rain = <span class="hljs-built_in">min</span>(leftMax[i],rightMax[i])-height[i]<br>            sum_rain += every_rain<br>        <br>        <span class="hljs-keyword">return</span> sum_rain<br><br></code></pre></td></tr></table></figure><h4 id="双指针">2、双指针</h4><p>下标<span class="math inline">\(i\)</span>处能接到的雨水量是由<spanclass="math inline">\(leftMax[i]\)</span>和<spanclass="math inline">\(rightMax[i]\)</span>中的最小值决定，由于两个数组分别是从左往右和从右往左计算，因此可以用双指针和两个变量代替两个数组。初始时，将指针初始化为<spanclass="math inline">\(left=0，right=n-1，leftMax=0,rightMax=0\)</span>。当两个指针没有相遇时：</p><ul><li><spanclass="math inline">\(用height[left]、height[right]的值更新leftMax、rightMax的值\)</span></li><li><spanclass="math inline">\(当height[left]&lt;height[right]，则必有leftMax&lt;rightMax，下标处能接到的与水量等于leftMax-height[left]，将该雨水量加入能接到的雨水总量，然后left+1;\)</span></li><li><spanclass="math inline">\(当height[left]≥height[right]，则必有leftMax≥rightMax，下标处能接到的与水量等于rightMax-height[right]，将该雨水量加入能接到的雨水总量，然后right-1;\)</span></li></ul><p>当两个指针相遇时，得到的即是能接到的雨水总量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">trap</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(height) - <span class="hljs-number">1</span><br>        leftMax = rightMax = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            leftMax = <span class="hljs-built_in">max</span>(leftMax, height[left])<br>            rightMax = <span class="hljs-built_in">max</span>(rightMax, height[right])<br>            <span class="hljs-keyword">if</span> height[left] &lt; height[right]:<br>                sum_rain += leftMax - height[left]<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                sum_rain += rightMax - height[right]<br>                right -= <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> sum_rain<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三数之和</title>
    <link href="/2024/02/14/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2024/02/14/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="三数之和">三数之和</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402142332361.png"alt="image-20240214233202251" /><figcaption aria-hidden="true">image-20240214233202251</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="思想排序双指针">思想：排序+双指针</h4><p>​本题与两数之和有类似的思想，都是使用双指针来进行解题。不同的是该题要求返回的三元组中不能出现相同的三元组，因此需要对输入的list进行排序。只需要保证：</p><ul><li>第二重循环枚举到的元素不小于当前第一重循环枚举到的元素；</li><li>第三重循环枚举到的元素不小于当前第二重循环枚举到的元素。</li></ul><p>这样做的目的是让结果中的元组按数的大小进行排列，这样就可以避免出现重复的结果。同时，对于每一重循环而言，相邻两次枚举的元素不能相同，否则也会造成重复。再进行一定的思考可以发现如果固定第一重循环的数x和第二重循环的数y，第三重循环进行遍历时就只有唯一的数z满足等式。当第二重循环进行下一次遍历，y'&gt;y,所以c'需要小于c，即c'一定出现在c的左侧。所以可以从小到大枚举b,从大到小枚举c。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#官方题解</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        nums.sort()<br>        ans = <span class="hljs-built_in">list</span>()<br>        <br>        <span class="hljs-comment"># 枚举 a</span><br>        <span class="hljs-keyword">for</span> first <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-comment"># 需要和上一次枚举的数不相同</span><br>            <span class="hljs-keyword">if</span> first &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[first] == nums[first - <span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># c 对应的指针初始指向数组的最右端</span><br>            third = n - <span class="hljs-number">1</span><br>            target = -nums[first]<br>            <span class="hljs-comment"># 枚举 b</span><br>            <span class="hljs-keyword">for</span> second <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(first + <span class="hljs-number">1</span>, n):<br>                <span class="hljs-comment"># 需要和上一次枚举的数不相同</span><br>                <span class="hljs-keyword">if</span> second &gt; first + <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[second] == nums[second - <span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-comment"># 需要保证 b 的指针在 c 的指针的左侧</span><br>                <span class="hljs-keyword">while</span> second &lt; third <span class="hljs-keyword">and</span> nums[second] + nums[third] &gt; target:<br>                    third -= <span class="hljs-number">1</span><br>                <span class="hljs-comment"># 如果指针重合，随着 b 后续的增加</span><br>                <span class="hljs-comment"># 就不会有满足 a+b+c=0 并且 b&lt;c 的 c 了，可以退出循环</span><br>                <span class="hljs-keyword">if</span> second == third:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> nums[second] + nums[third] == target:<br>                    ans.append([nums[first], nums[second], nums[third]])<br>        <br>        <span class="hljs-keyword">return</span> ans   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动零</title>
    <link href="/2024/02/12/convey-zero/"/>
    <url>/2024/02/12/convey-zero/</url>
    
    <content type="html"><![CDATA[<h1 id="移动零">移动零</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402122238778.png"alt="image-20240212223822690" /><figcaption aria-hidden="true">image-20240212223822690</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="思路1双指针两次遍历">思路1：双指针+两次遍历</h4><p>创建两个指针a,b，首次遍历用b记录当前的非0元素个数，遇到非0元素就将其左移，遍历完成后b的下表就指向最后一个非0元素下标。第二次遍历，起始位置从b开始到结束，将剩余区域的元素全变为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveZeroes</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i]:<br>                nums[j] = nums[i]<br>                j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j,<span class="hljs-built_in">len</span>(nums)):<br>            nums[i] = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="思路2双指针快排">思路2：双指针+快排</h4><p>快速排序：首先要确定一个待分割的元素做中间点X，然后把所有小于等于X的元素放到X的左边，大于X的元素放到其右边。</p><p>用0作为中间点，将不等于0的放到中间点左边，等于0的放到中间点右边</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveZeroes</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i]:<br>                nums[j],nums[i] = nums[i],nums[j]<br>                j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="思路3暴力去除0">思路3：暴力去除0</h4><p>遍历列表，当元素等于0时，去除该元素并在列表末尾加入0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveZeroes</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify nums in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        len_nums = <span class="hljs-built_in">len</span>(nums)<br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span>( i != len_nums):<br>            <span class="hljs-keyword">if</span> nums[i] == <span class="hljs-number">0</span>:<br>                nums.append(<span class="hljs-number">0</span>)<br>                nums.remove(<span class="hljs-number">0</span>)<br>            i +=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="总结">3、总结</h2><p>此类不让重新声明数组或者列表的题目通常都涉及到双指针进行解题</p>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长连续序列</title>
    <link href="/2024/02/12/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/"/>
    <url>/2024/02/12/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="最长连续序列">最长连续序列</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402112016262.png"alt="image-20240211200934381" /><figcaption aria-hidden="true">image-20240211200934381</figcaption></figure><h2 id="题解">2、题解</h2><p>思路：借助hash表</p><p>考虑枚举数组中每个不存在前驱数n-1的数n，在哈希表中检查是否存在，不存在即跳过。尝试匹配n+1,n+2,……是否存在，假设最长匹配至n+x,则存在长度为x+1的最长连续序列。</p><p>官方题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestConsecutive</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        longest_streak = <span class="hljs-number">0</span><br>        num_set = <span class="hljs-built_in">set</span>(nums)<br><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> num_set:<br>            <span class="hljs-keyword">if</span> num - <span class="hljs-number">1</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> num_set:<br>                current_num = num<br>                current_streak = <span class="hljs-number">1</span><br><br>                <span class="hljs-keyword">while</span> current_num + <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> num_set:<br>                    current_num += <span class="hljs-number">1</span><br>                    current_streak += <span class="hljs-number">1</span><br><br>                longest_streak = <span class="hljs-built_in">max</span>(longest_streak, current_streak)<br><br>        <span class="hljs-keyword">return</span> longest_streak<br></code></pre></td></tr></table></figure><p>自我版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestConsecutive</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        longest_streak = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># num_set = set(nums)</span><br>        nums_dict = &#123;&#125;<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            nums_dict[num] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums_dict.keys():<br>            <span class="hljs-keyword">if</span> num - <span class="hljs-number">1</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> nums_dict.keys():<br>                current_num = num<br>                current_streak = <span class="hljs-number">1</span><br><br>                <span class="hljs-keyword">while</span> current_num + <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> nums_dict.keys():<br>                    current_num += <span class="hljs-number">1</span><br>                    current_streak += <span class="hljs-number">1</span><br><br>                longest_streak = <span class="hljs-built_in">max</span>(longest_streak, current_streak)<br><br>        <span class="hljs-keyword">return</span> longest_streak<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字母异位词</title>
    <link href="/2024/02/01/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <url>/2024/02/01/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="字母异位词分组">字母异位词分组</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202402012117348.png"alt="image-20240201205948099" /><figcaption aria-hidden="true">image-20240201205948099</figcaption></figure><h2 id="题解">2、题解</h2><p>由题意可知，字母异位词的共同特点是含有相同的字母，因此可以用哈希表存储一组字母异位词。遍历字符串，得到每个字符串所包含的标志并加入该字母异位词的列表。遍历完成后哈希表的值即为一组字母异位词列表。</p><h3 id="解法一排序">解法一：排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#官方题解</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">groupAnagrams</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]:<br>        mp = collections.defaultdict(<span class="hljs-built_in">list</span>)<br><br>        <span class="hljs-keyword">for</span> st <span class="hljs-keyword">in</span> strs:<br>            key = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">sorted</span>(st))<br>            mp[key].append(st)<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(mp.values())<br><br><span class="hljs-comment">#自己写的</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_dict</span>(<span class="hljs-params">dictionary, key, value</span>):<br>    <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dictionary:<br>        dictionary[key] = []<br>    dictionary[key].append(value)<br><br>    <span class="hljs-keyword">return</span> dictionary<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">group_anagrams</span>(<span class="hljs-params">ip_str</span>):<br>    mp = &#123;&#125;<br><br>    <span class="hljs-keyword">for</span> st <span class="hljs-keyword">in</span> ip_str:<br>        key = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">sorted</span>(st))<br>        mp = add_dict(mp, key, st)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(mp.values())<br></code></pre></td></tr></table></figure><h3 id="解法二记数">解法二：记数</h3><p>由于互为字母异位词的两个字符串包含的字母相同，因此两个字符串中的相同字母出现的次数一定是相同的，故可以将每个字母出现的次数使用字符串表示，作为哈希表的键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">groupAnagrams</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]:<br>        mp = collections.defaultdict(<span class="hljs-built_in">list</span>)<br><br>        <span class="hljs-keyword">for</span> st <span class="hljs-keyword">in</span> strs:<br>            counts = [<span class="hljs-number">0</span>] * <span class="hljs-number">26</span><br>            <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> st:<br>                counts[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>)] += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 需要将 list 转换成 tuple 才能进行哈希</span><br>            mp[<span class="hljs-built_in">tuple</span>(counts)].append(st)<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(mp.values())<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变分自编码器VAE(Variational Auto-Encoder)</title>
    <link href="/2024/01/31/VAE/"/>
    <url>/2024/01/31/VAE/</url>
    
    <content type="html"><![CDATA[<h1id="变分自编码器vaevariational-auto-encoder">变分自编码器VAE(VariationalAuto-Encoder)</h1><h4id="变分自编码器的目标是构建一个根据隐藏变量生成目标数据的模型">变分自编码器的目标是构建一个根据隐藏变量生成目标数据的模型</h4><p>假设有一组数据{<spanclass="math inline">\(x_1,x_2,…x_n\)</span>},整体用<spanclass="math inline">\(X\)</span>表示。理想情况下可以从数据中直接得到<spanclass="math inline">\(X\)</span>的分布<spanclass="math inline">\(P(X)\)</span>，根据<spanclass="math inline">\(P(X)\)</span>进行采样可以得到所有可能的<spanclass="math inline">\(X\)</span>。通常情况下很难实现上述所说的，而是将<spanclass="math inline">\(P(X)\)</span>​改写为： <spanclass="math display">\[p(X)=\sum_Zp(X|Z)p(Z)\]</span> <spanclass="math inline">\(p(X|Z)\)</span>表示一个由Z来生成<spanclass="math inline">\(X\)</span>的生成模型，假设已知<spanclass="math inline">\(Z\)</span>服从正态分布，就可以根据<spanclass="math inline">\(Z\)</span>来计算<spanclass="math inline">\(X\)</span>。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202401311435107.jpeg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>在<span class="math inline">\(VAE\)</span>模型中，并没有直接假设<spanclass="math inline">\(p(Z)\)</span>服从正态分布，而是假设<spanclass="math inline">\(p(Z|X)\)</span>服从正态分布(对于一个真实样本<spanclass="math inline">\(X_k\)</span>,都存在一个<strong>专属</strong>于<spanclass="math inline">\(X_k\)</span>的分布<spanclass="math inline">\(p(Z|X_k)\)</span>,方便后续进行从<spanclass="math inline">\(Z\)</span>到<spanclass="math inline">\(X\)</span>的精准映射)。</p><p>由上述可知有多少个<spanclass="math inline">\(X\)</span>就有相应数量的正态分布，可以借助神经网络来拟合分布的均值和方差。构建两个网络：<spanclass="math inline">\(μ_k=f_1(X_k),log\sigma^2=f_2(X_k)\)</span>。拟合<spanclass="math inline">\(log\sigma^2\)</span>是因为<spanclass="math inline">\(\sigma^2\)</span>非负，需要激活函数处理。</p><p>根据上述过程可以得到每个数据的专属生成器，<spanclass="math inline">\(VAE\)</span>示意图如下图所示：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202401311511614.png"alt="变分自编码器（Variational Auto-Encoder，VAE） | 望江人工智库" /><figcaption aria-hidden="true">变分自编码器（VariationalAuto-Encoder，VAE） | 望江人工智库</figcaption></figure><p>重构<span class="math inline">\(X\)</span>的目的是最小化<spanclass="math inline">\(D(\hat{X}k,Xk)^2\)</span>,这个过程中会受到噪声影响，因为<spanclass="math inline">\(Z_K\)</span>是通过采样的，而不是直接由encoder编码出来的。为了保证采样的随机性，<span class="math inline">\(VAE\)</span>让所有<spanclass="math inline">\(p(Z|X)\)</span>​都对齐标准正态分布，这样防止噪声为0，同时保证模型具备生成能力：<span class="math display">\[p(Z)=\sum_Xp(Z|X)p(X)=\sum_X\mathcal{N}(0,I)p(X)=\mathcal{N}(0,I)\sum_Xp(X)=\mathcal{N}(0,I)\]</span> 这样就从而实现了先验分布<spanclass="math inline">\(P(Z)\)</span>是标准正态分布，从而进行采样。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202401311534041.png"alt="image-20240131153443961" /><figcaption aria-hidden="true">image-20240131153443961</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>因果推理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整数转罗马数字</title>
    <link href="/2023/12/28/%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/"/>
    <url>/2023/12/28/%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="整数转罗马数字">整数转罗马数字</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202312281554022.png"alt="image-20231228155342506" /><figcaption aria-hidden="true">image-20231228155342506</figcaption></figure><h2 id="题解">2、题解</h2><p>思路：利用贪心哈希表来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intToRoman</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        hashmap = &#123;<span class="hljs-number">1000</span>:<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">900</span>:<span class="hljs-string">&#x27;CM&#x27;</span>, <span class="hljs-number">500</span>:<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">400</span>:<span class="hljs-string">&#x27;CD&#x27;</span>, <span class="hljs-number">100</span>:<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">90</span>:<span class="hljs-string">&#x27;XC&#x27;</span>, <span class="hljs-number">50</span>:<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">40</span>:<span class="hljs-string">&#x27;XL&#x27;</span>, <span class="hljs-number">10</span>:<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">9</span>:<span class="hljs-string">&#x27;IX&#x27;</span>, <span class="hljs-number">5</span>:<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">4</span>:<span class="hljs-string">&#x27;IV&#x27;</span>, <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;I&#x27;</span>&#125;<br>        res = <span class="hljs-string">&#x27;&#x27;</span><br><br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> hashmap:<br>            <span class="hljs-keyword">if</span> num//key !=<span class="hljs-number">0</span>:<br>                val = num//key<br>                res += hashmap[key] * val<br>                <span class="hljs-built_in">print</span>(hashmap[key] * val)<br>                num %= key<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>盛水最多容器</title>
    <link href="/2023/12/24/%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E5%AE%B9%E5%99%A8/"/>
    <url>/2023/12/24/%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="盛最多水的容器">盛最多水的容器</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202312241636896.png"alt="image-20231224163543608" /><figcaption aria-hidden="true">image-20231224163543608</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="双指针">双指针</h4><p>思路：根据题目可以得到水槽面积公式为：<spanclass="math inline">\(S(i,j)=min(h[i],h[j])\times(j-i)\)</span>,其中<spanclass="math inline">\(h[i]\)</span>表示水槽高度。在所有状态下，无论如何移动槽板，都会使水槽宽度<spanclass="math inline">\(-1\)</span>:</p><ul><li><p>若向内<strong>移动短板</strong> ，水槽的短板 <spanclass="math inline">\(min(h[i],h[j])\)</span>可能变大，因此下个水槽的面积<strong>可能增大</strong>。</p></li><li><p>若向内<strong>移动长板</strong> ，水槽的短板 <spanclass="math inline">\(min(h[i],h[j])\)</span>不变或变小，因此下个水槽的面积<strong>一定变小</strong> 。</p></li></ul><p>搞清迭代条件，我们就令双指针初始化为水槽左右两端，每轮迭代将短板向内移动一格，更新面积最大值，直到双指针相遇，结束迭代，得到最大面积。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 官方题解</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxArea</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        i, j, res = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(height) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; j:<br>            <span class="hljs-keyword">if</span> height[i] &lt; height[j]:<br>                res = <span class="hljs-built_in">max</span>(res, height[i] * (j - i))<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                res = <span class="hljs-built_in">max</span>(res, height[j] * (j - i))<br>                j -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自己写的</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxArea</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        first = <span class="hljs-number">0</span><br>        last = <span class="hljs-built_in">len</span>(height)-<span class="hljs-number">1</span><br>        area = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span>(first != last):<br>            <span class="hljs-built_in">print</span>(height[first])<br>            <span class="hljs-built_in">print</span>(height[last])<br>            area = <span class="hljs-built_in">max</span>(area, <span class="hljs-built_in">min</span>(height[first],height[last])*(last-first))<br>            <span class="hljs-keyword">if</span> height[first] &gt;= height[last]:<br>                last = last -<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                first += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> area<br></code></pre></td></tr></table></figure><h3id="ps与双for一对双for走天下相比">PS：与双for(一对双for走天下)相比</h3><p>在暴力枚举的情况下水槽面积的状态总数为:<spanclass="math inline">\(C(n,2)\)</span>,向内移动短板至<spanclass="math inline">\(S(i+1,j)\)</span>,相当于跳过了<spanclass="math inline">\(S(i,j-1),S(i,j-2),……，S(i,i+1)\)</span>状态集合。并且所有跳过的面积集合都一定小于当前面积，因为：</p><ul><li><p>短板高度：相比 <span class="math inline">\(S(i, j)\)</span>相同或更短；</p></li><li><p>底边宽度：相比 <span class="math inline">\(S(i, j)\)</span>更短；</p></li></ul><p>因此，每轮向内移动短板，所有消去的状态都<strong>不会导致面积最大值丢失</strong>。</p><h4 id="复杂度分析">复杂度分析：</h4><ul><li><strong>时间复杂度 O(N)</strong> ： 双指针遍历一次底边宽度 N 。</li><li><strong>空间复杂度 O(1)</strong> ： 变量 i , j ,res使用常数额外空间。</li></ul>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串转换整数</title>
    <link href="/2023/12/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0/"/>
    <url>/2023/12/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串转换整数">字符串转换整数</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202312221501883.png"alt="image-20231222145709687" /><figcaption aria-hidden="true">image-20231222145709687</figcaption></figure><h2 id="题解">2、题解</h2><h4id="方法1使用已有函数去除字符串中的空格然后再进行拼接">方法1：使用已有函数去除字符串中的空格，然后再进行拼接</h4><p>根据题意，有以下四种字符需要考虑：</p><p>首部空格： 先用strip()函数进行处理 符号位： 三种情况，即 ''+'' ,''−'' , ''无符号" ；新建一个变量保存符号位flag，返回前判断正负即可。非数字字符： 遇到首个非数字的字符时，应立即返回。 数字字符：</p><ul><li><p>字符转数字： “此数字的 ASCII 码” 与 “ 0 的 ASCII 码”相减即可。</p></li><li><p>数字拼接： 若从左向右遍历数字，设当前位字符为 ind ，当前位数字为x ，数字结果为 res，则数字拼接公式为： <span class="math display">\[\begin{aligned}res&amp;=10\timesres+x\\x&amp;=ascii(ind)-ascii(&#39;0&#39;)\end{aligned}\]</span></p></li></ul><p>数字越界处理：需要判断res在每轮拼接前先判断在此轮拼接后是否产生了越界，一共有两种情况。</p><p>第一种情况是res本身直接超过限定条件，第二种情况是res等于限定条件除去个位的范围，拼接的个位数大于限定条件所需的个位数（bndry=2147483647//10= 214748364）： <span class="math display">\[\begin{cases}res&gt;bndry\\res=bndry,x&gt;7&amp;\end{cases}\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myAtoi</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        s = s.strip()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s : <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        res, i, flag =<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>        int_max, int_min, boundary = <span class="hljs-number">2</span>**<span class="hljs-number">31</span>-<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>**<span class="hljs-number">31</span>, <span class="hljs-number">2</span>**<span class="hljs-number">31</span>//<span class="hljs-number">10</span><br><br>        <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>: flag=-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> s[<span class="hljs-number">0</span>] !=<span class="hljs-string">&#x27;+&#x27;</span>: i=<span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> ind <span class="hljs-keyword">in</span> s[i:]:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-string">&#x27;0&#x27;</span>&lt;= ind &lt;=<span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-keyword">break</span><br><br>            <span class="hljs-keyword">if</span> res&gt;boundary <span class="hljs-keyword">or</span> res==boundary <span class="hljs-keyword">and</span> ind &gt; <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-keyword">return</span> int_max <span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> int_min<br><br>            res = res *<span class="hljs-number">10</span> + <span class="hljs-built_in">ord</span>(ind) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;0&#x27;</span>)<br><br>        <span class="hljs-keyword">return</span> flag*res<br>        <br></code></pre></td></tr></table></figure><h4 id="方法2使用遍历手动去除空格">方法2：使用遍历手动去除空格</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myAtoi</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res, i, flag, length = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(s)<br>        int_max, int_min, bndry = <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>, -<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> // <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>         <span class="hljs-comment"># 空字符串，提前返回</span><br>        <span class="hljs-keyword">while</span> s[i] == <span class="hljs-string">&#x27; &#x27;</span>:<br>            i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i == length: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 字符串全为空格，提前返回</span><br>        <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;-&#x27;</span>: flag = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> s[i] <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;+-&#x27;</span>: i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, length):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-string">&#x27;0&#x27;</span> &lt;= s[j] &lt;= <span class="hljs-string">&#x27;9&#x27;</span> : <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> res &gt; bndry <span class="hljs-keyword">or</span> res == bndry <span class="hljs-keyword">and</span> s[j] &gt; <span class="hljs-string">&#x27;7&#x27;</span>:<br>                <span class="hljs-keyword">return</span> int_max <span class="hljs-keyword">if</span> sign == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> int_min<br>            res = <span class="hljs-number">10</span> * res + <span class="hljs-built_in">ord</span>(s[j]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;0&#x27;</span>)<br>        <span class="hljs-keyword">return</span> flag * res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Enhancing Document-level Event Argument Extraction with Contextual Clues and Role Relevance</title>
    <link href="/2023/12/18/ee/"/>
    <url>/2023/12/18/ee/</url>
    
    <content type="html"><![CDATA[<h1id="enhancing-document-level-event-argument-extraction-with-contextual-clues-and-role-relevance">EnhancingDocument-level Event Argument Extraction with Contextual Clues and RoleRelevance</h1><p>论文链接：<ahref="https://aclanthology.org/2023.findings-acl.817.pdf">2023.findings-acl.817.pdf(aclanthology.org)</a></p><p>源码链接：<ahref="https://github.com/LWL-cpu/SCPRG-master">LWL-cpu/SCPRG-master: Thecode implement of "Enhancing Document-level Event Argument Extractionwith Contextual Clues and Role Relevance" in the findings of ACL 2023.(github.com)</a></p><h2 id="任务定义">任务定义</h2><p>给定一个包含N个单词的文档<spanclass="math inline">\(\mathcal{D}=\{w_{1},w_{2},...,w_{N}\}\)</span>、预定义事件类型集<spanclass="math inline">\(\mathcal{E}\)</span>、对应的角色集<spanclass="math inline">\(\mathcal{R_e}\)</span>以及每个事件的触发器<spanclass="math inline">\(\mathcal{t}\)</span>。本任务旨在预测文档<spanclass="math inline">\(\mathcal{D}\)</span>中每个事件的所有<spanclass="math inline">\((r,s)\)</span>对，<spanclass="math inline">\(r\in\mathcal{R}_{e}\)</span>是事件<spanclass="math inline">\(e\in\mathcal{E}\)</span>的一个参数角色，<spanclass="math inline">\(s\in\mathcal{D}\)</span>是<spanclass="math inline">\(\mathcal{D}\)</span>中的一个连续文本跨度。</p><h2 id="模型构建">模型构建</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202312181050055.png"alt="image-20231218104728546" /><figcaption aria-hidden="true">image-20231218104728546</figcaption></figure><h4 id="input">input</h4><p>本文在embedding的过程中，对于事件信息和角色信息前后加入特殊token来标记特殊信息。</p><h4 id="role-interactive-encoding">Role-interactive Encoding</h4><p>对输入内容进行编码后分别得到事件表示<spanclass="math inline">\(\mathbf{H}^e\in\mathbb{R}^{l_w\timesd}\)</span>、上下文表示<spanclass="math inline">\(\mathbf{H}^w\in\mathbb{R}^{l_w\timesd}\)</span>以及角色表示<spanclass="math inline">\(\mathbf{H}^r\in\mathbb{R}^{l_w\timesd}\)</span>,<spanclass="math inline">\(l_w\)</span>为词块列表的长度，<spanclass="math inline">\(l_r\)</span>为角色列表的长度。对于大于512的输入序列，本文用动态窗口对序列进行编码，对于不同窗口的重叠标记embedding进行平均，获得最终表示。本文的编码方式旨在获取语义相关性并适应目标事件和上下文。</p><h4 id="span-trigger-based-contextual-pooling">Span-Trigger-basedContextual Pooling</h4><p>获取pre-trainedmodel中的最后一个transformers层的token-level上下文信息的attention heads矩阵：<span class="math inline">\(\mathbf{A}^w\in\mathbb{R}^{H\timesl_w\timesl_w}\)</span>,一定范围内中每个候选span的上下文attention可以通过averagepooling计算得到:<spanclass="math inline">\(\mathbf{A}_{i:j}^C=\frac{1}{H(j-i+1)}\sum_{h=1}^H\sum_{m=i}^j\mathbf{A}_{h,m}^w\)</span>.对于span-trigger对<spanclass="math inline">\((s_{i:j},t)\)</span>​,将注意力相乘后归一化得到上下文中线索信息的相关性矩阵:<span class="math display">\[\begin{aligned}\mathbf{p}_{i:j}^c&amp;=softmax(\mathbf{A}_{i:j}^C\cdot\mathbf{A}_t^C),\\\mathbf{c}^{s_{i:j}}&amp;=\mathbf{H}^w\mathbf{p}_{i:j}^c,\end{aligned}\]</span></p><h4 id="role-based-latent-information-guidance">Role-based LatentInformation Guidance</h4><p>与上述模块类似，获取pre-trained model中最后一个transformers层的角色信息的attention head矩阵<spanclass="math inline">\(\mathbf{A}^r\in\mathbb{R}^{H\times l_w\timesl_w}\)</span>​,可以计算得到潜在角色信息的相关性矩阵： <spanclass="math display">\[\begin{gathered}\mathbf{A}_{i:j}^{R}=\frac{1}{H(j-i+1)}\sum_{h=1}^{H}\sum_{m=i}^{j}\mathbf{A}_{h,m}^{r},\\\mathbf{p}_{i:j}^{r}=softmax(\mathbf{A}_{i:j}^{R}\cdot\mathbf{A}_{t}^{R}),\\\mathbf{r}^{s_{i:j}}=\mathbf{H}^{r}\mathbf{p}_{i:j}^{r},\end{gathered}\]</span> 对于一个候选span，将averagepooling、上下文中的线索信息以及潜在角色信息进行融合: <spanclass="math display">\[\mathbf{s}_{i:j}=tanh(\mathbf{W}_1[\frac{1}{j-i+1}\sum_{k=i}^j\mathbf{h}_k^w;\mathbf{c}^{s_{i:j}};\mathbf{r}^{s_{i:j}}]),\]</span> <spanclass="math inline">\(\mathbf{W}_1\in\mathbb{R}^{3d\timesd}\)</span>为可学习参数，之后的<spanclass="math inline">\(W\)</span>均为可学习参数。</p><h4 id="classification-module">Classification Module</h4><p>Boundary loss:</p><p>由于前面的工作是在span层面提取参数，可能对于边界的限定是模糊的，因此在该模块使用全连接神经网络构造起点和终点来强化span的范围表示:<spanclass="math inline">\(\mathbf{H}^{start}=\mathbf{W}^{start}\mathbf{H}^{s},\mathbf{H}^{end}=\mathbf{W}^{end}\mathbf{H}^{s}\)</span>,<spanclass="math inline">\(H^s\)</span>是输入序列的隐藏表示。在该基础上，将上下文和角色信息与基于span-trigger的上下文pooling相结合，增强开始和结束的表示:<span class="math display">\[\begin{gathered}\mathbf{z}_{i:j}^{start}=\mathbf{H}^{start}\mathbf{p}_{i:j}, \\\mathbf{z}_{i:j}^{end}=\mathbf{H}^{end}\mathbf{p}_{i:j}, \\\mathbf{h}_{i:j}^{start}=tanh(\mathbf{W}_{2}[\mathbf{h}_{i}^{start};\mathbf{z}_{i:j}^{start}]),\\\mathbf{h}_{i:j}^{end}=tanh(\mathbf{W}_{3}[\mathbf{h}_{j}^{end};\mathbf{z}_{i:j}^{end}]),\end{gathered}\]</span> <span class="math inline">\(h_i\)</span>表示<spanclass="math inline">\(H\)</span>的第i个向量。</p><p>通过上述处理后可以得到span的最终表示:<spanclass="math inline">\(\widetilde{\mathbf{s}}_{i:j}=\mathbf{W}^{s}[\mathbf{h}_{i:j}^{start};\mathbf{s}_{i:j};\mathbf{h}_{i:j}^{end}]\)</span></p><p>boundary loss可以表示为: <span class="math display">\[\begin{aligned}\mathcal{L}_b&amp;=-\sum_{i=1}^{|\mathcal{D}|}[y_i^s\logP_i^s+(1-y_i^s)\log(1-P_i^s)+y_i^e\logP_i^e+(1-y_i^e)\log(1-P_i^e)]\end{aligned}\]</span> <spanclass="math inline">\(y_i^{s}、y_i^{e}\)</span>表示真实的labels，<spanclass="math inline">\(P_i^{s}=sigmoid(\mathbf{W}_{4}\mathbf{h}_{i}^{start})、P_i^{e}=sigmoid(\mathbf{W}_{5}\mathbf{h}_{i}^{end})\)</span>代表单词<spanclass="math inline">\(w_i\)</span>被预测为真实参数span的第一个、最后一个词的概率。</p><p>Classification Loss:</p><p>本文将事件e中的候选span<spanclass="math inline">\(\widetilde{\mathbf{s}}_{i:j}\)</span>、trigger表示<spanclass="math inline">\(h_t\)</span>​、二者差的绝对值、两个矩阵对应元素相乘得到的矩阵、事件类型的embedding以及span长度的embeddingconcatenate起来，通过一个前向传播网络，得到预测值: <spanclass="math display">\[\begin{aligned}\mathbf{I}_{i:j}&amp;=[\widetilde{\mathbf{s}}_{i:j};\mathbf{h}_t;|\mathbf{h}_t-\widetilde{\mathbf{s}}_{i:j}|;\mathbf{h}_t\odot\widetilde{\mathbf{s}}_{i:j};\mathbf{H}^e;\mathbf{E}_{len}],\\\\&amp;P(r_{i:j})=\mathrm{FFN}(\mathbf{I}_{i:j})\end{aligned}\]</span>由于大多数候选参数是负样本以及不符合事件类型的角色分布，本文采用focalloss来让模型更加关注有用的正样本： <span class="math display">\[\begin{aligned}\mathcal{L}_{c}&amp;=-\sum_{i=1}^{|\mathcal{D}|}\sum_{j=1}^{|\mathcal{D}|}\alpha[1-P(r_{i:j}=y_{i:j})]^{\gamma}\cdot\logP(r_{i:j}=y_{i:j})\end{aligned}\]</span> <span class="math inline">\(α、γ\)</span>都是超参数</p><p>最后总loss:<spanclass="math inline">\(\mathcal{L}=\mathcal{L}_{c}+\lambda\mathcal{L}_{b}.\)</span></p>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事件抽取</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整数反转</title>
    <link href="/2023/12/18/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <url>/2023/12/18/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="整数反转">整数反转</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202312181014596.png"alt="image-20231218101425194" /><figcaption aria-hidden="true">image-20231218101425194</figcaption></figure><h2 id="题解">2、题解</h2><h3id="思路1直接将int类型转换成str类型进行反转">思路1：直接将int类型转换成str类型进行反转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> -<span class="hljs-number">10</span>&lt;x&lt;<span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">return</span> x<br>        str_x = <span class="hljs-built_in">str</span>(x)<br><br>        <span class="hljs-keyword">if</span> str_x[<span class="hljs-number">0</span>] != <span class="hljs-string">&quot;-&quot;</span>:<br>            str_x = str_x[::-<span class="hljs-number">1</span>]<br>            x = <span class="hljs-built_in">int</span>(str_x)<br>        <span class="hljs-keyword">else</span>:<br>            str_x = str_x[:<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]<br>            x = <span class="hljs-built_in">int</span>(str_x)<br>            x = -x<br>        <br>        <span class="hljs-keyword">return</span> x <span class="hljs-keyword">if</span> -(<span class="hljs-number">2</span>**<span class="hljs-number">31</span>)&lt;x&lt;((<span class="hljs-number">2</span>**<span class="hljs-number">31</span>) -<span class="hljs-number">1</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            <br></code></pre></td></tr></table></figure><h3id="思路2将x的值不断模10得到的数字加到res中实现反转">思路2：将x的值不断模10，得到的数字加到res中实现反转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        y, res = <span class="hljs-built_in">abs</span>(x), <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 则其数值范围为 [−2^31,  2^31 − 1]</span><br>        boundry = (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>) -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> x&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span><br>        <span class="hljs-keyword">while</span> y != <span class="hljs-number">0</span>:<br>            res = res*<span class="hljs-number">10</span> +y%<span class="hljs-number">10</span><br>            <span class="hljs-keyword">if</span> res &gt; boundry :<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            y //=<span class="hljs-number">10</span><br>        <span class="hljs-keyword">return</span> res <span class="hljs-keyword">if</span> x &gt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N字形变换</title>
    <link href="/2023/12/13/N%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
    <url>/2023/12/13/N%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="n字形变换">N字形变换</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202312131031946.png"alt="image-20231213102851790" /><figcaption aria-hidden="true">image-20231213102851790</figcaption></figure><h2 id="题解">2、题解</h2><p>给定了输入字符串和要求行数，我们可以设定一个<spanclass="math inline">\(flag=1\)</span>，当到达转折点时对<spanclass="math inline">\(flag\)</span>进行取反，实现<spanclass="math inline">\(N\)</span>形存储。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, numRows: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">if</span> numRows &lt; <span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> s<br>        res = [<span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numRows)]<br>        i, flag = <span class="hljs-number">0</span>, -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>            res[i] += c<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> i == numRows - <span class="hljs-number">1</span>: flag = -flag<br>            i += flag<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(res)<br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析：</h4><ul><li><strong>时间复杂度 O(N)</strong> ：遍历一遍字符串 <spanclass="math inline">\(s\)</span>；</li><li><strong>空间复杂度 O(N) </strong>：各行字符串共占用 <spanclass="math inline">\(O(N)\)</span> 额外空间。</li></ul>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长回文子串</title>
    <link href="/2023/12/07/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <url>/2023/12/07/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="最长回文子串">最长回文子串</h1><h2 id="一题目">一、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202312072247855.png"alt="image-20231207224707335" /><figcaption aria-hidden="true">image-20231207224707335</figcaption></figure><h2 id="二解法">二、解法</h2><h3 id="动态规划">1、动态规划</h3><p>根据回文串的定义，回文串的子串也必然是回文串： <spanclass="math display">\[P(i,j)=\begin{cases}\mathrm{truc},如果子串是回文串\\\mathrm{false},其他情况&amp;\end{cases}\]</span> 可以得到回文串的动态规划边界条件： <spanclass="math display">\[\begin{cases}P(i,i)=\text{true}\\P(i,i+1)=(S_i==S_{i+1})\end{cases}\]</span> 最终答案即是所有<spanclass="math inline">\(P(i,j)=\text{true}\)</span>中<spanclass="math inline">\(j-i+1\)</span>(子串长度)的最大值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        s_length  = <span class="hljs-built_in">len</span>(s)<br><br>        <span class="hljs-keyword">if</span> s_length &lt;<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> s<br><br>        max_length = <span class="hljs-number">1</span> <br>        begin = <span class="hljs-number">0</span><br>        dp = [[<span class="hljs-literal">False</span>]*s_length <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s_length)]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s_length):<br>            dp[i][i] = <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">for</span> L <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,s_length+<span class="hljs-number">1</span>):<br><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s_length):<br><br>                j = L + i - <span class="hljs-number">1</span><br><br>                <span class="hljs-keyword">if</span> j &gt;=s_length:<br>                    <span class="hljs-keyword">break</span><br><br>                <span class="hljs-keyword">if</span> s[i] != s[j]:<br>                    dp[i][j] = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">if</span> j - i&lt;<span class="hljs-number">3</span>:<br>                        dp[i][j] =<span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">else</span>:<br>                        dp[i][j] = dp[i+<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]<br><br>                <span class="hljs-keyword">if</span> dp[i][j] <span class="hljs-keyword">and</span> j-i+<span class="hljs-number">1</span> &gt; max_length:<br>                    max_length = j-i+<span class="hljs-number">1</span><br>                    begin = i<br><br>        <span class="hljs-keyword">return</span> s[begin : begin + max_length]<br></code></pre></td></tr></table></figure><h4 id="复杂度">复杂度</h4><ul><li>时间复杂度：<span class="math inline">\(O(n^2)\)</span></li><li>空间复杂度：<span class="math inline">\(O(n^2)\)</span></li></ul><h3 id="中心扩展法">2、中心扩展法</h3><p>该方法可以理解成第一种方法的逆向思维：即以最短的回文串不断左右扩展，找到最长的回文串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">expandAroundCenter</span>(<span class="hljs-params">self, s, left, right</span>):<br>        <span class="hljs-keyword">while</span> left &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> right &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[left] == s[right]:<br>            left -= <span class="hljs-number">1</span><br>            right += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>, right - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        start, end = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            left1, right1 = self.expandAroundCenter(s, i, i)<br>            left2, right2 = self.expandAroundCenter(s, i, i + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> right1 - left1 &gt; end - start:<br>                start, end = left1, right1<br>            <span class="hljs-keyword">if</span> right2 - left2 &gt; end - start:<br>                start, end = left2, right2<br>        <span class="hljs-keyword">return</span> s[start: end + <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="复杂度-1">复杂度</h4><ul><li>时间复杂度：<span class="math inline">\(O(n^2)\)</span></li><li>空间复杂度：<span class="math inline">\(O(1)\)</span></li></ul><h3 id="manacher暂时没看懂">3、Manacher（暂时没看懂）</h3><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202312072323185.png"alt="image-20231207232341114" /><figcaption aria-hidden="true">image-20231207232341114</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">expand</span>(<span class="hljs-params">self, s, left, right</span>):<br>        <span class="hljs-keyword">while</span> left &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> right &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[left] == s[right]:<br>            left -= <span class="hljs-number">1</span><br>            right += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> (right - left - <span class="hljs-number">2</span>) // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        end, start = -<span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>        s = <span class="hljs-string">&#x27;#&#x27;</span> + <span class="hljs-string">&#x27;#&#x27;</span>.join(<span class="hljs-built_in">list</span>(s)) + <span class="hljs-string">&#x27;#&#x27;</span><br>        arm_len = []<br>        right = -<span class="hljs-number">1</span><br>        j = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> right &gt;= i:<br>                i_sym = <span class="hljs-number">2</span> * j - i<br>                min_arm_len = <span class="hljs-built_in">min</span>(arm_len[i_sym], right - i)<br>                cur_arm_len = self.expand(s, i - min_arm_len, i + min_arm_len)<br>            <span class="hljs-keyword">else</span>:<br>                cur_arm_len = self.expand(s, i, i)<br>            arm_len.append(cur_arm_len)<br>            <span class="hljs-keyword">if</span> i + cur_arm_len &gt; right:<br>                j = i<br>                right = i + cur_arm_len<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">2</span> * cur_arm_len + <span class="hljs-number">1</span> &gt; end - start:<br>                start = i - cur_arm_len<br>                end = i + cur_arm_len<br>        <span class="hljs-keyword">return</span> s[start+<span class="hljs-number">1</span>:end+<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Attention机制</title>
    <link href="/2023/11/21/attention/"/>
    <url>/2023/11/21/attention/</url>
    
    <content type="html"><![CDATA[<h1 id="attention机制">Attention机制</h1><h2 id="一概述">一、概述</h2><p><strong>Attention机制：</strong>对于某个时刻的输出y,他在输入x上各个部分上的注意力（也可以称之为权重），即输入x的各部分对某时刻输出y贡献的权重。目的就是让模型更关注需要关注的信息。</p><h2 id="二经典attention机制">二、经典Attention机制</h2><p>以经典<span class="math inline">\(Seq2Seq\)</span>翻译模型为例，<spanclass="math inline">\(Seq2Seq\)</span>结构包含两个部分：Encoder和Decoder，分别用于对语句进行编码和解码。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311211248592.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><p>如图所示是生成单词<spanclass="math inline">\(machine\)</span>​的计算方式： <spanclass="math display">\[[a_1,a_2,a_3,a_4]=softmax([s(q_2,h_1),s(q_2,h_2),s(q_2,h_3),s(q_2,h_4)])context\quad=\sum_{i=1}^4a_i\cdoth_i\]</span> 将前一时刻的输出状态<spanclass="math inline">\(q_2\)</span>和Encoder输出进行Attention计算，得到一个context。其中<spanclass="math inline">\(s(q_i,h_j)\)</span>表示注意力打分函数，表示当前时刻对Encoder结果的关注程度。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311211249783.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><p>上图为抽象出的Attention原理图。假设有一组输入<spanclass="math inline">\(H=[h_1,h_2,h_3,\ldots,h_n]\)</span>输入上述流程，需要一个Query向量<spanclass="math inline">\(q\)</span>(这个向量往往和你做的任务有关，比如上述例子中用到的<spanclass="math inline">\(q_2\)</span>)，通过一个打分函数计算Query向量和每个输入<spanclass="math inline">\(h_i\)</span>之间的相关性，得出一个分数并进行softmax归一化，最终得到Query向量<spanclass="math inline">\(q\)</span>在各输入<spanclass="math inline">\(h_i\)</span>上的注意力分布<spanclass="math inline">\(a=[a_1,a_2,a_3,\ldots,a_n]\)</span>。 <spanclass="math display">\[a_i=softmax(s(h_i,q))=\frac{exp(s(h_i,q))}{\sum_{j=1}^nexp(s(h_j,q))}\]</span>最后根据注意力分布有选择的提取输入中的信息。这种方式是一种“soft”的信息提取方式，即根据注意力分布对输入信息进行加权求和，最终得到的context体现了模型当前应该关注的内容：<spanclass="math inline">\(context=\sum_{i=1}^na_i\cdot h_i\)</span></p><p>对于打分函数有以下几种形式：</p><ul><li><p>加性模型：<spanclass="math inline">\(s(h,q)=v^Ttanh(Wh+Uq)\)</span></p></li><li><p>点积模型：<spanclass="math inline">\(s(h,q)=h^Tq\)</span>相较于加性模型有更好的计算效率</p></li><li><p>缩放点积模型：<spanclass="math inline">\(s(h,q)=\frac{h^{T}q}{\sqrt{D}}\)</span>当输入维度较高时，相较于点积模型拥有更好的平滑性</p></li><li><p>双线性模型：<spanclass="math inline">\(s(h_i,q)=h^TWq=h^T(U^TV)q=(Uh)^T(Vq)\)</span></p></li></ul><p>上述公式中的参数（<spanclass="math inline">\(W、U、v\)</span>）均为可学习的参数矩阵或向量，<spanclass="math inline">\(D\)</span>为输入向量的维度。</p><h2 id="三一些变体">三、一些变体</h2><h4 id="hard-attention">Hard Attention</h4><p>该方法时根据注意力分布选择输入向量中的一个作为输入，有两种选择方式：</p><ul><li>选择注意力分布中，分数最大的那一项对应的输入向量作为Attention机制的输出。</li><li>根据注意力分布进行随机采样，采样结果作为Attention机制的输出。</li></ul><p>这两种方式的输出会导致损失函数与注意力分布之间的函数关系不可导，无法使用反向传播算法训练模型，该机制通常需要使用强化学习进行训练。</p><h4 id="key-value-pair">key-value pair</h4><p>当输入信息变为<spanclass="math inline">\((K,V)=[(k_1,v_1),(k_2,v_2),\ldots,(k_n,v_n)]\)</span>,这种模式下一般会使用Query向量和相应的键<spanclass="math inline">\(k_i\)</span>进行计算权值<spanclass="math inline">\(a_i\)</span>。</p><h4 id="multi-head-attention">multi-head attention</h4><p>该方法是利用多个Query向量<spanclass="math inline">\(Q=[q_1,q_2,\ldots,q_m]\)</span>,并行地从输入信息<spanclass="math inline">\((K,V)=[(k_1,v_1)，(k_2,v_2),\ldots,(k_n,v_n)]\)</span>中选取多组信息。在查询过程中，每个Query<spanclass="math inline">\(q_i\)</span>​ 将会关注输入信息的不同部分。 <spanclass="math display">\[\begin{aligned}a_{ij}=softmax(s(k_j,q_i))&amp;=\frac{exp(s(k_j,q_i))}{\sum_{t=1}^nexp(s(k_t,q_i))}  \\context_i&amp; =\sum_{j=1}^na_{ij}\cdot v_j\end{aligned}\]</span> <span class="math inline">\(a_{ij}\)</span>表示第<spanclass="math inline">\(i\)</span>个Query向量<spanclass="math inline">\(q_i\)</span>与第<spanclass="math inline">\(j\)</span>个输入信息<spanclass="math inline">\(k_j\)</span>的注意力权重。</p><p>最终将所有Query向量进行拼接作为最终的结果： <spanclass="math display">\[context=context_1\oplus context_2\oplus context_3\oplus\ldots\opluscontext_m\]</span></p><h2 id="四self-attention">四、Self-Attention</h2><p>在上述内容中提及的Query向量往往和任务相关，然而在self-attention中，Query向量可以使用输入信息进行生成，相当于模型读取输入信息后，根据信息本身决定当前最重要的信息。</p><p>自注意力机制往往采用<spanclass="math inline">\(Query-Key-Value\)</span>的模型，以BERT中为例：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311211326353.png"alt="图3" /><figcaption aria-hidden="true">图3</figcaption></figure><p>如图所示：输入信息<spanclass="math inline">\(H=[h_1,h_2]\)</span>,蓝色矩阵每行对应一个输入，<spanclass="math inline">\(W_q,W_k,W_v\)</span>​负责将输入信息分别转换到对应的Query空间、Key空间和Value空间：<span class="math display">\[\begin{gathered}\begin{bmatrix}q_1=h_1W_q\\q_2=h_2W_q\end{bmatrix}\RightarrowQ=HW_q\\\\\begin{bmatrix}k_1=h_1W_k\\k_2=h_2W_k\end{bmatrix}\RightarrowK=HW_k\\\\\begin{bmatrix}v_1=h_1W_v\\v_2=h_2W_v\end{bmatrix}\RightarrowV=HW_v\end{gathered}\]</span> 以<spanclass="math inline">\(h_1\)</span>为例，计算该位置上的attention输出向量<spanclass="math inline">\(context_1\)</span>，来展示具体过程(下图流程中分数计算采用的是点积操作。<spanclass="math inline">\(D_k\)</span>是<spanclass="math inline">\(Q、K\)</span>矩阵的列数，即向量维度)：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311211332846.png"alt="图4" /><figcaption aria-hidden="true">图4</figcaption></figure><p>根据上图self-attention的输出向量计算过程可以总结成一个经典公式：<span class="math display">\[context=softmax(\frac{QK^T}{\sqrt{D_k}})V\]</span></p><h3 id="相关经典问题">相关经典问题</h3><h4 id="为什么要对qkt进行scaling">为什么要对<spanclass="math inline">\(QK^T\)</span>进行scaling</h4><p>如果不进行scaling，当<spanclass="math inline">\(D_k\)</span>增大时，<spanclass="math inline">\(QK^T\)</span>的方差会增大<spanclass="math inline">\(\sqrt{D_k}\)</span>倍。而<spanclass="math inline">\(QK^T\)</span>作为<spanclass="math inline">\(softmax\)</span>的输入如果增大容易导致梯度消失。</p><h4 id="self-attention表达是固定嘛">self-attention表达是固定嘛</h4><p>不一定，只要可以建模相关性就可以。最好是能够高速计算(矩阵乘法)，并且表达能力强，模型容量够。</p><h4 id="是否有其他方法不用除sqrtd_k">是否有其他方法不用除<spanclass="math inline">\(\sqrt{D_k}\)</span></h4><p>有，只要能缓解梯度消失的问题就可以，例如<spanclass="math inline">\(T5\)</span>模型的<spanclass="math inline">\(Xavier\)</span>初始化。<spanclass="math inline">\(Xavier\)</span>初始化试图让神经网络每一层的输出的方差接近于其输入的方差。具体而言，该方法将权重<spanclass="math inline">\(w\)</span>​的方差初始化为： <spanclass="math display">\[Var(w)=\frac{2}{n_{in}+n_{out}}\]</span></p><h5 id="作用">作用：</h5><ol type="1"><li>有效防止梯度消失或爆炸：Xavier初始化试图使得每一层的输出的方差接近于其输入的方差，从而避免梯度消失或梯度爆炸的问题。</li><li>加速收敛：Xavier初始化使得每一层的输出的方差接近于其输入的方差，从而使得每一层的<strong>梯度的方差</strong>接近于1。这样，每一层的参数更新的幅度就不会相差太大，从而加速收敛。</li></ol>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>八股</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 日志logging</title>
    <link href="/2023/11/20/Python-log/"/>
    <url>/2023/11/20/Python-log/</url>
    
    <content type="html"><![CDATA[<h1 id="python-日志logging">Python 日志logging</h1><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311201523221.png"alt="image-20231120152320128" /><figcaption aria-hidden="true">image-20231120152320128</figcaption></figure><p>日志功能需要根据追踪事件的级别和严重性而定：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311201524357.png"alt="image-20231120152440314" /><figcaption aria-hidden="true">image-20231120152440314</figcaption></figure><p>Python的logging库采用模块化方法，并且提供了一些组件：</p><ul><li>记录器（Logger）：提供应用程序代码直接使用的接口。</li><li>处理器（Handler）：将日志记录（由记录器创建）发送到适当的目的地。</li><li>筛选器（Filter）：提供了更细粒度的功能，用于确定要输出的日志记录。</li><li>格式器（Formatter）：程序在最终输出日志记录的内容格式。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>LOG_FORMAT = <span class="hljs-string">&quot;%(asctime)s - %(levelname)s %(name)s %(filename)s [line:%(lineno)d] - %(message)s&quot;</span><br>logging.basicConfig(filename=<span class="hljs-string">&#x27;log.log&#x27;</span>,<span class="hljs-built_in">format</span>=LOG_FORMAT,level=logging.DEBUG)<span class="hljs-comment">#设置日志级别并记录到日志文件</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_log</span>(<span class="hljs-params">name</span>):<br>    logging.debug(<span class="hljs-string">&#x27;this is print_hi debug&#x27;</span>)<br>    logging.info(<span class="hljs-string">&#x27;this is print_hi info&#x27;</span>)<br>    logging.warning(<span class="hljs-string">&#x27;this is print_hi warning&#x27;</span>)<br>    logging.error(<span class="hljs-string">&#x27;this is print_hi error&#x27;</span>)<br>    logging.critical(<span class="hljs-string">&#x27;this is print_hi critical&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Hi print_hi, <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    print_log(<span class="hljs-string">&#x27;zz&#x27;</span>)<br></code></pre></td></tr></table></figure><p>LogRecord属性如下：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311201533099.png"alt="image-20231120153329049" /><figcaption aria-hidden="true">image-20231120153329049</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码技能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPN ——特征金字塔</title>
    <link href="/2023/11/07/FPN/"/>
    <url>/2023/11/07/FPN/</url>
    
    <content type="html"><![CDATA[<h1 id="fpn-特征金字塔">FPN ——特征金字塔</h1><p>论文链接：<ahref="https://openaccess.thecvf.com/content_cvpr_2017/papers/Lin_Feature_Pyramid_Networks_CVPR_2017_paper.pdf">FeaturePyramid Networks for Object Detection (thecvf.com)</a></p><h2 id="模型简介">模型简介</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071847681.png"alt="image-20231107155943324" /><figcaption aria-hidden="true">image-20231107155943324</figcaption></figure><ul><li>以特征金字塔为基础结构，对每一层级的特征图分别进行预测。</li><li>这种网络结构，能够在增加较少计算量的前提下融合低分辨率语义信息较强的特征图和高分辨率语义信息较弱但空间信息丰富的特征图。</li></ul><h2 id="模型结构">模型结构</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071601619.png"alt="image-20231107160159580" /><figcaption aria-hidden="true">image-20231107160159580</figcaption></figure><h4 id="bottom-up-pathway">1：Bottom-up pathway</h4><p>前馈Backbone（主干网络）的一部分，每一级向上使用step=2的降采样（降采样：每个类别被选择的概率是原始样本数量的倒数）。</p><p>输出size相同的网络部分称为一个stage，选择每一个stage的最后一层输出作为特征图的参考集。</p><p>以fasterRCNN的网络结构为例，左列ResNet用每级最后一个ResidualBlock的输出，记为{C1,C2,C3,C4,C5}。</p><p>FPN用2~5级参与预测(因为第一级的语义还是太低了)，{C2,C3,C4,C5}表示conv2，conv3，conv4和conv5的输出层(最后一个残差block层)作为FPN的特征，分别对应于输入图片的下采样倍数为{4，8，16，32}。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071839345.png"alt="image-20231107183949269" /><figcaption aria-hidden="true">image-20231107183949269</figcaption></figure><h4 id="top-down-pathway-and-lateral-connections">2：Top-down pathwayand lateral connections</h4><p>自顶向下的过程通过上采样(up-sampling)的方式将顶层的小特征图。放大到上一个stage的特征图一样的大小。</p><p>上采样的方法是最近邻插值法：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071845690.png"alt="image-20231107184543643" /><figcaption aria-hidden="true">image-20231107184543643</figcaption></figure><p>通过自底向上路径，FPN得到了四组Feature Map。浅层的FeatureMap，例如C2含有更多的底层信息（纹理，颜色等），而深层的FeatureMap如C5含有更多的语义信息。为了将这四组倾向不同特征的FeatureMap组合起来，FPN使用了自顶向下及横向连接的策略，最终得到P2，P3，P4，P5四个输出。</p><p>以P3为例，P3是由P4和C3共同得到，其中P4的通道数已经是 256了，但是它的大小只是P3的 1/2，因为我们使用上采样将它的尺寸增加到C3的大小，FPN中使用的上采样策略是最近邻居采样。继续，因为C3的通道数是128，而我们需要的P3的通道数是256，所以这里使用1×1 卷积将C3的通道数扩充到 256 。最后P3是P4的上采样的FeatureMap和C3的调整通道数的Feature Map的单位加。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311071846070.png"alt="image-20231107184628008" /><figcaption aria-hidden="true">image-20231107184628008</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>Multimodal Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从数量最多的堆取走礼物</title>
    <link href="/2023/10/30/min-gifts/"/>
    <url>/2023/10/30/min-gifts/</url>
    
    <content type="html"><![CDATA[<h1 id="从数量最多的堆取走礼物">从数量最多的堆取走礼物</h1><h2 id="题目">1、题目</h2><p><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310302316265.png"alt="image-20231030225117425" /> ## 2、题解</p><p>思路：每轮都寻找最大值，可以最大堆模拟。循环<spanclass="math inline">\(k\)</span>次，每次循环弹出堆顶<spanclass="math inline">\(top\)</span>，然后把<spanclass="math inline">\(\lfloor\sqrt{top}\rfloor\)</span>入堆。</p><p>题解代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pickGifts</span>(<span class="hljs-params">self, gifts: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(gifts)):<br>            gifts[i] *= -<span class="hljs-number">1</span><br>        heapify(gifts)<br>        <span class="hljs-built_in">print</span>(gifts)<br>        <span class="hljs-keyword">while</span> k <span class="hljs-keyword">and</span> -gifts[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">1</span>:<br>            heapreplace(gifts,-isqrt(-gifts[<span class="hljs-number">0</span>]))<br>            k -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-built_in">sum</span>(gifts)<br></code></pre></td></tr></table></figure><p>我的方法（时间复杂度被爆杀）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pickGifts</span>(<span class="hljs-params">self, gifts: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">while</span>(k != <span class="hljs-number">0</span>):<br>            temp=<span class="hljs-number">0</span><br>            temp_num = gifts[<span class="hljs-number">0</span>]     <br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(gifts)):<br>                <span class="hljs-keyword">if</span> gifts[i]&gt;temp_num:<br>                    temp_num = gifts[i]<br>                    temp = i  <br>          <br>            gifts[temp] = <span class="hljs-built_in">int</span>(gifts[temp] **<span class="hljs-number">0.5</span>)<br>            k = k -<span class="hljs-number">1</span><br>        sum_gifts = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(gifts)):<br>            sum_gifts += gifts[j]<br>        <span class="hljs-keyword">return</span> sum_gifts<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Better Few-Shot Relation Extraction with Label Prompt Dropout</title>
    <link href="/2023/10/30/LPD/"/>
    <url>/2023/10/30/LPD/</url>
    
    <content type="html"><![CDATA[<h1id="better-few-shot-relation-extraction-with-label-prompt-dropout">《BetterFew-Shot Relation Extraction with Label Prompt Dropout》</h1><p>原文链接：<ahref="https://arxiv.org/pdf/2210.13733.pdf">arxiv.org/pdf/2210.13733.pdf</a></p><p>源码链接：<a href="https://github.com/jzhang38/LPD">jzhang38/LPD:code for EMNLP 2022 paper Better Few-Shot Relation Extraction with LabelPrompt Dropout (github.com)</a></p><h2 id="概述">1、概述</h2><p>​ 本文提出了一种新方法——LPD（Label PromptDropout），该方法将文本标签与上下文句子连接后传入TransformerEncoder。用文本标签代替标签提示符，知道Encoder关注自身输出标签感知的关系表示。在训练期间，模型还会随机删除提示符号来使模型学会在使用（不使用）关系描述的情景下进行训练。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310281431443.png"alt="image-20231028143111344" /><figcaption aria-hidden="true">image-20231028143111344</figcaption></figure><h2 id="模型构建">2、模型构建</h2><h3 id="training-with-label-prompt-dropout">2.1 Training with LabelPrompt Dropout</h3><ul><li><p>每个输入实例都是由<span class="math inline">\(:\)</span>将labelprompt和上下文文本连接起来，来让TransformerEncoder学习到标签的关系表示。</p></li><li><p>以一定概率随机剔除labelprompt来防止模型依赖prompt而忽略上下文文本。</p></li><li><p>使用特殊标记来标记上下文文本头尾以及分离token，例如：“[CLS]location of event: [E1] Beijing [/E1] held the [E2] 2022 winter Olympics[/E2] .”并将分离token起始位置的最后一层表示连接起来：<spanclass="math inline">\(r=[\mathrm{Encoder}(x)_h;\mathrm{Encoder}(x)_t]\)</span>,h表示[E1]的位置，t表示[E2]的位置，r为关系表示。</p></li><li><p>对于K-way- n-shot学习，对一个类中K个支持实例的关系表示进行平均，以获得类原型。然后计算查询实例与每个类原型之间的点积，作为交叉熵损失中的logit:<span class="math display">\[\begin{gathered}u^{n}={\frac{1}{K}}\sum_{k=1}^{K}r_{k}^{n} \\{\mathcalL}_{train}=-\sum_{n=1}^{N}\log\frac{\exp(r_{q}^{\mathsf{T}}u^{n})}{\sum_{n^{\prime}=1}^{N}\exp(r_{q}^{\mathsf{T}}u^{n^{\prime}})}\end{gathered}\]</span> <spanclass="math inline">\(r_{k}^{n}\)</span>代表n类的k-th支持实例，<spanclass="math inline">\(r_{q}\)</span>事 查询实例的关系表示。</p></li></ul><h3 id="testing-with-prompt-guided-prototypes">2.2 Testing with PromptGuided Prototypes</h3><p>LPD在测试中不会dropout任何支持实例的labelprompt，而是将二者一起输入。通过找到与查询关系表示最接近的类原型来输出预测：<spanclass="math inline">\(\hat{y}_{num}=\arg\max_{n}r_{q}^{\top}u^{n}\)</span></p><h3 id="contrastive-pre-training-with-label-prompt-dropout">2.3Contrastive Pre-training with Label Prompt Dropout</h3><p>本文遵循MT-BERT框架，对对比预训练中使用的正样本和负样本进行抽样。给定一个知识图<spanclass="math inline">\(K\)</span>和两个具有实体对（h1,t1）和（h2,t2）的句子，如果K定义了一个关系R，使得（h1,t1）和（h2,t2）属于R，则两个句子标记为正样本，否则作为负样本。如图2所示：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310301501515.png"alt="image-20231030150103412" /><figcaption aria-hidden="true">image-20231030150103412</figcaption></figure><p>预训练阶段的每个实例与训练阶段的支持实例进行相同的转换。在每个句子前加上一个标签提示，并在句子中插入特殊的标记。使用对比损失来训练模型:<spanclass="math inline">\(\mathcal{L}_{CP}=-\log\frac{\exp(r_Ar_B)}{\exp(r_Ar_B)+\sum_{i=1}^N\exp(r_Ar_B^i)}\)</span>。式中<spanclass="math inline">\((r_A, r_B)\)</span>为正对，<spanclass="math inline">\((r_A, r_{B}^{i})， 1≤i≤N\)</span>为负对。</p><p>使用掩码语言建模目标(LMLM)来维持模型的语言理解能力。所以最终的预训练损失变成:<spanclass="math inline">\({\mathcal L}_{pre-train}={\mathcalL}_{CP}+{\mathcal L}_{MLM}\)</span></p><h2 id="实验结果">3、实验结果</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310301542385.png"alt="image-20231030154246339" /><figcaption aria-hidden="true">image-20231030154246339</figcaption></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310301542382.png"alt="image-20231030154252348" /><figcaption aria-hidden="true">image-20231030154252348</figcaption></figure><p>LPD模型在不同类和样本数下的准确率都比以往的模型更高。 ##4、代码复现</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311041438026.png"alt="image-20231104143744033" /><figcaption aria-hidden="true">image-20231104143744033</figcaption></figure><p>解决方法：手动下载模型并保存在代码目录下</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311041439419.png"alt="image-20231104143920391" /><figcaption aria-hidden="true">image-20231104143920391</figcaption></figure><p>解决方法：修改源代码中的apex-master/apex/amp/utils.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">将 <span class="hljs-keyword">if</span> cached_x.grad_fn.next_functions[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].variable <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> x:<br>改为 <span class="hljs-keyword">if</span> cached_x.grad_fn.next_functions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].variable <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> x:<br></code></pre></td></tr></table></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202311051452680.png"alt="image-20231105145252512" /><figcaption aria-hidden="true">image-20231105145252512</figcaption></figure><p>解决方法：首先检查pytorch和CUDA版本是否兼容，其次修改脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> seed <span class="hljs-keyword">in</span> 43<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">for</span> Nway <span class="hljs-keyword">in</span> 10<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">for</span> Kshot <span class="hljs-keyword">in</span> 1<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">for</span> prob <span class="hljs-keyword">in</span>  0.4 <br><span class="hljs-keyword">do</span><br>CUDA_VISIBLE_DEVICES=0 python train_demo.py \<br>--trainN <span class="hljs-variable">$&#123;Nway&#125;</span> --N <span class="hljs-variable">$&#123;Nway&#125;</span> --K <span class="hljs-variable">$&#123;Kshot&#125;</span> --Q 1 \<br>--val val_wiki --<span class="hljs-built_in">test</span> val_wiki \<br>--model proto --encoder bert --hidden_size 768 --val_step 1000 \<br>--mode CM \<br>  --batch_size 4 --fp16 \<br>--seed <span class="hljs-variable">$&#123;seed&#125;</span> \<br>--path  ./checkpoint/20231103 --save_ckpt ./checkpoint/20231103_finetune  --label_mask_prob <span class="hljs-variable">$&#123;prob&#125;</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Few Shot -Relation Exaction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无重复字符的最长子串</title>
    <link href="/2023/10/24/no-repeated-substr/"/>
    <url>/2023/10/24/no-repeated-substr/</url>
    
    <content type="html"><![CDATA[<h1 id="无重复字符的最长子串">无重复字符的最长子串</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310242157172.png"alt="image-20231024215656387" /><figcaption aria-hidden="true">image-20231024215656387</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="滑动窗口哈希表">1 滑动窗口+哈希表</h4><p>思路：</p><p>哈希表<span class="math inline">\(dic\)</span>统计字符串<spanclass="math inline">\(s\)</span>中每个字符最后出现的位置。</p><p>设置两个指针<span class="math inline">\(i、j\)</span>，<spanclass="math inline">\(j\)</span>指针遍历字符串，当遍历到重复字符时，<spanclass="math inline">\(i\)</span>指针根据上轮的<spanclass="math inline">\(i\)</span>和<spanclass="math inline">\(dic[s[j]]\)</span>更新，保证区间<spanclass="math inline">\([i+1,j]\)</span>中无重复字符且最大。</p><p>每轮的结果为上轮结果和本轮双指针区间长度中的最大值。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dic = &#123;&#125;<br>        res = <span class="hljs-number">0</span><br>        i = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> s[j] <span class="hljs-keyword">in</span> dic:<br>                i=<span class="hljs-built_in">max</span>(dic[s[j]], i)<br>            dic[s[j]] = j<br>            res = <span class="hljs-built_in">max</span>(res, j-i)<br>        <span class="hljs-keyword">return</span> res     <br></code></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li>时间复杂度<span class="math inline">\(O(N)\)</span> ： 其中 <spanclass="math inline">\(N\)</span> 为字符串长度，动态规划需遍历计算 <spanclass="math inline">\(dp\)</span>列表。</li><li>空间复杂度 <span class="math inline">\(O(1)\)</span> ： 字符的 ASCII码范围为$ 0 ~ 127$ ，哈希表 <span class="math inline">\(dic\)</span>最多使用 <span class="math inline">\(O(128)=O(1)\)</span>大小的额外空间。</li></ul><h4 id="动态规划哈希表">2 动态规划+哈希表</h4><p>思路：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310242220731.png"alt="image-20231024222023682" /><figcaption aria-hidden="true">image-20231024222023682</figcaption></figure><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310242221862.png"alt="image-20231024222111824" /><figcaption aria-hidden="true">image-20231024222111824</figcaption></figure><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dic = &#123;&#125;<br>        res = tmp = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            i = dic.get(s[j], -<span class="hljs-number">1</span>) <span class="hljs-comment"># 获取索引 i</span><br>            dic[s[j]] = j <span class="hljs-comment"># 更新哈希表</span><br>            tmp = tmp + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> tmp &lt; j - i <span class="hljs-keyword">else</span> j - i <span class="hljs-comment"># dp[j - 1] -&gt; dp[j]</span><br>            res = <span class="hljs-built_in">max</span>(res, tmp) <span class="hljs-comment"># max(dp[j - 1], dp[j])</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树深度</title>
    <link href="/2023/10/20/Tree-depth/"/>
    <url>/2023/10/20/Tree-depth/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树深度">二叉树深度</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310201609450.png"alt="image-20231020160911754" /><figcaption aria-hidden="true">image-20231020160911754</figcaption></figure><h2 id="题解">2、题解</h2><h4 id="方法1递归">方法1：递归</h4><p>思路：如果结点存在则返回结点左右子树深度的最大值加1（<spanclass="math inline">\(root_{depth}=max(left_{depth},right_{depth})+1\)</span>）,如果</p><p>左右子树为空则返回0。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">TreeDepth</span>(<span class="hljs-params">self , pRoot: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pRoot:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>([self.TreeDepth(pRoot.left),self.TreeDepth(pRoot.right)]) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="方法2层遍历">方法2：层遍历</h4><p>思路：遍历每层的结点，用队列对结点进行存储。每次存储下一层结点时，深度加1。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self , root: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 空节点没有深度</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 队列维护层次后续节点</span><br>        q= queue.Queue() <br>        <span class="hljs-comment"># 根入队</span><br>        q.put(root) <br>        <span class="hljs-comment"># 记录深度</span><br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 层次遍历</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty(): <br>            <span class="hljs-comment"># 记录当前层有多少节点</span><br>            n = q.qsize() <br>            <span class="hljs-comment"># 遍历完这一层，再进入下一层</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n): <br>                node = q.get()<br>                <span class="hljs-comment"># 添加下一层的左右节点</span><br>                <span class="hljs-keyword">if</span> node.left: <br>                    q.put(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    q.put(node.right)<br>            <span class="hljs-comment"># 深度加1</span><br>            res += <span class="hljs-number">1</span> <br>        <span class="hljs-keyword">return</span> res<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prompt-Based Learning</title>
    <link href="/2023/10/18/Prompt-Based-Learning/"/>
    <url>/2023/10/18/Prompt-Based-Learning/</url>
    
    <content type="html"><![CDATA[<h1 id="prompt-based-learning">Prompt-Based Learning</h1><p>prompt-basedlearning可以理解成一种范式，分为三个过程：pre-train、prompt、predict。为了提升模型在下游任务中的表现，在prompt阶段对下游任务进行重构，从而适配pre-train的模型。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310171117714.png"alt="image-20231017111256672" /><figcaption aria-hidden="true">image-20231017111256672</figcaption></figure><p>左边是微调方法的示意图，右边是prompt方法的示意图。</p><h4 id="如何进行重构">如何进行重构？</h4><p>假设输入文本为x，构造一个函数<spanclass="math inline">\(f_{prompt}(x)\)</span>,将输入文本进行转化：<spanclass="math inline">\({x}^{&#39;}=f_{prompt}(x)\)</span>。函数主要实现两个目的：</p><ul><li><p>选用一个由文本组成的模板，模板有两个槽位，[X]槽位用于填充输入<span class="math inline">\(x\)</span> ，[Z]槽位用于生成答案 <spanclass="math inline">\(z\)</span> （之后会被映射为标准的输出 <spanclass="math inline">\(y\)</span> ）</p></li><li><p>将输入 <span class="math inline">\(x\)</span>填入[X]槽位</p></li></ul><p>例如：情感分类任务中，令 <span class="math inline">\(x\)</span> ="Ilove this movie."，选用模板"[X] Overall, it was a [Z] movie."，则 <spanclass="math inline">\({x}^{&#39;}\)</span>="I love this movie. Overall,it was a [Z] movie."。至此，情感分类任务被重构为cloze task。</p><h5 id="ps">PS：</h5><ul><li>[Z]可以出现在模板的中间位置，也可以出现在模板的末尾，这两种情况也分别被称为clozeprompt、prefix prompt</li><li>组成模板的token，可以是自然语言中真实的word，也可以是虚拟的word（在embedding层以向量形式存在）</li><li>[X]和[Z]slot的数量不受限，可依实际任务而定</li></ul><h4 id="如何对重构后的任务求解">如何对重构后的任务求解？</h4><p>首先是利用pre-train的模型对重构后的<spanclass="math inline">\(x^{&#39;}\)</span>的slot进行预测，输出得分最高的token<spanclass="math inline">\(z^{&#39;}\)</span>。生成任务中，<spanclass="math inline">\(z\)</span>的取值集合可以无限制。</p><p>第二步是将中间输出<spanclass="math inline">\(z^{&#39;}\)</span>映射为最终输出<spanclass="math inline">\(y^{&#39;}\)</span>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>删除链表的节点</title>
    <link href="/2023/10/16/del-node/"/>
    <url>/2023/10/16/del-node/</url>
    
    <content type="html"><![CDATA[<h1 id="删除链表的节点"><strong>删除链表的节点</strong></h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310162228787.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="解法">2、解法</h2><ul><li>首先加入一个头部节点，方便于如果可能的话删除掉第一个元素。</li><li>准备两个指针遍历链表，一个指针指向当前要遍历的元素，另一个指针指向该元素的前序节点，便于获取它的指针。</li><li>遍历链表，找到目标节点，则断开连接，指向后一个。</li><li>返回时去掉加入的头节点。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteNode</span>(<span class="hljs-params">self , head: ListNode, val: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:<br>        <span class="hljs-comment">#加入一个头节点</span><br>        res = ListNode(<span class="hljs-number">0</span>)<br>        res.<span class="hljs-built_in">next</span> = head<br>        <span class="hljs-comment">#前序节点</span><br>        pre = res<br>        <span class="hljs-comment">#当前节点</span><br>        cur = head<br>        <span class="hljs-comment">#遍历链表</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment">#找到目标节点</span><br>            <span class="hljs-keyword">if</span> cur.val == val:<br>                <span class="hljs-comment">#断开连接</span><br>                pre.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">break</span><br>            pre = cur<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment">#返回去掉头节点</span><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>删除链表中重复的结点</title>
    <link href="/2023/10/11/del-repeated-node/"/>
    <url>/2023/10/11/del-repeated-node/</url>
    
    <content type="html"><![CDATA[<h1 id="删除链表中重复的结点">删除链表中重复的结点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310112319059.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="解题">2、解题</h2><h4 id="直接删除">1：直接删除</h4><p>思路：</p><ol type="1"><li>给链表添加一个表头。</li><li>遍历链表，每次比较相邻两个节点，如果遇到了两个相邻节点相同，则新开内循环将这一段所有的相同都遍历过去。</li><li>在第二步中这一连串相同的节点前的节点直接连上后续第一个不相同值的节点。</li><li>返回时去掉添加的表头。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplication</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        <span class="hljs-comment">//空链表</span><br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span>) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//在链表前加一个表头</span><br>        res.next = pHead; <br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> res;<br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.next != <span class="hljs-literal">null</span>)&#123; <br>            <span class="hljs-comment">//遇到相邻两个节点值相同</span><br>            <span class="hljs-keyword">if</span>(cur.next.val == cur.next.next.val)&#123; <br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> cur.next.val;<br>                <span class="hljs-comment">//将所有相同的都跳过</span><br>                <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.val == temp) <br>                    cur.next = cur.next.next;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <br>                cur = cur.next;<br>        &#125;<br>        <span class="hljs-comment">//返回时去掉表头</span><br>        <span class="hljs-keyword">return</span> res.next; <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="哈希表">2：哈希表</h4><p>思路：该题是有序链表，可以直接与旁边的元素比较，删除重复的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplication</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        <span class="hljs-comment">//空链表</span><br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span>) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Map&lt;Integer,Integer&gt; mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pHead;<br>        <span class="hljs-comment">//遍历链表统计每个节点值出现的次数</span><br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123; <br>            <span class="hljs-keyword">if</span>(mp.containsKey(cur.val))<br>                mp.put(cur.val, (<span class="hljs-type">int</span>)mp.get(cur.val) + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                mp.put(cur.val,<span class="hljs-number">1</span>);<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//在链表前加一个表头</span><br>        res.next = pHead; <br>        cur = res;<br>        <span class="hljs-comment">//再次遍历链表</span><br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//如果节点值计数不为1 </span><br>            <span class="hljs-keyword">if</span>(mp.get(cur.next.val) != <span class="hljs-number">1</span>) <br>                <span class="hljs-comment">//删去该节点</span><br>                cur.next = cur.next.next; <br>            <span class="hljs-keyword">else</span><br>                cur = cur.next; <br>        &#125;<br>        <span class="hljs-comment">//去掉表头</span><br>        <span class="hljs-keyword">return</span> res.next; <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表中倒数最后k个结点</title>
    <link href="/2023/10/11/list-last-knode/"/>
    <url>/2023/10/11/list-last-knode/</url>
    
    <content type="html"><![CDATA[<h1 id="链表中倒数最后k个结点">链表中倒数最后k个结点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310111252662.png"alt="image-20231011125251579" /><figcaption aria-hidden="true">image-20231011125251579</figcaption></figure><h2 id="解法">2、解法</h2><h4 id="双指针">1：双指针</h4><p>思路：第一个指针先移动k步，然后第二个指针再从头开始，这个时候这两个指针同时移动，当第一个指针到链表的末尾的时候，返回第二个指针即可。注意，如果第一个指针还没走k步的时候链表就为空了，直接返回<code>null</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">FindKthToTail</span><span class="hljs-params">(ListNode pHead, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pHead == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> pHead;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> pHead;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> pHead;<br>    <span class="hljs-comment">//第一个指针先走k步</span><br>    <span class="hljs-keyword">while</span> (k-- &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        first = first.next;<br>    &#125;<br>    <span class="hljs-comment">//然后两个指针在同时前进</span><br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span>) &#123;<br>        first = first.next;<br>        second = second.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> second;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="栈">2：栈</h4><p>思路：把原链表的结点全部压栈，然后再把栈中最上面的k个节点出栈，出栈的结点重新串成一个新的链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">FindKthToTail</span><span class="hljs-params">(ListNode pHead, <span class="hljs-type">int</span> k)</span> &#123;<br>    Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-comment">//链表节点压栈</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pHead != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(pHead);<br>        pHead = pHead.next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count &lt; k || k == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//在出栈串成新的链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">firstNode</span> <span class="hljs-operator">=</span> stack.pop();<br>    <span class="hljs-keyword">while</span> (--k &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> stack.pop();<br>        temp.next = firstNode;<br>        firstNode = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> firstNode;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表中环的入口结点</title>
    <link href="/2023/10/09/circle-entrance/"/>
    <url>/2023/10/09/circle-entrance/</url>
    
    <content type="html"><![CDATA[<h1 id="链表中环的入口结点">链表中环的入口结点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310092233113.png"alt="image-20231009223317010" /><figcaption aria-hidden="true">image-20231009223317010</figcaption></figure><h2 id="解题思路">2、解题思路</h2><h4 id="思路双指针">思路：双指针</h4><p>一快一慢指针。快指针每次跑两个element，慢指针每次跑一个。如果存在一个圈，经过一段时间后，快指针是能追上慢指针的。</p><p>如图所示，假设链表头到环入口结点X的距离为A，两指针相遇的结点为Y，X到Y的距离为B，Y到X的距离为C。设快指针进入环后经过n圈与慢指针相遇，根据假设可得到等式：<spanclass="math inline">\(2(A+B)=A+nB+(n-1)C\)</span>。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310092246110.png"alt="image-20231009224631071" /><figcaption aria-hidden="true">image-20231009224631071</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    ListNode(<span class="hljs-type">int</span> val) &#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">EntryNodeOfLoop</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        <br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span> || pHead.next == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        ListNode fast=pHead;<br>        ListNode slow=pHead;<br><br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>)&#123;<br>            fast = fast.next.next;<br>            slow = slow.next;<br><br>            <span class="hljs-keyword">if</span>(fast==slow)&#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow2</span> <span class="hljs-operator">=</span> pHead;<br>                <span class="hljs-keyword">while</span>(slow2 != slow)&#123;<br>                    slow = slow.next;<br>                    slow2 = slow2.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> slow2;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#自己写的幽默代码</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">detectCycle</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <br>        <br>        a=head<br>        b=head<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><br>            <span class="hljs-keyword">if</span> a.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> ==<span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            <br>            a = a.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            b=b.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> a==b:<br>                c=head<br>                <span class="hljs-keyword">while</span> c!=b:<br>                    c=c.<span class="hljs-built_in">next</span><br>                    b=b.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">return</span> c<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment">#题解</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">detectCycle</span>(<span class="hljs-params">self, head</span>):<br>        fast, slow = head, head<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (fast <span class="hljs-keyword">and</span> fast.<span class="hljs-built_in">next</span>): <span class="hljs-keyword">return</span><br>            fast, slow = fast.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>, slow.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> fast == slow: <span class="hljs-keyword">break</span><br>        fast = head<br>        <span class="hljs-keyword">while</span> fast != slow:<br>            fast, slow = fast.<span class="hljs-built_in">next</span>, slow.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> fast<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数相加</title>
    <link href="/2023/10/09/two-nums-plus/"/>
    <url>/2023/10/09/two-nums-plus/</url>
    
    <content type="html"><![CDATA[<h1 id="两数相加">两数相加</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310090824747.png"alt="image-20231009082429629" /><figcaption aria-hidden="true">image-20231009082429629</figcaption></figure><h2 id="解法">2、解法</h2><h4 id="迭代">迭代</h4><p>两个链表存储方式相同，所以同一位置上的数字可以直接相加。设当前两个链表结点处相应位置的数字为<spanclass="math inline">\(n_1,n_2\)</span>,进位值为<spanclass="math inline">\(carry\)</span>,则和为<spanclass="math inline">\(n_1+n_2+carry\)</span>;其中答案链表对应结点位置的数为<spanclass="math inline">\((n_1+n_2+carry)mod10\)</span>,新的进位值为<spanclass="math inline">\(⌊(n_1+n_2+carry)/10⌋\)</span>。</p><p>如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个0。此外，如果链表遍历结束后，有 <spanclass="math inline">\(carry&gt;0\)</span>，还需要在答案链表的后面附加一个节点，节点的值为<spanclass="math inline">\(carry\)</span>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, tail = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(l1!= <span class="hljs-literal">null</span>||l2 != <span class="hljs-literal">null</span>)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> (l1 != <span class="hljs-literal">null</span>)? l1.val:<span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> (l2 != <span class="hljs-literal">null</span>)? l2.val:<span class="hljs-number">0</span>;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> num1 + num2 +carry;<br><br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>                head = tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum%<span class="hljs-number">10</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum%<span class="hljs-number">10</span>);<br>                tail = tail.next;<br>            &#125;<br>            carry = sum/<span class="hljs-number">10</span>;<br><br>            <span class="hljs-keyword">if</span>(l1!=<span class="hljs-literal">null</span>)&#123;<br>                l1 = l1.next;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(l2!=<span class="hljs-literal">null</span>)&#123;<br>                l2 = l2.next;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(carry&gt;<span class="hljs-number">0</span>)&#123;<br>            tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1: <span class="hljs-type">Optional</span>[ListNode], l2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        cur = dummy = ListNode()<br>        flag = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">or</span> l2 <span class="hljs-keyword">or</span> flag:<br>            flag += (l1.val <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)+(l2.val <span class="hljs-keyword">if</span> l2 <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)<br>            cur.<span class="hljs-built_in">next</span> = ListNode(flag%<span class="hljs-number">10</span>)<br>            flag //= <span class="hljs-number">10</span><br>            cur =cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> l1: l1=l1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> l2: l2=l2.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个链表的第一个公共结点</title>
    <link href="/2023/10/07/two-list-together-node/"/>
    <url>/2023/10/07/two-list-together-node/</url>
    
    <content type="html"><![CDATA[<h1 id="两个链表的第一个公共结点">两个链表的第一个公共结点</h1><h2 id="题目">1、题目</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310072142049.png"alt="image-20231007214226007" /><figcaption aria-hidden="true">image-20231007214226007</figcaption></figure><h2 id="解法">2、解法</h2><h4 id="思路">思路：</h4><p>使用两个指针N1,N2，一个从链表1的头节点开始遍历，我们记为N1，一个从链表2的头节点开始遍历，我们记为N2。</p><p>让N1和N2一起遍历，当N1先走完链表1的尽头（为null）的时候，则从链表2的头节点继续遍历，同样，如果N2先走完了链表2的尽头，则从链表1的头节点继续遍历，也就是说，N1和N2都会遍历链表1和链表2。</p><p>因为两个指针，同样的速度，走完同样长度（链表1+链表2），不管两条链表有无相同节点，都能够到达同时到达终点。（N1最后肯定能到达链表2的终点，N2肯定能到达链表1的终点）。</p><h4 id="代码实现">代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">FindFirstCommonNode</span><span class="hljs-params">(ListNode pHead1, ListNode pHead2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> pHead1, l2 = pHead2;<br>        <span class="hljs-keyword">while</span>(l1 != l2)&#123;<br>            l1 = (l1==<span class="hljs-literal">null</span>)?pHead2:l1.next;<br>            l2 = (l2==<span class="hljs-literal">null</span>)?pHead1:l2.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getIntersectionNode</span>(<span class="hljs-params">self, headA: ListNode, headB: ListNode</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        a = headA<br>        b = headB<br>        <span class="hljs-keyword">while</span> a != b:<br>            <span class="hljs-comment"># print(a.val)</span><br>            <span class="hljs-comment"># print(b.val)</span><br>            <span class="hljs-keyword">if</span> a:<br>                a=a.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                  a=headB<br>            <span class="hljs-keyword">if</span> b:<br>                b=b.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                b=headA<br>        <span class="hljs-keyword">return</span> a       <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数之和</title>
    <link href="/2023/10/07/two-nums-sums/"/>
    <url>/2023/10/07/two-nums-sums/</url>
    
    <content type="html"><![CDATA[<h1 id="两数之和">两数之和</h1><h2 id="题目描述">1、题目描述</h2><p><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310072038912.png" /></p><h2 id="解法">2、解法</h2><h3 id="暴力枚举">1：暴力枚举</h3><p>枚举数组中的每一个数 <code>x</code>，寻找数组中是否存在<code>target - x</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nums_length</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums_length; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; nums_length; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="哈希表">2：哈希表</h3><p>创建一个哈希表，对于每一个 <code>x</code>，首先查询哈希表中是否存在<code>target - x</code>，然后将 <code>x</code>插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; hashtable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;<br>            &#125;<br>            hashtable.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BERT</title>
    <link href="/2023/10/04/BERT/"/>
    <url>/2023/10/04/BERT/</url>
    
    <content type="html"><![CDATA[<h1id="论文阅读bert-pre-training-of-deep-bidirectional-transformers-for-language-understanding">论文阅读——《BERT:Pre-training of Deep Bidirectional Transformers for LanguageUnderstanding》</h1><p>论文链接：[<a href="https://arxiv.org/abs/1810.04805">1810.04805]BERT: Pre-training of Deep Bidirectional Transformers for LanguageUnderstanding (arxiv.org)</a></p><p>源码链接：<ahref="https://github.com/google-research/bert">google-research/bert:TensorFlow code and pre-trained models for BERT (github.com)</a></p><h2 id="模型的输入输出">1、模型的输入、输出</h2><p><strong>模型输入：</strong>文本中字词的词向量，文本向量，位置向量。</p><p><strong>模型输出：</strong>文本融合全文语义信息后的向量表示。</p><p><strong>PS：</strong>英文词汇可以划分成细粒度的语义单位，例如<strong>doing</strong>可以划分为<strong>do</strong>和<strong>ing</strong></p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041319454.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="预训练任务">2、预训练任务</h2><p>预训练流程如下：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041500393.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><ul><li><span class="math inline">\(BertEncoder\)</span>：采用默认的12层<span class="math inline">\(transformerencoder layer\)</span>对输入进行编码。编码后输出的张量形状：<spanclass="math inline">\([Batch Size， SeqLens， Emb Dim]\)</span>。</li><li><spanclass="math inline">\(MLM\)</span>模块：掩蔽语言模型，可以理解为完形填空，mask句子中若干词，用周围词去预测遮盖的词。作者会随机mask每一个句子中15%的词，用其上下文来做预测。</li></ul><p>80%的时间是采用[mask]，my dog is cute → my dog is [MASK]</p><p>10%的时间是随机取一个词来代替mask的词，my dog is cute -&gt; my dog isapple</p><p>10%的时间保持不变，my dog is cute -&gt; my dog is cute</p><p>这样做的目的是因为Transformer要保持对每个输入token分布式的表征，否则Transformer很可能会记住这个[MASK]就是"cute"。</p><ul><li><spanclass="math inline">\(NSP\)</span>模块：下个句子预测，判断句子B在文章中是否属于句子A的下一句。选择句子对（A，B），B中50%的数据是A的下一条句子，剩余50%的数据是语料库中随机选择的，学习其中的相关性。</li></ul><h2 id="微调">3、微调</h2><p>对于下游不同的NLP任务，模型的输入会进行微调，例如：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041515233.png"alt="图3" /><figcaption aria-hidden="true">图3</figcaption></figure><ul><li>单文本分类任务</li></ul><p>对于文本分类任务，BERT模型在文本前插入一个<spanclass="math inline">\([CLS]\)</span>符号，并将该符号对应的输出向量作为整篇文本的语义表示，用于文本分类。</p><ul><li>语句对分类任务</li></ul><p>该任务的实际应用场景包括：问答（判断一个问题与一个答案是否匹配）、语句匹配（两句话是否表达同一个意思）等。对于该任务，<spanclass="math inline">\(BERT\)</span>模型除了添加<spanclass="math inline">\([CLS]\)</span>符号并将对应的输出作为文本的语义表示，还对输入的两句话用一个<spanclass="math inline">\([SEP]\)</span>符号作分割，并分别对两句话附加两个不同的文本向量以作区分。</p><h2 id="模型效果">4、模型效果</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041519047.png"alt="图4" /><figcaption aria-hidden="true">图4</figcaption></figure><p>除了架构差异之外，<span class="math inline">\(BERT\)</span>和<spanclass="math inline">\(OpenAI GPT\)</span>都是调优方法，而<spanclass="math inline">\(ELMo\)</span>是基于特性的方法。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310041522054.png"alt="图5" /><figcaption aria-hidden="true">图5</figcaption></figure><p><spanclass="math inline">\(BERT_{LARGE}\)</span>在各项评估指标上的效果要明显好于过往的模型。</p>]]></content>
    
    
    
    <tags>
      
      <tag>PLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合并链表</title>
    <link href="/2023/10/01/merge-list/"/>
    <url>/2023/10/01/merge-list/</url>
    
    <content type="html"><![CDATA[<h1 id="合并两个排序的链表"><strong>合并两个排序的链表</strong></h1><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202310012125054.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="递归思路">1、递归思路</h2><ul><li>终止条件：两链表其中一个为空时，返回另一个链表；</li><li>当前递归内容：若<code>list1.val &lt;= list2.val</code>将较小的<code>list1.next</code>与merge后的表头连接，即<code>list1.next = Merge(list1.next,list2);</code><code>list2.val</code>较大时同理；</li><li>每次的返回值：排序好的链表头；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class ListNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    ListNode next = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    ListNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">Merge</span><span class="hljs-params">(ListNode list1,ListNode list2)</span> &#123;<br>        <span class="hljs-keyword">if</span>(list1==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> list2;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list2==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> list1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(list2.val&gt;list1.val)&#123;<br>            list1.next = Merge(list1.next,list2);<br>            <span class="hljs-keyword">return</span> list1;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            list2.next = Merge(list1,list2.next);<br>            <span class="hljs-keyword">return</span> list2;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:<br>        <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> l2<br>        <span class="hljs-keyword">elif</span> l2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> l1<br>        <span class="hljs-keyword">elif</span> l1.val &lt; l2.val:<br>            l1.<span class="hljs-built_in">next</span> = self.mergeTwoLists(l1.<span class="hljs-built_in">next</span>, l2)<br>            <span class="hljs-keyword">return</span> l1<br>        <span class="hljs-keyword">else</span>:<br>            l2.<span class="hljs-built_in">next</span> = self.mergeTwoLists(l1, l2.<span class="hljs-built_in">next</span>)<br>            <span class="hljs-keyword">return</span> l2<br></code></pre></td></tr></table></figure><h4 id="复杂度时间omn-空间-omn">复杂度：时间：O(m+n) 空间： O(m+n)</h4><h2 id="空间o1思路">2、空间O(1)思路</h2><ul><li>创建一个虚拟结点和一个哨兵结点</li><li>当<code>list1</code>与<code>list2</code>都不为<code>null</code>时循环</li><li>哪个的<code>val</code>小哪个赋给虚拟结点的<code>next</code>，虚拟结点后移。</li><li>退出循环后，哪个<code>list</code>不为空，哪个结点（包括剩下的）给虚拟结点的<code>next</code></li><li>最后返回哨兵结点的<code>next</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">Merge</span><span class="hljs-params">(ListNode list1,ListNode list2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-comment">// 必须保证两个list都不为空</span><br>        <span class="hljs-keyword">while</span>(list1 != <span class="hljs-literal">null</span> &amp; list2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span>(list1.val &gt; list2.val) &#123;<br>                dummy.next = list2;<br>                list2 = list2.next;<br>                dummy = dummy.next;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list1.val &lt;= list2.val) &#123;<br>                dummy.next = list1;<br>                list1 = list1.next;<br>                dummy = dummy.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// list1后面还有，就把剩下的全部拿走</span><br>        <span class="hljs-keyword">if</span>(list1 != <span class="hljs-literal">null</span>) &#123;<br>            dummy.next = list1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(list2 != <span class="hljs-literal">null</span>) &#123;<br>            dummy.next = list2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.next;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, list1: <span class="hljs-type">Optional</span>[ListNode], list2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        n_list = ListNode(-<span class="hljs-number">1</span>)<br>        res = n_list<br><br>        <span class="hljs-keyword">while</span> list1 <span class="hljs-keyword">and</span> list2:<br>            <span class="hljs-keyword">if</span> list1.val &gt; list2.val:<br>                n_list.<span class="hljs-built_in">next</span> = list2<br>                list2 = list2.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                n_list.<span class="hljs-built_in">next</span> = list1<br>                list1 = list1.<span class="hljs-built_in">next</span><br>            n_list = n_list.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">if</span> list1:<br>            n_list.<span class="hljs-built_in">next</span> = list1<br>        <span class="hljs-keyword">if</span> list2:<br>            n_list.<span class="hljs-built_in">next</span> = list2<br><br><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2023/09/30/reverse-listnode/"/>
    <url>/2023/09/30/reverse-listnode/</url>
    
    <content type="html"><![CDATA[<h1 id="反转链表">反转链表</h1><h2 id="题目描述">1、题目描述</h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309302229385.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="解题方法">2、解题方法</h2><h4 id="栈">1：栈</h4><p>原理图：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309302229013.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Stack;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    Stack&lt;ListNode&gt; stack= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-comment">//把链表节点全部摘掉放到栈中</span><br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(head);<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (stack.isEmpty())<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> node;<br>    <span class="hljs-comment">//栈中的结点全部出栈，然后重新连成一个新的链表</span><br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> stack.pop();<br>        node.next = tempNode;<br>        node = node.next;<br>    &#125;<br>    <span class="hljs-comment">//最后一个结点就是反转前的头结点，一定要让他的next</span><br>    <span class="hljs-comment">//等于空，否则会构成环</span><br>    node.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> dummy;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双链表">2：双链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">//新链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//先保存访问的节点的下一个节点，保存起来</span><br>        <span class="hljs-comment">//留着下一步访问的</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-comment">//每次访问的原链表节点都会成为新链表的头结点，</span><br>        <span class="hljs-comment">//其实就是把新链表挂到访问的原链表节点的</span><br>        <span class="hljs-comment">//后面就行了</span><br>        head.next = newHead;<br>        <span class="hljs-comment">//更新新链表</span><br>        newHead = head;<br>        <span class="hljs-comment">//重新赋值，继续访问</span><br>        head = temp;<br>    &#125;<br>    <span class="hljs-comment">//返回新链表</span><br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        cur,pre = head,<span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> cur:<br>            tmp = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            pre = cur<br>            cur = tmp<br><br>        <span class="hljs-keyword">return</span> pre<br></code></pre></td></tr></table></figure><h4 id="递归">3、递归</h4><p>考虑使用递归法遍历链表，当越过尾节点后终止递归，在回溯时修改各节点的<code>next</code> 引用指向。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">recur</span>(<span class="hljs-params">cur, pre</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cur: <span class="hljs-keyword">return</span> pre     <span class="hljs-comment"># 终止条件</span><br>            res = recur(cur.<span class="hljs-built_in">next</span>, cur) <span class="hljs-comment"># 递归后继节点</span><br>            cur.<span class="hljs-built_in">next</span> = pre             <span class="hljs-comment"># 修改节点引用指向</span><br>            <span class="hljs-keyword">return</span> res                 <span class="hljs-comment"># 返回反转链表的头节点</span><br>        <br>        <span class="hljs-keyword">return</span> recur(head, <span class="hljs-literal">None</span>)       <span class="hljs-comment"># 调用递归并返回</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遗传算法</title>
    <link href="/2023/09/19/genetic_algorithm/"/>
    <url>/2023/09/19/genetic_algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="遗传算法genetic-algorithm">遗传算法（genetic algorithm）</h1><h2 id="概述">1、概述</h2><p>​算法的主要思想就是模拟生物的遗传与变异，快速的求出最大值或最小值的随机全局搜索优化方法。</p><h2 id="前置知识">2、前置知识</h2><p>染色体（Chromosome）：又称为基因型个体。</p><p>个体（individual）：每个生物</p><p>种群（population）：一个系统中所有个体的总称。</p><p>种群个体数（POPULATION）：一个系统中个体的数量。</p><p>基因（gene）：控制生物的性状。</p><p>适应度（fitness）：对某个生物是否适应环境的定量评分。</p><p>迭代次数（TIMES）：该生物种群繁衍的次数。</p><h2 id="算法基础"><strong>3、算法基础</strong></h2><p>​ <imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191024541.png"alt="image-20230919102418240" /></p><p>基本遗传算法是将群体中所有个体作为对象，只使用基本遗传算子：选择算子、交叉算子以及变异算子。可以用一个式子表示：<span class="math display">\[SGA=(C,E,P_0,M,\phi,\Gamma,\psi,T)\]</span></p><table><thead><tr class="header"><th style="text-align: center;"><strong>符号</strong></th><th style="text-align: center;"><strong>含义</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(E\)</span></td><td style="text-align: center;">个体适应度评价函数</td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(p_0\)</span></td><td style="text-align: center;">初始种群</td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(C\)</span></td><td style="text-align: center;">个体编码方案</td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(M\)</span>（预先设定）</td><td style="text-align: center;">种群大小</td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(\phi\)</span></td><td style="text-align: center;">选择算子</td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(\Gamma\)</span>（预先设定交叉概率）</td><td style="text-align: center;">交叉算子</td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(\psi\)</span>（预先设定变异概率）</td><td style="text-align: center;">变异算子</td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(T\)</span>（预先设定）</td><td style="text-align: center;">遗传算法终止条件</td></tr></tbody></table><h2 id="算法步骤">4、算法步骤</h2><h3 id="染色编码">4.1 染色编码</h3><h5 id="编码">编码</h5><p>将问题解空间的解表示为遗传算法中的染色体结构数据。常见的方法有：二进制编码、格雷码编码、浮点数编码、各参数级联编码、多参数交叉编码等。</p><h5 id="解码">解码</h5><p>将遗传算法染色体转换为问题的解.</p><h3 id="初始群体的生成"><strong>4.2 初始群体的生成</strong></h3><p>设定最大进化迭代数T，群体大小M，交叉概率<spanclass="math inline">\(P_c\)</span>,变异概率<spanclass="math inline">\(P_m\)</span>，随机生成M个个体作为初始化群体<spanclass="math inline">\(P_0\)</span>.</p><h3 id="适应度评估检测">4.3 适应度评估检测</h3><p>适应度函数表明个体或解的优劣性。</p><p>适应度尺度变换：指算法迭代的不同阶段，通过适当调节个体适应度大小，避免群体间竞争减弱，导致种群收敛于局部最优解。</p><p>尺度变化的方法：</p><ul><li><p>线性尺度变换：<spanclass="math inline">\(F^{\prime}=aF+b\)</span></p></li><li><p>乘幂尺度变换：<spanclass="math inline">\(F^{\prime}=F^{k}\)</span></p></li><li><p>指数尺度变换：<span class="math inline">\(F^{\prime}=e^{-\betaF}\)</span></p></li></ul><h3 id="遗传算子"><strong>4.4 遗传算子</strong></h3><ul><li><p>选择：从旧群体中按照一定概率选择优良个体组成新种群，繁殖得到下一代个体。个体的选择与适应度（<spanclass="math inline">\(f\)</span>）正相关： <span class="math display">\[P_i=\frac{f_i}{\sum_{k=1}^Mf_k}\]</span></p></li><li><p>交叉：从种群中随机选择两个个体，随机选择点位，两个染色体交换组合，将父串的优秀特征遗传给子串，从而产生新的优秀个体。</p></li></ul><p>方法包括单点交叉、双（多）点交叉、均匀交叉、算数交叉。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191204307.png"alt="image-20230919120432251" /><figcaption aria-hidden="true">image-20230919120432251</figcaption></figure><ul><li>变异：以二进制编码为例：一段基因序列中的某位由0变为1，则称该点发生了变异。该方法可以防止算法在优化过程中陷入局部最优解。</li></ul><p><strong><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191459227.png"alt="image-20230919145916185" /></strong></p><h3 id="终止判断条件">4.5 终止判断条件</h3><p>当<spanclass="math inline">\(t&gt;T\)</span>时，算法停止，选用前<spanclass="math inline">\(T\)</span>步中具有最大适应度的个体作为输出。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309191516593.png"alt="image-20230919151617541" /><figcaption aria-hidden="true">image-20230919151617541</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>optimum solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读——CLIP算法</title>
    <link href="/2023/09/18/clip/"/>
    <url>/2023/09/18/clip/</url>
    
    <content type="html"><![CDATA[<h1 id="论文阅读clip算法">论文阅读——CLIP算法</h1><p><strong>原文链接：</strong>[<ahref="https://arxiv.org/abs/2103.00020">2103.00020] LearningTransferable Visual Models From Natural Language Supervision(arxiv.org)</a></p><p><strong>代码链接：</strong><ahref="https://github.com/OpenAI/CLIP">openai/CLIP: CLIP (ContrastiveLanguage-Image Pretraining), Predict the most relevant text snippetgiven an image (github.com)</a></p><h2 id="算法原理">1、算法原理</h2><p>CLIP（Contrastive Language-ImagePre-training）具备很强的迁移学习能力。在无任意一张ImageNet图片训练情景下，直接进行Zero-shot推理，就能媲美监督训练下的ResNet-50模型的结果。</p><p>宏观来看CLIP分为三部分：</p><ul><li><p>Contrastive pre-training：预训练阶段，使用图片 -文本对进行对比学习训练；</p></li><li><p>Create dataset classifier from labeltext：提取预测类别文本特征;</p></li><li><p>Use for zero-shot predictiion：进行 Zero-Shoot 推理预测;</p></li></ul><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309190948459.png"alt="image-20230917172037149" /><figcaption aria-hidden="true">image-20230917172037149</figcaption></figure><p>第一阶段，图像和文本分别通过图像、文本编码器生成对应的<spanclass="math inline">\(l_1、l_2…l_n\)</span>、<spanclass="math inline">\(T_1、T_2…T_n\)</span>的特征向量，计算对应角标向量的余弦相似度，通过temperature参数缩放，并借助softmax归一化为概率分布。图像编码器选用两个架构，第一个采用的是ResNet-50的基础架构，使用ResNetD和Rect-2进行改进，将全局平均池化层替换为一个单层的注意力池化机制；第二个采用改进的ViT模型。文本编码器使用的是一个Transformer编码器，有8个注意力头，使用了隐藏的自注意。</p><p>第二阶段，使用提示模板，帮助指定文本是否是关于图像的内容。将输出的句子通过文本编码器进行特征提取，得到特征向量。</p><p>第三阶段，输入一张图片，经过图像编码器进行特征提取生成一个特征向量，与文本特征进行余弦相似度计算，最相似的即为预测结果。</p><h2 id="代码实现">2、代码实现</h2><p>伪代码如下：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309181104648.png"alt="image-20230918110417534" /><figcaption aria-hidden="true">image-20230918110417534</figcaption></figure><p>CLIP模型前向传播部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, image, text</span>):<br>  image_features = self.encode_image(image)    <span class="hljs-comment"># 图片编码提特征</span><br>  text_features = self.encode_text(text)       <span class="hljs-comment"># 文本编码提特征</span><br>​<br>  <span class="hljs-comment"># 特征归一化</span><br>  image_features = image_features / image_features.norm(dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>  text_features = text_features / text_features.norm(dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>​<br>  <span class="hljs-comment"># 计算余弦相似度</span><br>  logit_scale = self.logit_scale.exp()<br>  logits_per_image = logit_scale * image_features @ text_features.t()<br>  logits_per_text = logits_per_image.t()<br>​<br>  <span class="hljs-comment"># shape = [global_batch_size, global_batch_size]</span><br>  <span class="hljs-keyword">return</span> logits_per_image, logits_per_text<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Multimodal Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zero-shot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python数据处理——去除 NaN 值</title>
    <link href="/2023/09/18/python/"/>
    <url>/2023/09/18/python/</url>
    
    <content type="html"><![CDATA[<h1 id="python数据处理去除-nan-值">Python数据处理——去除 NaN 值</h1><h2 id="nan-的定义">1、NaN 的定义</h2><p>NaN 即 Not A Number 的缩写，表示不是一个数字。NaN值是在进行数学计算时出现的一种特殊值，通常出现在计算过程中出现了错误或无法计算的情况下。</p><h2 id="处理方法">2、处理方法</h2><ul><li>使用 dropna() 方法删除 NaN 值所在的行或列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 读取Excel文件</span><br>file_path = <span class="hljs-string">&#x27;singleCoal.xlsx&#x27;</span><br>df = pd.read_excel(file_path)<br><br>df.dropna()  <span class="hljs-comment"># 删除包含 NaN 值的行</span><br><br>df.dropna(axis=<span class="hljs-string">&#x27;columns&#x27;</span>)  <span class="hljs-comment"># 删除包含 NaN 值的列，需要加上 axis 参数</span><br></code></pre></td></tr></table></figure><ul><li>使用 fillna() 方法填充 NaN 值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">df.fillna(value=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 将 NaN 值填充为 0</span><br><br><span class="hljs-comment">#使用 method 参数指定使用哪种方法进行填充</span><br>df.fillna(method=<span class="hljs-string">&quot;ffill&quot;</span>)  <span class="hljs-comment"># 前向填充</span><br>df.fillna(method=<span class="hljs-string">&quot;bfill&quot;</span>)  <span class="hljs-comment"># 后向填充</span><br></code></pre></td></tr></table></figure><ul><li>使用 interpolate() 方法插值填充 NaN 值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">df.interpolate()  <span class="hljs-comment"># 使用默认方式进行插值填充</span><br><br>df.interpolate(method=<span class="hljs-string">&quot;linear&quot;</span>)  <span class="hljs-comment"># 线性插值</span><br>df.interpolate(method=<span class="hljs-string">&quot;polynomial&quot;</span>, order=<span class="hljs-number">2</span>)  <span class="hljs-comment"># 二次插值</span><br>df.interpolate(method=<span class="hljs-string">&quot;spline&quot;</span>, order=<span class="hljs-number">2</span>)  <span class="hljs-comment"># 样条插值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode服务器小问题</title>
    <link href="/2023/09/12/VScode%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2023/09/12/VScode%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="vscode服务器小问题">VScode服务器小问题</h1><h2id="服务器不断要求输入密码连不上服务器">1、服务器不断要求输入密码，连不上服务器</h2><p><strong>原因：</strong>没有恰当的退出远程链接导致的</p><p><strong>解决方法：</strong>打开VScode的 view→palette然后输入Kill VSCode Setver on Host，再重新连接就可以了。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309112035681.png"alt="image-20230911203505606" /><figcaption aria-hidden="true">image-20230911203505606</figcaption></figure><p>后续使用完远程服务器关闭资源的时候要使用File→Close RemoteConnection来关闭资源。</p>]]></content>
    
    
    <categories>
      
      <category>Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——XGBoost算法</title>
    <link href="/2023/09/11/XGBoost%E7%AE%97%E6%B3%95/"/>
    <url>/2023/09/11/XGBoost%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="学习笔记xgboost算法">学习笔记——XGBoost算法</h1><p>XGBoost和GBDT两者都是boosting方法，除了工程实现、解决问题上的一些差异外，最大的不同就是目标函数的定义。</p><h2 id="基本原理">1、基本原理</h2><h3 id="目标函数">1.1 目标函数</h3><p>XGBoost算法<strong>是一个加法模型</strong>，在每一步迭代中，只调优当前的子模型：<spanclass="math inline">\(F_m(x_i)=F_{m-1}(x_i)+f_m(x_i)\)</span>。其中<spanclass="math inline">\(f_m(x_i)\)</span>表示当前的子模型，<spanclass="math inline">\(F_{m-1}(x_i)\)</span>表示前<spanclass="math inline">\(m-1\)</span>个已固定模型。</p><p>目标函数=经验风险+结构风险（正则项）： <span class="math display">\[\begin{aligned}obj&amp; =\sum_{i=1}^NL[F_m(x_i),y_i]+\sum_{j=1}^m\Omega(f_j)  \\&amp;=\sum_{i=1}^NL[F_{m-1}(x_i)+f_m(x_i),y_i]+\sum_{j=1}^m\Omega(f_j)\end{aligned}\]</span></p><p>其中正则项<spanclass="math inline">\(\Omega(f_j)\)</span>表示模型<spanclass="math inline">\(f\)</span>的复杂度。</p><p>XGBoost用2阶泰勒公式：<span class="math inline">\(f(x_0+\Deltax)\approx f(x_0)+f^{&#39;}(x_0)\Deltax+\frac{f^{&#39;&#39;}(x_0)}{2}(\Delta x)^2\)</span>​来逼近损失函数，我们可以将<spanclass="math inline">\(F_{m-1}(x_i)\)</span>看作<spanclass="math inline">\(x_0\)</span>,将<spanclass="math inline">\(f_m(x_i)\)</span>看作<spanclass="math inline">\(\Delta x\)</span>,所以（1）式就可以转化为： <spanclass="math display">\[\begin{aligned}Obj=\sum_{i=1}^N\left[L[F_{m-1}(x_i),y_i]+\frac{\partialL}{\partialF_{m-1}(x_i)}f_m(x_i)+\frac{1}{2}\frac{\partial^2L}{\partial^2F_{m-1}(x_i)}f_m^2(x_i)\right]+\\\sum_{j=1}^m\Omega(f_j)\end{aligned}\]</span> 由于前m-1个模型是确定的，所以<spanclass="math inline">\(\sum_{j=1}^m\Omega(f_j)\)</span>，前m-1项均为常数，对目标函数的求解无影响，所以（2）式又可以转化为：<span class="math display">\[Obj=\sum_{i=1}^{N}\left[g_{i}f_{m}(x_{i})+\frac{1}{2}h_{i}f_{m}^{2}(x_{i})\right]+\Omega(f_{m})\]</span></p><h3 id="基于树的正则化">1.2 基于树的正则化</h3><p>XGBoost支持<strong>的基分类器包括决策树和线性模型</strong>，为<strong>防止过拟合</strong>，XGBoost将<strong>树的深度设置为正则项</strong>：<spanclass="math inline">\(\Omega(f)=\gammaT+\frac{1}{2}\lambda||w||^{2}\)</span>，其中<spanclass="math inline">\(\gamma\)</span>和<spanclass="math inline">\(\lambda\)</span>作为超参数。所以目标函数可以改写为：<span class="math display">\[Obj=\sum_{i=1}^{N}\left[g_if_m(x_i)+\frac{1}{2}h_if_m^2(x_i)\right]+\gammaT+\frac{1}{2}\lambda\sum_{j=1}^{T}w_j^2\]</span>通过数学处理，可以将正则项和经验风险项合并：将经验风险项从样本层面上求和转换为叶节点层面上的求和。可以定义结点j上的样本集为<spanclass="math inline">\(I(j)=\{x_{i}|q(x_{i})=j\}\)</span>,其中<spanclass="math inline">\(q(x_i)\)</span>为将样本映射到叶节点上的索引函数，叶节点<spanclass="math inline">\(j\)</span>上的回归值为<spanclass="math inline">\(w_{j}=f_{m}(x_{i}),i\in I(j)\)</span>.</p><p>所以式（4）进一步简化,令<span class="math inline">\(\sum_{i\inI(j)}g_i=G_j,\sum_{i\in I(j)}h_i=H_j\)</span>： <spanclass="math display">\[Obj=\sum_{j=1}^T\left[G_jw_j+\frac{1}{2}(H_j+\lambda)w_j^2\right]+\gammaT\]</span> 如果一棵树的结构是确定的，则各个节点内的样本（<spanclass="math inline">\(x_i,y_i,g_i,h_i,G_j,H_j,T\)</span>）也是确定的，每个叶子结点输出回归值应该使得式（5）最小，所以该函数的二次函数极值点为：<spanclass="math inline">\(w_j^*=-\frac{G_j}{H_j+\lambda}\)</span></p><p>树的评分也可以理解成所有叶节点的评分之和：<spanclass="math inline">\(Obj^*=\sum_{j=1}^T\left(-\frac{1}{2}\frac{G_j^2}{H_j+\lambda}+\gamma\right)\)</span>.</p><h3 id="结点分裂准则">1.3 结点分裂准则</h3><p>XGBoost的子模型树和决策树模型一样，要依赖<strong>节点递归分裂的贪心准则来实现树的生成</strong>：</p><p>从树的深度为0开始：</p><ol type="1"><li>对每个叶节点枚举所有的可用特征；</li><li>针对每个特征，把属于该节点的训练样本根据该特征值进行升序排列，通过线性扫描的方式来决定该特征的最佳分裂点，并记录该特征的分裂收益；</li><li>选择收益最大的特征作为分裂特征，用该特征的最佳分裂点作为分裂位置，在该节点上分裂出左右两个新的叶节点，并为每个新节点关联对应的样本集；</li><li>回到第1步，递归执行直到满足特定条件为止；</li></ol><p>过程如图所示：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202309111523571.png"alt="image-20230911152316481" /><figcaption aria-hidden="true">image-20230911152316481</figcaption></figure><p>显然分裂收益是树A的评分减去树B的评分，因此分裂收益表达式为： <spanclass="math display">\[Gain=\frac12\Big[\frac{G_L^2}{H_L+\lambda}+\frac{G_R^2}{H_R+\lambda}-\frac{(G_L+G_R)^2}{H_L+H_R+\lambda}\Big]-\gamma\]</span><strong>XGBoost还支持近似算法</strong>：根据特征分布的分位数提出候选划分点，然后将连续型特征映射到由这些候选点划分的桶中，然后聚合统计信息找到所有区间的最佳分裂点。具体而言，特征分位数的选取有global和local两种可选策略：</p><ul><li>global在全体样本上的特征值中选取，在根节点分裂之前进行一次即可；</li><li>local则是在待分裂节点包含的样本特征值上选取，每个节点分裂前都要进行。</li></ul><p>通常，global由于只能划分一次，其划分粒度需要更细。通过这个方法可以解决数据量过大超过内存、或有并行计算需求的情况。</p><p>由（3）式可得：令其偏导为0可以得到<spanclass="math inline">\(f_{m}^{*}(x_{i})=-\frac{g_{i}}{h_{i}}\)</span>,此目标函数可理解为以<spanclass="math inline">\(h_i\)</span>为权重，<spanclass="math inline">\(-\frac{g_{i}}{h_{i}}\)</span>​为标签的二次损失函数：<span class="math display">\[\begin{aligned}obj&amp;=\sum_{i=1}^{N}\left[g_{i}f_{m}(x_{i})+\frac{1}{2}h_{i}f_{m}^{2}(x_{i})\right]+\Omega(f_{m})  \\&amp;=\sum_{i=1}^{N}\frac{1}{2}h_{i}\Big[f_{m}(x_{i})-(-\frac{g_{i}}{h_{i}})\Big]^{2}+\Omega(f_{m})+C\end{aligned}\]</span> 因此，在近似算法取分位数时，实际上XGBoost会取以二阶导<spanclass="math inline">\(h_i\)</span>为权重的分位数。</p><h3 id="列采样和学习率">1.4 列采样和学习率</h3><p><strong>XGBoost还引入了两项特性：列采样和学习率</strong></p><ul><li>列采样：即随机森林中的做法，每次节点分裂的待选特征集合不是剩下的全部特征，而是剩下特征的一个子集。是为了更好地对抗过拟合，还能减少计算开销。</li><li>学习率：或者叫步长、shrinkage，是在每个子模型前（即在每个叶节点的回归值上）乘上该系数，削弱每颗树的影响，使得迭代更稳定。可以类比梯度下降中的学习率。XGBoost默认设定为0.3。</li></ul><h3 id="稀疏感知">1.5 稀疏感知</h3><p>XGBoost将缺失值和稀疏0值等同视作缺失值，将这些缺失值“绑定”在一起，分裂结点的遍历则会跳过缺失值整体，提升了运算效率。</p><h2 id="工程优化">2. 工程优化</h2><h3 id="并行列块的设计">2.1 并行列块的设计</h3><p>XGBoost将每一列特征提前进行排序，以块（Block）的形式储存在缓存中，并以索引将特征值和梯度统计量<spanclass="math inline">\(g_i,h_i\)</span>对应起来，每次节点分裂时会重复调用排好序的块。而且不同特征会分布在独立的块中，因此可以进行分布式或多线程的计算。</p><h3 id="缓存访问">2.2 缓存访问</h3><p>特征值排序后通过索引来取梯度 <spanclass="math inline">\(g_i,h_i\)</span>会导致访问的内存空间不一致，进而降低缓存的命中率，影响算法效率。为解决这个问题，XGBoost为每个线程分配一个单独的连续缓存区，用来存放梯度信息。</p><h3 id="核外块计算">2.3 核外块计算</h3><p>数据量过大时，不能同时全部载入内存。XGBoost将数据分为多个blocks并储存在硬盘中，使用一个独立的线程专门从磁盘中读取数据到内存中，实现计算和读取数据的同时进行。为了进一步提高磁盘读取数据性能，XGBoost还使用了两种方法：</p><ul><li><strong>块压缩：</strong>通过压缩block，用解压缩的开销换取磁盘读取的开销；</li><li><strong>块分区：</strong>将block分散储存在多个磁盘中，有助于提高磁盘吞吐量。</li></ul><h2 id="与gbdt比较">3. 与GBDT比较</h2><ul><li>性质：GBDT是机器学习算法，XGBoost除了算法内容还包括一些工程实现方面的优化。</li><li>基于二阶导：GBDT使用的是损失函数一阶导数，相当于函数空间中的梯度下降；而XGBoost还使用了损失函数二阶导数，相当于函数空间中的牛顿法。</li><li>正则化：XGBoost显式地加入了正则项来控制模型的复杂度，能有效防止过拟合。</li><li>列采样：XGBoost采用了随机森林中的做法，每次节点分裂前进行列随机采样。</li><li>缺失值处理：XGBoost运用稀疏感知策略处理缺失值，而GBDT没有设计缺失策略。</li><li>并行高效：XGBoost的列块设计能有效支持并行运算，提高效率。</li></ul><h4 id="缺点">缺点</h4><ul><li>虽然利用预排序和近似算法可以降低寻找最佳分裂点的计算量，但在节点分裂过程中仍需要遍历数据集；</li><li>预排序过程的空间复杂度过高，不仅需要存储特征值，还需要存储特征对应样本的梯度统计值的索引，相当于消耗了两倍的内存。</li></ul><h2 id="参考资料">参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/142413825?utm_id=0">机器学习 |XGBoost详解 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/83901304">深入理解XGBoost -知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>boosting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——LORA微调</title>
    <link href="/2023/08/16/LORA%E5%BE%AE%E8%B0%83/"/>
    <url>/2023/08/16/LORA%E5%BE%AE%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<h1 id="学习笔记lora微调">学习笔记——LORA微调</h1><p>​ LORA是一种低资源微调LLM模型的方法，源自论文：<ahref="%5B2106.09685.pdf%20(arxiv.org)%5D(https://arxiv.org/pdf/2106.09685.pdf)">LoRA:Low-Rank Adaptation of Large Language Models。</a></p><h2 id="一高效微调">一、高效微调</h2><p>​ 对于语言模型来说，在微调过程中，模型加载预训练参数<spanclass="math inline">\(\Phi_{0}\)</span>进行初始化，并通过最大化条件语言模型概率实现参数调整$_{0}+$​，即：<span class="math display">\[max_\Phi\sum_{(x,y)\in\mathcal{Z})}\sum_{t=1}^{|y|}log(P_\Phi(y_t|x,y&lt;t))\]</span> 这种方式的主要缺点参数增量<spanclass="math inline">\(\Delta\Phi\)</span>的维度和预训练参数<spanclass="math inline">\(\Phi_{0}\)</span>是相同的，所需资源比较多，一般被称为fullfine-tuing。</p><p>为了用更少的参数来表示学习增量<spanclass="math inline">\(\Delta\Phi\)</span>,提出了一系列方法叫做高效微调。例如：Adapter、prefixtuning等。相比于其他方法LORA使用一个低秩矩阵来编码参数增量，这种方法不会增加推理耗时并且便于优化。</p><h2 id="二实现方式">二、实现方式</h2><p>​ 研究表明：预训练模型拥有极小的内在维度（<strong>instrisicdimension</strong>，表示数据变化的自由变量的个数），换而言之，存在一个极低维度的参数，微调它和在全参数空间中微调能起到相同的效果。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161517289.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><p>该论文认为参数矩阵更新的过程中也存在一个‘内在秩’。对于预训练的权重矩阵<spanclass="math inline">\(W_0\)</span>，可以用一个低秩分解来表示参数更新<spanclass="math inline">\(\Delta W\)</span>，即： <spanclass="math display">\[W_0+\Delta W=W_0+BA\quad B\in\mathbb{R}^{d\timesr},A\in\mathbb{R}^{r\times k}\quad and\quad r\ll min(d,k)\]</span> 训练过程中可以冻结参数<spanclass="math inline">\(W_0\)</span>，只训练A和B中的参数。如图所示，对于<spanclass="math inline">\(h=W_{0}x\)</span>​,前向传播过程就变为： <spanclass="math display">\[h=W_0x+\Delta Wx=W_0x+BAx\]</span></p><h2 id="三qlora">三、<ahref="%5B2305.14314.pdf%20(arxiv.org)%5D(https://arxiv.org/pdf/2305.14314.pdf)">QLORA</a></h2><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161959472.png"alt="图2" /><figcaption aria-hidden="true">图2</figcaption></figure><p>QLORA训练过程和LORA基本一致，区别在于QLORA模型是按照NF4保存的，训练时需要将参数反量化到bf16后进行训练。<span class="math display">\[Y^{BF16}=X^{BF16}doubleDequant(c_{2}^{FP32},c_{2}^{k-bit},W^{NF8})+X^{BF16}B^{BF16}A^{BF16}\]</span></p><h3 id="分块量化block-wis-quantization">分块量化（Block-wisQuantization）</h3><p>量化是将输入从存储更多信息的表征映射为存储较少信息的表征的过程。</p><p>全局量化的方式存在一个问题：当输入中存在极大值或者离群值时，一些较小的参数无法被精确的表示，从而导致量化后的神经网络效果急剧下降。</p><p>分块量化是将输入划分为多个块，每个块分别量化，如图所示：</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161954660.png"alt="图3" /><figcaption aria-hidden="true">图3</figcaption></figure><p>明显看到分块量化能够减少过程中的误差。</p><h3 id="分位量化quantile-quantization">分位量化（QuantileQuantization）</h3><p>在将一个参数量化到4bit的情境中，最多可以使用<spanclass="math inline">\(2^4\)</span>一共16个数字。按照传统的简易方法，一般是取最接近的数字或者直接round函数。分位量化则是将数字按顺序排列，再分为十六等分，最小的一块映射成量化后的第一个数，第二块映射成量化后的第二数，以此类推。这样就充分利用了已有的数位，原始数据在量化后的数字上分布也是均匀的。</p><h3 id="bit-normalfloatnf4">4-bit NormalFloat（NF4）</h3><p>这个概念是在分位量化的基础上进行改进，并结合分块量化，降低计算复杂度和误差。上述的分位量化会增加计算消耗，预训练模型的参数基本上都服从均值为0的正态分布，可以将其缩放到[-1,1]的范围内。同时可以在[-1,1]的范围内，将正态分布函数划分为<spanclass="math inline">\(2^k+1\)</span>份，直接将参数映射到对应的分位上，不用每次都进行排序。</p><h3 id="双重量化double-quantization">双重量化（doubleQuantization）</h3><p>分块量化中每个块都会额外产生一个量化常数c，以块大小为64为例，每个块会产生32bit的量化常数，双重量化则是在第一次量化后，不会直接存储量化常数<spanclass="math inline">\(C_1\)</span>,而是按照块大小256对量化常数再量化为8bit去存储，这个阶段会产生一个量化常数<spanclass="math inline">\(C_2\)</span>。最终存储的参数为<spanclass="math inline">\(8/64 +32/(64-256)=0.127bits\)</span>.</p><h2 id="四adalora">四、AdaLORA</h2><h3 id="技术背景">技术背景</h3><p>LORA技术预先规定每个增量矩阵<spanclass="math inline">\(\Delta\)</span>的秩必须相同，这就忽略了不同层、类型参数对下游任务的影响。</p><figure><imgsrc="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308162040469.png"alt="图4" /><figcaption aria-hidden="true">图4</figcaption></figure><p>如图所示，将微调参数放在FFN的效果优于放在Attention矩阵中的效果；同时微调高层参数的效果优于微调底层参数。那么如何根据下游任务自动地找出重要的参数模块并给其分配更多地可微调参数呢？</p><h3 id="解决方案">解决方案</h3><p>AdaLORA主要包含两个模块：</p><ul><li><p><strong>SVD形式参数更新（SVD-basedadaptation）</strong>：直接将增量矩阵<spanclass="math inline">\(\Delta\)</span>参数化为SVD地形式，避免在训练过程中进行SVD计算带来的计算资源消耗；</p></li><li><p><strong>根据重要程度地参数分配（Importance-aware rankallocation）</strong>：去除一些冗余的奇异值。</p></li></ul><p><span class="math display">\[W=W^{(0)}+\Delta=W^{(0)}+P\Lambda Q\]</span></p><p><span class="math display">\[R(P,Q)=||P^TP-I||_F^2+||Q^TQ-I||_F^2\]</span></p><p>如式(5)，AdaLORA增量矩阵<spanclass="math inline">\(\Delta\)</span>替换为<spanclass="math inline">\(P\LambdaQ\)</span>,这样既省去复杂的SVD计算又能去除奇异值。同时，为保证P和Q的正交性，在训练过程中增加了一个正则化，保证<spanclass="math inline">\(P^{T}P=Q^{T}Q=I\)</span>.</p><p>该方法相较于LORA有两个优点：</p><ul><li>AdaLORA只去除奇异值矩阵，并不会去除奇异向量，更容易恢复误删的奇异值。</li><li>AdaLORA的P和Q为正交举证，LORA的A和B矩阵非正交。训练过程中裁剪操作不会影响其他奇异值对应的奇异向量，训练会更稳定，泛化性能更好。</li></ul><h2 id="参考文章">参考文章：</h2><p><ahref="https://zhuanlan.zhihu.com/p/646791309">LORA微调系列(一)：LORA和它的基本原理- 知乎 (zhihu.com)</a></p><p><ahref="https://zhuanlan.zhihu.com/p/648239462">LORA微调系列(二)：QLORA和它的基本原理- 知乎 (zhihu.com)</a></p><p><ahref="https://zhuanlan.zhihu.com/p/649756885">LORA微调系列(三)：AdaLORA和它的基本原理- 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实习</tag>
      
      <tag>微调</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
