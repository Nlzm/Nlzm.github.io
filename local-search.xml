<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习笔记——LORA微调</title>
    <link href="/2023/08/16/LORA%E5%BE%AE%E8%B0%83/"/>
    <url>/2023/08/16/LORA%E5%BE%AE%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<h1 id="学习笔记——LORA微调"><a href="#学习笔记——LORA微调" class="headerlink" title="学习笔记——LORA微调"></a>学习笔记——LORA微调</h1><p>​LORA是一种低资源微调LLM模型的方法，源自论文：[LoRA: Low-Rank Adaptation of Large Language Models。](<a href="https://arxiv.org/pdf/2106.09685.pdf">2106.09685.pdf (arxiv.org)</a>)</p><h2 id="一、高效微调"><a href="#一、高效微调" class="headerlink" title="一、高效微调"></a>一、高效微调</h2><p>​对于语言模型来说，在微调过程中，模型加载预训练参数$\Phi_{0}$进行初始化，并通过最大化条件语言模型概率实现参数调整$\Phi_{0}+\Delta\Phi $​，即：<br>$$<br>max_\Phi\sum_{(x,y)\in\mathcal{Z})}\sum_{t&#x3D;1}^{|y|}log(P_\Phi(y_t|x,y&lt;t))<br>$$<br>这种方式的主要缺点参数增量$\Delta\Phi$的维度和预训练参数$\Phi_{0}$是相同的，所需资源比较多，一般被称为full fine-tuing。</p><p>为了用更少的参数来表示学习增量$\Delta\Phi$,提出了一系列方法叫做高效微调。例如：Adapter、prefixtuning等。相比于其他方法LORA使用一个低秩矩阵来编码参数增量，这种方法不会增加推理耗时并且便于优化。</p><h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><p>​研究表明：预训练模型拥有极小的内在维度（<strong>instrisic dimension</strong>，表示数据变化的自由变量的个数），换而言之，存在一个极低维度的参数，微调它和在全参数空间中微调能起到相同的效果。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161517289.png" alt="img"></p><p>该论文认为参数矩阵更新的过程中也存在一个‘内在秩’。对于预训练的权重矩阵$W_0$，可以用一个低秩分解来表示参数更新$\Delta W$，即：<br>$$<br>W_0+\Delta W&#x3D;W_0+BA\quad B\in\mathbb{R}^{d\times r},A\in\mathbb{R}^{r\times k}\quad and\quad r\ll min(d,k)<br>$$<br>训练过程中可以冻结参数$W_0$，只训练A和B中的参数。如图所示，对于$h&#x3D;W_{0}x$​,前向传播过程就变为：<br>$$<br>h&#x3D;W_0x+\Delta Wx&#x3D;W_0x+BAx<br>$$</p><h2 id="三、-QLORA-2305-14314-pdf-arxiv-org"><a href="#三、-QLORA-2305-14314-pdf-arxiv-org" class="headerlink" title="三、[QLORA](2305.14314.pdf (arxiv.org))"></a>三、[QLORA](<a href="https://arxiv.org/pdf/2305.14314.pdf">2305.14314.pdf (arxiv.org)</a>)</h2><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161959472.png" alt="image-20230816195941425"></p><p>QLORA训练过程和LORA基本一致，区别在于QLORA模型是按照NF4保存的，训练时需要将参数反量化到bf16后进行训练。<br>$$<br>Y^{BF16}&#x3D;X^{BF16}doubleDequant(c_{2}^{FP32},c_{2}^{k-bit},W^{NF8})+X^{BF16}B^{BF16}A^{BF16}<br>$$</p><h3 id="分块量化（Block-wis-Quantization）"><a href="#分块量化（Block-wis-Quantization）" class="headerlink" title="分块量化（Block-wis Quantization）"></a>分块量化（Block-wis Quantization）</h3><p>量化是将输入从存储更多信息的表征映射为存储较少信息的表征的过程。</p><p>全局量化的方式存在一个问题：当输入中存在极大值或者离群值时，一些较小的参数无法被精确的表示，从而导致量化后的神经网络效果急剧下降。</p><p>分块量化是将输入划分为多个块，每个块分别量化，如图所示：</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308161954660.png" alt="image-20230816195439589"></p><p>明显看到分块量化能够减少过程中的误差。</p><h3 id="分位量化（Quantile-Quantization）"><a href="#分位量化（Quantile-Quantization）" class="headerlink" title="分位量化（Quantile Quantization）"></a>分位量化（Quantile Quantization）</h3><p>在将一个参数量化到4bit的情境中，最多可以使用$2^4$一共16个数字。按照传统的简易方法，一般是取最接近的数字或者直接round函数。分位量化则是将数字按顺序排列，再分为十六等分，最小的一块映射成量化后的第一个数，第二块映射成量化后的第二数，以此类推。这样就充分利用了已有的数位，原始数据在量化后的数字上分布也是均匀的。</p><h3 id="4-bit-NormalFloat（NF4）"><a href="#4-bit-NormalFloat（NF4）" class="headerlink" title="4-bit NormalFloat（NF4）"></a>4-bit NormalFloat（NF4）</h3><p>这个概念是在分位量化的基础上进行改进，并结合分块量化，降低计算复杂度和误差。上述的分位量化会增加计算消耗，预训练模型的参数基本上都服从均值为0的正态分布，可以将其缩放到[-1,1]的范围内。同时可以在[-1,1]的范围内，将正态分布函数划分为$2^k +1$份，直接将参数映射到对应的分位上，不用每次都进行排序。</p><h3 id="双重量化（double-Quantization）"><a href="#双重量化（double-Quantization）" class="headerlink" title="双重量化（double Quantization）"></a>双重量化（double Quantization）</h3><p>分块量化中每个块都会额外产生一个量化常数c，以块大小为64为例，每个块会产生32bit的量化常数，双重量化则是在第一次量化后，不会直接存储量化常数$C_1$,而是按照块大小256对量化常数再量化为8bit去存储，这个阶段会产生一个量化常数$C_2$。最终存储的参数为$8&#x2F;64 +32&#x2F;(64-256)&#x3D;0.127bits$.</p><h2 id="四、AdaLORA"><a href="#四、AdaLORA" class="headerlink" title="四、AdaLORA"></a>四、AdaLORA</h2><h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><p>LORA技术预先规定每个增量矩阵$\Delta$的秩必须相同，这就忽略了不同层、类型参数对下游任务的影响。</p><p><img src="https://2hang.oss-cn-beijing.aliyuncs.com/img/202308162040469.png" alt="image-20230816203952264"></p><p>如图所示，将微调参数放在FFN的效果优于放在Attention矩阵中的效果；同时微调高层参数的效果优于微调底层参数。那么如何根据下游任务自动地找出重要的参数模块并给其分配更多地可微调参数呢？</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>AdaLORA主要包含两个模块：</p><ul><li><p><strong>SVD形式参数更新（SVD-based adaptation）</strong>：直接将增量矩阵$\Delta$参数化为SVD地形式，避免在训练过程中进行SVD计算带来的计算资源消耗；</p></li><li><p><strong>根据重要程度地参数分配（Importance-aware rank allocation）</strong>：去除一些冗余的奇异值。</p></li></ul><p>$$<br>W&#x3D;W^{(0)}+\Delta&#x3D;W^{(0)}+P\Lambda Q<br>$$</p><p>$$<br>R(P,Q)&#x3D;||P^TP-I||_F^2+||Q^TQ-I||_F^2<br>$$</p><p>如式(5)，AdaLORA增量矩阵$\Delta$替换为$P\Lambda Q$,这样既省去复杂的SVD计算又能去除奇异值。同时，为保证P和Q的正交性，在训练过程中增加了一个正则化，保证$P^{T}P&#x3D;Q^{T}Q&#x3D;I$.</p><p>该方法相较于LORA有两个优点：</p><ul><li>AdaLORA只去除奇异值矩阵，并不会去除奇异向量，更容易恢复误删的奇异值。</li><li>AdaLORA的P和Q为正交举证，LORA的A和B矩阵非正交。训练过程中裁剪操作不会影响其他奇异值对应的奇异向量，训练会更稳定，泛化性能更好。</li></ul><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://zhuanlan.zhihu.com/p/646791309">LORA微调系列(一)：LORA和它的基本原理 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/648239462">LORA微调系列(二)：QLORA和它的基本原理 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/649756885">LORA微调系列(三)：AdaLORA和它的基本原理 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微调</tag>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
